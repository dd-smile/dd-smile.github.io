<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何使用wiki.js</title>
      <link href="/2023/04/07/wiki/"/>
      <url>/2023/04/07/wiki/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows下运行"><a href="#Windows下运行" class="headerlink" title="Windows下运行"></a>Windows下运行</h2><blockquote><p>Windows下使用Docker Desktop快速安装。</p><p>需要注意的是Docker Desktop在Windows安装要求有：</p><ul><li><p>在BIOS开启虚拟化</p></li><li><p>在Windows上启用WSL 2功能。</p></li></ul><blockquote><p>使用 WSL 在 Windows 上安装 Linux</p></blockquote><ul><li><p>官方文档 ：<a href="https://learn.microsoft.com/en-us/windows/wsl/install">https://learn.microsoft.com/en-us/windows/wsl/install</a></p></li><li><p>WSL2迁移Docker镜像存储位置</p></li></ul><blockquote><p>由于 Docker 镜像默认存储在C盘中，C盘空间会越来越小。所以需要进行迁移操作</p></blockquote><ul><li><p>查看 Docker 官网说明，发现原来启用 WSL 后，Docker 运行数据都在 WSL 发行版中，因此镜像存储位置只能由 WSL 管理。</p><p>安装 Docker 后，Docker 会自动创建 2 个发行版：</p><p>docker-desktop： 存储在 %LOCALAPPDATA%\Docker\wsl\distro<br>docker-desktop-data： 存储在 %LOCALAPPDATA%\Docker\wsl\data（占用空间的元凶）</p></li><li><p>具体迁移步骤如下：</p></li><li><p>停止 Docker 进程</p></li><li><p>关闭所有发行版： <code>wsl --shutdown</code></p></li><li><p>导出 docker-desktop-data 发行版： <code>wsl --export docker-desktop-data D:\wsl\docker\tmp\docker-desktop-data.tar</code>                 需要先创建文件夹，防止系统找不到指定路径</p></li><li><p>注销 docker-desktop-data 发行版： <code>wsl --unregister docker-desktop-data</code></p></li><li><p>导入 docker-desktop-data 到期望迁移的目录： <code>wsl --import docker-desktop-data D:\wsl\docker\data\ D:\wsl\docker\tmp\docker-desktop-data.tar --version 2</code> （迁移目录 <code>D:\wsl\docker\data\</code> 可根据个人需求修改）</p></li><li><p>（可选）删除第 3 步导出的临时文件： D:\wsl\docker\tmp\docker-desktop-data.tar<br>（可选）另一个 Docker 发行版 docker-desktop 可使用同样方式迁移，但是其占用空间很小，不迁移亦可</p><ul><li>执行脚本可以查看附件1</li></ul></li></ul></blockquote><p>Docker Desktop的新版本无法使用。会出现WSL中的Ubuntu超时，故把版本换成 4.15.0</p><p>旧版本官网地址 ： <a href="https://docs.docker.com/desktop/release-notes/">https://docs.docker.com/desktop/release-notes/</a></p><h3 id="1-安装Docker桌面"><a href="#1-安装Docker桌面" class="headerlink" title="1.安装Docker桌面"></a>1.安装Docker桌面</h3><p>安装完毕后，创建一个wiki文件夹，在此文件中创建 <code>docker-compose.yaml</code> 并进行配置</p><pre class=" language-shell"><code class="language-shell">version: "3"services:  db:    image: postgres:11-alpine  # 如果初始化一直报错, 请降级11为9版本. (特别注意)    environment:      POSTGRES_DB: wiki      POSTGRES_PASSWORD: wikijsrocks      POSTGRES_USER: wikijs    logging:      driver: "none"    restart: unless-stopped    volumes:      - db-data:/var/lib/postgresql/data  wiki:    image: requarks/wiki:2    depends_on:      - db    environment:      DB_TYPE: postgres      DB_HOST: db      DB_PORT: 5432      DB_USER: wikijs      DB_PASS: wikijsrocks      DB_NAME: wiki    restart: unless-stopped    ports:      - "3000:3000" # 这里设置docker内部和外部的端口,比如你改成"80:3000"服务器默认输入ip/域名后就能直接访问了.      - "443:3443" # 添加默认的https映射,可不添加volumes:  db-data:</code></pre><p>这个文件简单地定义了一个PostgreSQL数据库和Wiki.js容器。</p><h3 id="2-打开命令提示符"><a href="#2-打开命令提示符" class="headerlink" title="2.打开命令提示符"></a>2.打开命令提示符</h3><p>在Windows下，进入刚刚创建的wiki文件夹中，在地址栏中输入cmd进行启动命令提示符</p><h3 id="3-启动Wiki-js"><a href="#3-启动Wiki-js" class="headerlink" title="3.启动Wiki.js"></a>3.启动Wiki.js</h3><p>打开浏览器并导航到 <a href="http://localhost/">http://localhost</a> 已完成安装并使用 Wiki.js</p><h2 id="Wiki-js页面配置"><a href="#Wiki-js页面配置" class="headerlink" title="Wiki.js页面配置"></a>Wiki.js页面配置</h2><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><ol><li><p><strong>浏览http://&lt;域名或IP地址&gt;:3000</strong></p><p><img src="https://img2023.cnblogs.com/blog/222300/202303/222300-20230311172607756-261293704.png" alt="img"></p><p>输入管理员邮箱、密码和Wiki.js网站域名，点击”INSTALL”系统将进行初始化工作(包括创建相关的数据库表)。</p></li><li><p><strong>开放注册功能</strong> ：</p><p>需要注意的是，如果使用Local方式，需要注册者邮箱开启STMP功能。</p></li><li><p>具体页面配置查看官网 ：<a href="https://docs.requarks.io/">https://docs.requarks.io/</a></p></li></ol><h2 id="Linux下运行"><a href="#Linux下运行" class="headerlink" title="Linux下运行"></a>Linux下运行</h2><p>查看文档 ：</p><ul><li><a href="http://imbajin.com/2019-11-26-%E7%94%A8Wiki.js%E6%9D%A5%E4%BC%98%E9%9B%85%E7%9A%84%E7%AE%A1%E7%90%86%E6%96%87%E6%A1%A3/">http://imbajin.com/2019-11-26-%E7%94%A8Wiki.js%E6%9D%A5%E4%BC%98%E9%9B%85%E7%9A%84%E7%AE%A1%E7%90%86%E6%96%87%E6%A1%A3/</a>      用Wiki.js来优雅的管理文档</li><li><a href="https://george.betterde.com/technology/20220602.html">https://george.betterde.com/technology/20220602.html</a>    使用 Wiki.js 管理企业内部文档</li><li><a href="https://laosu.ml/2022/01/03/%E8%BD%BB%E9%87%8F%E4%BD%86%E5%8A%9F%E8%83%BD%E5%BC%BA%E5%A4%A7%E7%9A%84Wiki.js/">https://laosu.ml/2022/01/03/%E8%BD%BB%E9%87%8F%E4%BD%86%E5%8A%9F%E8%83%BD%E5%BC%BA%E5%A4%A7%E7%9A%84Wiki.js/</a>         轻量但功能强大的Wiki.js</li></ul><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><h3 id="附件1"><a href="#附件1" class="headerlink" title="附件1"></a>附件1</h3><blockquote><p>PowerShell 一键迁移脚本</p></blockquote><pre class=" language-shell"><code class="language-shell"># wsl2_move_docker_image.ps1 # Docker 镜像存储位置一键迁移脚本（适用于 WSL2 版本） # # Powershell Script 3.0+ # --------------------------------------------------------------------------------------- # 脚本使用方式（需使用管理员权限执行）: # .\wsl2_move_docker_image.ps1 -target "D:\wsl\docker" # --------------------------------------------------------------------------------------- # # target: 期望迁移的目录param([string]$target="D:\wsl\docker") Write-Host "Stop docker ..." net stop "com.docker.service" Write-Host "Stop wsl ..." wsl --shutdown Write-Host "Move docker-desktop-data image ..." wsl --export docker-desktop-data $target\tmp\docker-desktop-data.tar wsl --unregister docker-desktop-data wsl --import docker-desktop-data $target\data\ $target\tmp\docker-desktop-data.tar --version 2 Remove-Item $target\tmp\docker-desktop-data.tar -recurse Write-Host "Move docker-desktop image ..." wsl --export docker-desktop $target\tmp\docker-desktop.tar wsl --unregister docker-desktop wsl --import docker-desktop $target\distro\ $target\tmp\docker-desktop.tar --version 2 Remove-Item $target\tmp\docker-desktop.tar -recurse Write-Host "Finish."</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot入门</title>
      <link href="/2022/01/11/springboot/"/>
      <url>/2022/01/11/springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h1 id="第一章-JavaConfig"><a href="#第一章-JavaConfig" class="headerlink" title="第一章  JavaConfig"></a>第一章  JavaConfig</h1><ol><li><p>为什么要使用 Spring Boot</p><p>因为Spring， SpringMVC 需要使用的大量的配置文件 （xml文件）</p><p>还需要配置各种对象，把使用的对象放入到spring容器中才能使用对象</p><p>需要了解其他框架配置规则。</p></li><li><p>SpringBoot 就相当于 不需要配置文件的Spring+SpringMVC。 常用的框架和第三方库都已经配置好了。</p><p>拿来就可以使用了。</p></li><li><p>SpringBoot开发效率高，使用方便多了</p></li></ol><h2 id="1-1-JavaConfig"><a href="#1-1-JavaConfig" class="headerlink" title="1.1 JavaConfig"></a>1.1 JavaConfig</h2><p>JavaConfig: 使用java类作为xml配置文件的替代， 是配置spring容器的纯java的方式。 在这个java类这可以创建java对象，把对象放入spring容器中（注入到容器）， </p><p>使用两个注解：</p><p>1）@Configuration ： 放在一个类的上面，表示这个类是作为配置文件使用的。</p><p>2）@Bean：声明对象，把对象注入到容器中。</p><pre class=" language-java"><code class="language-java">例子：<span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Configuration:表示当前类是作为配置文件使用的。 就是用来配置容器的 *       位置：在类的上面 * *  SpringConfig这个类就相当于beans.xml */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建方法，方法的返回值是对象。 在方法的上面加入@Bean     * 方法的返回值对象就注入到容器中。     *     * @Bean: 把对象注入到spring容器中。 作用相当于&lt;bean>     *     *     位置：方法的上面     *     *     说明：@Bean,不指定对象的名称，默认是方法名是 id     *     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Student <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Student s1  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 指定对象在容器中的名称（指定&lt;bean>的id属性）     * @Bean的name属性，指定对象的名称（id）     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"lisiStudent"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Student <span class="token function">makeStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Student s2  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-2-ImporResource"><a href="#1-2-ImporResource" class="headerlink" title="1.2 @ImporResource"></a>1.2 @ImporResource</h2><p>@ImportResource 作用导入其他的xml配置文件， 等于 在xml 中这样写</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resources</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>其他配置文件<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">,</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-PropertyResource"><a href="#1-3-PropertyResource" class="headerlink" title="1.3 @PropertyResource"></a>1.3 @PropertyResource</h2><p>@PropertyResource: 读取properties属性配置文件。 使用属性配置文件可以实现外部化配置 ，</p><p>在程序代码之外提供数据。</p><p>步骤：</p><ol><li><p>在resources目录下，创建properties文件， 使用k=v的格式提供数据</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">tiger.name</span><span class="token punctuation">=</span><span class="token attr-value">东北老虎</span><span class="token attr-name">tiger.age</span><span class="token punctuation">=</span><span class="token attr-value">2</span></code></pre></li><li><p>在PropertyResource 指定properties文件的位置</p></li><li><p>使用@Value（value=”${key}”）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"tiger"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tiger</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${tiger.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${tiger.age}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Tiger{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">,</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:config.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.bjpowernode.vo"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//包扫描</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h1 id="第二章-Spring-Boot"><a href="#第二章-Spring-Boot" class="headerlink" title="第二章 Spring Boot"></a>第二章 Spring Boot</h1><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><p>SpringBoot是Spring中的一个成员， 可以简化Spring，SpringMVC的使用。 他的核心还是IOC容器。</p><p>特点：</p><ul><li><p>Create stand-alone Spring applications</p><p> 创建spring应用</p></li><li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p><p>内嵌的tomcat， jetty ， Undertow </p></li><li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p><p>提供了starter起步依赖，简化应用的配置。   </p><p>比如使用MyBatis框架 ， 需要在Spring项目中，配置MyBatis的对象 SqlSessionFactory ， Dao的代理对象</p><p>在SpringBoot项目中，在pom.xml里面, 加入一个 mybatis-spring-boot-starter依赖</p></li><li><p>Automatically configure Spring and 3rd party libraries whenever possible</p><p>尽可能去配置spring和第三方库。叫做自动配置（就是把spring中的，第三方库中的对象都创建好，放到容器中， 开发人员可以直接使用）</p></li><li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p><p> 提供了健康检查， 统计，外部化配置</p></li><li><p>Absolutely no code generation and no requirement for XML configuration</p><p>不用生成代码， 不用使用xml，做配置</p></li></ul><h2 id="2-2-创建Spring-Boot项目"><a href="#2-2-创建Spring-Boot项目" class="headerlink" title="2.2 创建Spring Boot项目"></a>2.2 创建Spring Boot项目</h2><h3 id="2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用"><a href="#2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用" class="headerlink" title="2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用"></a>2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用</h3><p>使用的地址： <a href="https://start.spring.io/">https://start.spring.io</a></p><h3 id="2-2-1-使用国内的地址"><a href="#2-2-1-使用国内的地址" class="headerlink" title="2.2.1  使用国内的地址"></a>2.2.1  使用国内的地址</h3><p><a href="https://start.springboot.io/">https://start.springboot.io</a></p><h2 id="2-3-注解的使用"><a href="#2-3-注解的使用" class="headerlink" title="2.3  注解的使用"></a>2.3  注解的使用</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>符合注解：由<span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span>        <span class="token number">1</span><span class="token punctuation">.</span>@SpringBootConfiguration    <span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> Configuration<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    <span class="token keyword">boolean</span> <span class="token function">proxyBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>说明：使用了<span class="token annotation punctuation">@SpringBootConfiguration</span>注解标注的类，可以作为配置文件使用的，    可以使用Bean声明对象，注入到容器</code></pre><p>2.@EnableAutoConfiguration</p><p>启用自动配置， 把java对象配置好，注入到spring容器中。例如可以把mybatis的对象创建好，放入到容器中</p><p>3.@ComponentScan</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span> 扫描器，找到注解，根据注解的功能创建对象，给属性赋值等等。默认扫描的包： <span class="token annotation punctuation">@ComponentScan</span>所在的类所在的包和子包。    </code></pre><h2 id="2-4-SpringBoot的配置文件"><a href="#2-4-SpringBoot的配置文件" class="headerlink" title="2.4 SpringBoot的配置文件"></a>2.4 SpringBoot的配置文件</h2><p>配置文件名称： application</p><p>扩展名有： properties( k=v) ;  yml ( k: v)</p><p>使用application.properties,   application.yml</p><p>例1：application.properties设置 端口和上下文</p><pre class=" language-xml"><code class="language-xml">#设置端口号server.port=8082#设置访问应用上下文路径， contextpathserver.servlet.context-path=/myboot</code></pre><p>例2： application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /myboot2</code></pre><h2 id="2-5-多环境配置"><a href="#2-5-多环境配置" class="headerlink" title="2.5 多环境配置"></a>2.5 多环境配置</h2><p>有开发环境， 测试环境， 上线的环境。</p><p>每个环境有不同的配置信息， 例如端口， 上下文件， 数据库url，用户名，密码等等</p><p>使用多环境配置文件，可以方便的切换不同的配置。</p><p>使用方式： 创建多个配置文件， 名称规则： application-环境名称.properties(yml)</p><p>创建开发环境的配置文件： application-dev.properties(  application-dev.yml )</p><p>创建测试者使用的配置： application-test.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#application主配置文件</span><span class="token comment" spellcheck="true">#激活使用哪个配置文件</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev //开发环境</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">test //测试环境</span></code></pre><h2 id="2-6-ConfigurationProperties"><a href="#2-6-ConfigurationProperties" class="headerlink" title="2.6 @ConfigurationProperties"></a>2.6 @ConfigurationProperties</h2><p>@ConfigurationProperties: 把配置文件的数据映射为java对象。</p><p>属性：prefix 配置文件中的某些key的开头的内容。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"school"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchoolInfo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String website<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getWebsite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> website<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWebsite</span><span class="token punctuation">(</span>String website<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>website <span class="token operator">=</span> website<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"SchoolInfo{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", website='"</span> <span class="token operator">+</span> website <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>application.properties</p><pre class=" language-pro"><code class="language-pro">#配置端口号server.port=8082#context-pathserver.servlet.context-path=/myboot#自定义key=valueschool.name=动力节点school.website=www.bjpowernode.comschool.address=北京的大兴区site=www.bjpowernode.com</code></pre><h2 id="2-7-使用jsp"><a href="#2-7-使用jsp" class="headerlink" title="2.7  使用jsp"></a>2.7  使用jsp</h2><p>SpringBoot不推荐使用jsp ，而是使用模板技术代替jsp</p><p>使用jsp需要配置：</p><p>1） 加入一个处理jsp的依赖。 负责编译jsp文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>如果需要使用servlet， jsp，jstl的功能</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>创建一个存放jsp的目录，一般叫做webapp</li></ol><p>​    index.jsp</p><ol start="4"><li>需要在pom.xml指定jsp文件编译后的存放目录。</li></ol><p>  META-INF/resources</p><p>5）创建Controller， 访问jsp</p><p>6）在application.propertis文件中配置视图解析器</p><h2 id="2-8-使用容器"><a href="#2-8-使用容器" class="headerlink" title="2.8 使用容器"></a>2.8 使用容器</h2><p>你想通过代码，从容器中获取对象。</p><p>通过SpringApplication.run(Application.class, args); 返回值获取容器。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方法原型 :</span><span class="token keyword">public</span> <span class="token keyword">static</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> primarySource<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>primarySource<span class="token punctuation">}</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ConfigurableApplicationContext <span class="token operator">:</span> 接口，是ApplicationContext的子接口<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationContext</span></code></pre><h2 id="2-9-ComnandLineRunner-接口-，-ApplcationRunner接口"><a href="#2-9-ComnandLineRunner-接口-，-ApplcationRunner接口" class="headerlink" title="2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口"></a>2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口</h2><blockquote><p>开发中可能会有这样的情景。需要在容器启动后执行一些内容。比如读取配置文件，数据库连接之类的。</p></blockquote><p>这两个接口都 有一个run方法。 执行时间在容器对象创建好后， 自动执行run（）方法。</p><p>可以完成自定义的在容器对象创建好的一些操作。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>ApplicationArguments args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="第三章-Web组件"><a href="#第三章-Web组件" class="headerlink" title="第三章 Web组件"></a>第三章 Web组件</h1><p>讲三个内容： 拦截器， Servlet ，Filter</p><h2 id="3-1-拦截器"><a href="#3-1-拦截器" class="headerlink" title="3.1 拦截器"></a>3.1 拦截器</h2><p>拦截器是SpringMVC中一种对象，能拦截器对Controller的请求。</p><p>拦截器框架中有系统的拦截器， 还可以自定义拦截器。  实现对请求预先处理。</p><p>实现自定义拦截器：</p><ol><li><p>创建类实现SpringMVC框架的HandlerInterceptor接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>                            <span class="token comment" spellcheck="true">//请求</span>                            HttpServletRequest request<span class="token punctuation">,</span>                            <span class="token comment" spellcheck="true">//应答</span>                           HttpServletResponse response<span class="token punctuation">,</span>                            <span class="token comment" spellcheck="true">//被拦截的控制器对象</span>                           Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>2.需在SpringMVC的配置文件中，声明拦截器</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        &lt;mvc:path="url" />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>拦截器类全限定名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot中注册拦截器：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//才会起作用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加拦截器对象， 注入到容器中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建拦截器对象</span>        HandlerInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定拦截的请求uri地址</span>        String path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/user/**"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定不拦截的地址</span>        String excludePath  <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/user/login"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>excludePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-Servlet"><a href="#3-2-Servlet" class="headerlink" title="3.2  Servlet"></a>3.2  Servlet</h2><p>在SpringBoot框架中使用Servlet对象。</p><p>使用步骤：</p><ol><li>创建Servlet类。 创建类继承HttpServlet</li><li>注册Servlet ，让框架能找到Servlet</li></ol><p> 例子：</p><p>1.创建自定义Servlet</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建Servlet类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无论如何,都使用doPost</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//使用HttpServletResponse输出数据，应答结果</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定数据格式</span>        PrintWriter out  <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===执行的是Servlet=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>注册Servlet</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplictionConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义方法， 注册Servlet对象</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//public ServletRegistrationBean(T servlet, String... urlMappings)</span>        <span class="token comment" spellcheck="true">//第一个参数是 Servlet对象， 第二个是url地址</span>        <span class="token comment" spellcheck="true">//ServletRegistrationBean bean =</span>                <span class="token comment" spellcheck="true">//new ServletRegistrationBean( new MyServlet(),"/myservlet");</span>        ServletRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;url-pattern></span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-过滤器Filter"><a href="#3-3-过滤器Filter" class="headerlink" title="3.3 过滤器Filter"></a>3.3 过滤器Filter</h2><p>Filter是Servlet规范中的过滤器，可以处理请求， 对请求的参数， 属性进行调整。 常常在过滤器中处理字符编码</p><p>在框架中使用过滤器：</p><ol><li>创建自定义过滤器类</li><li>注册Filter过滤器对象</li></ol><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 自定义过滤器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了MyFilter，doFilter "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注册Filter</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplicationConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        FilterRegistrationBean bean  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-字符集过滤器"><a href="#3-4-字符集过滤器" class="headerlink" title="3.4 字符集过滤器"></a>3.4 字符集过滤器</h2><p>CharacterEncodingFilter : 解决post请求中乱码的问题</p><p>在SpringMVC框架中， 在web.xml 注册过滤器。 配置他的属性。 </p><p>spring boot</p><p>第一种方式：</p><p>使用步骤：</p><ol><li><p>配置字符集过滤器</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSystemConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注册Servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MyServlet myServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletRegistrationBean reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>myServlet<span class="token punctuation">,</span><span class="token string">"/myservlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注册Filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        FilterRegistrationBean reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用框架中的过滤器类</span>        CharacterEncodingFilter filter  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定使用的编码方式</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定request ， response都使用encoding的值</span>        filter<span class="token punctuation">.</span><span class="token function">setForceEncoding</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reg<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定 过滤的url地址</span>        reg<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>修改application.properties文件， 让自定义的过滤器起作用</p></li></ol><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#SpringBoot中默认已经配置了CharacterEncodingFilter。 编码默认ISO-8859-1</span><span class="token comment" spellcheck="true">#设置enabled=false 作用是关闭系统中配置好的过滤器， 使用自定义的CharacterEncodingFilter</span><span class="token attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre><p>第二种方式</p><p>指定系统框架自带的过滤器 ,不需要注册Filter</p><p>修改application.properties文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9001</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/myboot</span><span class="token comment" spellcheck="true">#让系统的CharacterEncdoingFilter生效</span><span class="token attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#指定使用的编码方式</span><span class="token attr-name">server.servlet.encoding.charset</span><span class="token punctuation">=</span><span class="token attr-value">utf-8</span><span class="token comment" spellcheck="true">#强制request，response都使用charset属性的值</span><span class="token attr-name">server.servlet.encoding.force</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><h1 id="第四章-ORM-操作-MySQL"><a href="#第四章-ORM-操作-MySQL" class="headerlink" title="第四章 ORM 操作 MySQL"></a>第四章 ORM 操作 MySQL</h1><p>使用MyBatis框架操作数据，  在SpringBoot框架集成MyBatis</p><p>使用步骤：</p><ol><li><p>mybatis起步依赖 ： 完成mybatis对象自动配置， 对象放在容器中</p></li><li><p>pom.xml 指定把src/main/java目录中的xml文件包含到classpath中</p></li><li><p>创建实体类Student</p></li><li><p>创建Dao接口 StudentDao , 创建一个查询学生的方法 </p></li><li><p>创建Dao接口对应的Mapper文件， xml文件， 写sql语句</p></li><li><p>创建Service层对象， 创建StudentService接口和他的实现类。 去调用dao对象的方法。完成数据库的操作</p></li><li><p>创建Controller对象，访问Service。</p></li><li><p>写application.properties文件</p><p>配置数据库的连接信息。</p></li></ol><h3 id="第一种方式-：-Mapper"><a href="#第一种方式-：-Mapper" class="headerlink" title="第一种方式 ： @Mapper"></a>第一种方式 ： @Mapper</h3><p>@Mapper：放在dao接口的上面， 每个接口都需要使用这个注解。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Mapper：告诉MyBatis这是dao接口，创建此接口的代理对象。 *     位置：在类的上面 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>    Student <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"stuId"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="第二种方式-MapperScan"><a href="#第二种方式-MapperScan" class="headerlink" title="第二种方式  @MapperScan"></a>第二种方式  @MapperScan</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @MapperScan: 找到Dao接口和Mapper文件 *     basePackages：Dao接口所在的包名 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.bjpowernode.dao"</span><span class="token punctuation">,</span><span class="token string">"com.bjpowernode.mapper"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="第三种方式：-Mapper文件和Dao接口分开管理"><a href="#第三种方式：-Mapper文件和Dao接口分开管理" class="headerlink" title="第三种方式： Mapper文件和Dao接口分开管理"></a>第三种方式： Mapper文件和Dao接口分开管理</h3><p> 现在把Mapper文件放在resources目录下</p><p>1）在resources目录中创建子目录 （自定义的）,例如mapper目录</p><p>2）把mapper.xml文件放到 mapper目录中</p><p>3）在application.properties文件中，指定mapper文件的目录</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#指定mapper文件的位置</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mapper/*.xml</span><span class="token comment" spellcheck="true">#指定mybatis的日志</span><span class="token attr-name">mybatis.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre><ol start="4"><li>在pom.xml中指定 把resources目录中的文件 ， 编译到目标目录中</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--resources插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h3 id="第四个-事务"><a href="#第四个-事务" class="headerlink" title="第四个  事务"></a>第四个  事务</h3><p>Spring框架中的事务：</p><p>1） 管理事务的对象： 事务管理器（接口， 接口有很多的实现类）</p><p>​      例如：使用Jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager</p><p>2 ) 声明式事务：  在xml配置文件或者使用注解说明事务控制的内容</p><p>​     控制事务： 隔离级别，传播行为， 超时时间</p><p>3）事务处理方式：</p><p>​     1 ） Spring框架中的@Transactional</p><p>​     2 )    aspectj框架可以在xml配置文件中，声明事务控制的内容</p><p>​    </p><p>SpringBoot中使用事务： 上面的两种方式都可以。</p><p>步骤 : </p><p>1）在业务方法的上面加入@Transactional ,  加入注解后，方法有事务功能了。</p><p>2）明确的在 主启动类的上面 ，加入@EnableTransactionManager</p><p>例子：</p><pre class=" language-java"><code class="language-java">Services实现类    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/** * @Transactional: 表示方法的有事务支持 *       默认：使用库的隔离级别， REQUIRED 传播行为； 超时时间  -1 *       抛出运行时异常，回滚事务 */</span><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addStudent</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务方法addStudent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rows  <span class="token operator">=</span>  studentDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行sql语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//抛出一个运行时异常， 目的是回滚事务</span>    <span class="token comment" spellcheck="true">//int m   = 10 / 0 ;</span>    <span class="token keyword">return</span> rows<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//control类</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> StudentService service<span class="token punctuation">;</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addStudent"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">addStudent</span><span class="token punctuation">(</span>String naem<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">{</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">addStudent</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"添加学生: "</span><span class="token operator">+</span>rows<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第五章-接口架构风格-—RESTful"><a href="#第五章-接口架构风格-—RESTful" class="headerlink" title="第五章 接口架构风格 —RESTful"></a>第五章 接口架构风格 —RESTful</h1><p>接口： API（Application Programming Interface，应用程序接口）是一些预先定义的接口（如函数、HTTP接口），或指<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F/224122">软件系统</a>不同组成部分衔接的约定。 用来提供<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>与开发人员基于某<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6">软件</a>或硬件得以访问的一组<a href="https://baike.baidu.com/item/%E4%BE%8B%E7%A8%8B/2390628">例程</a>，而又无需访问源码，或理解内部<a href="https://baike.baidu.com/item/%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/9905789">工作机制</a>的细节。</p><p>接口（API）： 可以指访问servlet， controller的url，   调用其他程序的 函数</p><p>架构风格： api组织方式（样子）</p><p>   就是一个传统的：    <a href="http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26">http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26</a> </p><p>​                                      在地址上提供了 访问的资源名称addStudent, 在其后使用了get方式传递参数。</p><h3 id="5-1-REST"><a href="#5-1-REST" class="headerlink" title="5.1  REST"></a>5.1  REST</h3><p>RESTful架构风格</p><p>1)REST :  （英文： Representational State Transfer , 中文： 表现层状态转移)。</p><p>   REST：是一种接口的架构风格和设计的理念，不是标准。</p><p>   优点： 更简洁，更有层次</p><p>   表现层状态转移: </p><p>​         表现层就是视图层， 显示资源的， 通过视图页面，jsp等等显示操作资源的结果。</p><p>​          状态： 资源变化</p><p>​         转移： 资源可以变化的。 资源能创建，new状态，  资源创建后可以查询资源， 能看到资源的内容，</p><p>这个资源内容 ，可以被修改， 修改后资源 和之前的不一样。  </p><p>2）REST中的要素：</p><p>   用REST表示资源和对资源的操作。  在互联网中，表示一个资源或者一个操作。 </p><p>   资源使用url表示的， 在互联网， 使用的图片，视频， 文本，网页等等都是资源。</p><p>   资源是用名词表示。</p><p>  对资源： </p><p>​        查询资源： 看，通过url找到资源。 </p><p>​        创建资源： 添加资源</p><p>​        更新资源：更新资源 ，编辑</p><p>​        删除资源： 去除</p><p>​       </p><p> 资源使用url表示，通过名词表示资源。</p><p>​     在url中，使用名词表示资源， 以及访问资源的信息,  在url中，使用“ / “ 分隔对资源的信息</p><p>​     <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p> 使用http中的动作（请求方式）， 表示对资源的操作（CURD）</p><p>   GET:  查询资源  –  sql select</p><p>​                 处理单个资源： 用他的单数方式</p><p>​                  <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p>​                 <a href="http://localhost:8080/myboot/student/1001/1">http://localhost:8080/myboot/student/1001/1</a></p><p>​                处理多个资源：使用复数形式</p><p>​                  <a href="http://localhost:8080/myboot/students/1001/1002">http://localhost:8080/myboot/students/1001/1002</a></p><p>​                </p><p>   POST: 创建资源  – sql insert</p><p>​                <a href="http://localhost:8080/myboot/student">http://localhost:8080/myboot/student</a></p><p>​                在post请求中传递数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>   PUT： 更新资源  –  sql  update</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student/1<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>   DELETE: 删除资源  – sql delete</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student/1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除1的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p> 需要的分页，  排序等参数，依然放在  url的后面， 例如 </p><p> <a href="http://localhost:8080/myboot/students?page=1&amp;pageSize=20">http://localhost:8080/myboot/students?page=1&amp;pageSize=20</a></p><p>3） 一句话说明REST： </p><p>​    使用url表示资源 ，使用http动作操作资源。</p><ol start="4"><li>注解</li></ol><p>  @PathVariable :  从url中获取数据</p><p>  @GetMapping:    支持的get请求方式，  等同于 @RequestMapping( method=RequestMethod.GET)</p><p>  @PostMapping:  支持post请求方式 ，等同于 @RequestMapping( method=RequestMethod.POST)</p><p>  @PutMapping:  支持put请求方式，  等同于 @RequestMapping( method=RequestMethod.PUT)</p><p>   @DeleteMapping: 支持delete请求方式，  等同于 @RequestMapping( method=RequestMethod.DELETE)</p><p>  @RestController:  符合注解， 是@Controller 和@ResponseBody组合。</p><p>​               在类的上面使用@RestController ， 表示当前类者的所有方法都加入了 @ResponseBody</p><ol start="5"><li><p>Postman : 测试工具</p><p>使用Postman : 可以测试 get ，post ， put ，delete 等请求</p></li></ol><h3 id="5-2-在页面中或者ajax中，支持put，delete请求"><a href="#5-2-在页面中或者ajax中，支持put，delete请求" class="headerlink" title="5.2  在页面中或者ajax中，支持put，delete请求"></a>5.2  在页面中或者ajax中，支持put，delete请求</h3><p>在SpringMVC中 有一个过滤器， 支持post请求转为put ,delete</p><p>过滤器： org.springframework.web.filter.HiddenHttpMethodFilter</p><p>作用： 把请求中的post请求转为 put ， delete</p><p>实现步骤：</p><ol><li>application.properties(yml) : 开启使用 HiddenHttpMethodFilter 过滤器</li><li>在请求页面中，包含 _method参数， 他的值是 put， delete  ，  发起这个请求使用的post方式</li></ol><h1 id="第六章-Redis"><a href="#第六章-Redis" class="headerlink" title="第六章 Redis"></a>第六章 Redis</h1><p>Redis ： 一个NoSQL数据库，  常用作 缓存使用 （cache）</p><p>Redis的数据类型： string  ,  hash  ,set  ,zset , list</p><p>Redis是一个中间件： 是一个独立的服务器。</p><p>java中著名的客户端： Jedis ，  lettuce ， Redisson</p><p>Spring,SpringBoot中有 一个RedisTemplate（StringRedisTemplate） ，处理和redis交互  </p><h2 id="6-1-配置Windows版本的redis"><a href="#6-1-配置Windows版本的redis" class="headerlink" title="6.1  配置Windows版本的redis"></a>6.1  配置Windows版本的redis</h2><p>Redis-x64-3.2.100.rar 解压缩到一个 非中文 的目录</p><p>redis-server.exe：服务端， 启动后，不要关闭</p><p>redis-cli.exe：客户端， 访问redis中的数据</p><p>redisclient-win32.x86_64.2.0.jar : Redis图形界面客户端</p><p>执行方式： 在这个文件所在的目录，  执行 java -jar redisclient-win32.x86_64.2.0.jar</p><p>RedisTemplate 使用的  lettuce 客户端库</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--redis起步依赖： 直接在项目中使用RedisTemplate(StringRedisTemplate)--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>data-redis使用的   lettuce 客户端库在程序中使用RedisTemplate类的方法 操作redis数据， 实际就是调用的lettuce 客户端的中的方法</code></pre><h2 id="6-2-对比-StringRedisTemplate-和-RedisTemplate"><a href="#6-2-对比-StringRedisTemplate-和-RedisTemplate" class="headerlink" title="6.2 对比 StringRedisTemplate 和 RedisTemplate"></a>6.2 对比 StringRedisTemplate 和 RedisTemplate</h2><p>StringRedisTemplate ： 把k，v 都是作为String处理， 使用的是String的序列化 ， 可读性好</p><p>RedisTemplate ： 把k，v 经过了序列化存到redis。 k，v 是序列化的内容， 不能直接识别.</p><p>​                                 默认使用的jdk序列化， 可以修改为前提的序列化</p><p> 序列化：把对象转化为可传输的字节序列过程称为序列化。</p><p>反序列化：把字节序列还原为对象的过程称为反序列化。</p><p>为什么需要序列化</p><p>序列化最终的目的是为了对象可以跨平台存储，和进行网络传输。而我们进行跨平台存储和网络传输的方式就是IO，而我们的IO支持的数据格式就是字节数组。我们必须在把对象转成字节数组的时候就制定一种规则（序列化），那么我们从IO流里面读出数据的时候再以这种规则把对象还原回来（反序列化）。</p><p>什么情况下需要序列化</p><p>通过上面我想你已经知道了凡是需要进行“跨平台存储”和”网络传输”的数据，都需要进行序列化。</p><p>本质上存储和网络传输 都需要经过 把一个对象状态保存成一种跨平台识别的字节格式，然后其他的平台才可以通过字节信息解析还原对象信息。</p><p>序列化的方式</p><p>序列化只是一种拆装组装对象的规则，那么这种规则肯定也可能有多种多样，比如现在常见的序列化方式有：</p><p>JDK（不支持跨语言）、JSON、XML、Hessian、Kryo（不支持跨语言）、Thrift、Protofbuff、</p><p>Student( name=zs, age=20)   —-  { “name”:”zs”, “age”:20 }</p><p>java的序列化： 把java对象转为byte[], 二进制数据</p><p>json序列化：json序列化功能将对象转换为 JSON 格式或从 JSON 格式转换对象。例如把一个Student对象转换为JSON字符串{“name”:”李四”, “age”:29} )，反序列化(将JSON字符串 {“name”:”李四”, “age”:29} 转换为Student对象)</p><p>示例代码 : </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 注入RedisTemplate     *      三种情况     *     private RedisTemplate&lt;String,String>     *     private RedisTemplate&lt;Object,Object>     *     private RedisTemplate     *     *     注意: RedisTemplate 对象名称 redisTemplate     */</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加数据到redis</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/redis/addstring"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addToRedis</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//操作Redis中string类型的数据,先获取ValueOperations对象</span>        ValueOperations valueOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加数据到redis</span>        valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"myname"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"key是: "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",它的值是: "</span><span class="token operator">+</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//从redis获取数据</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"redis/getstring"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getData</span><span class="token punctuation">(</span>String k<span class="token punctuation">)</span><span class="token punctuation">{</span>        ValueOperations valueOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object v <span class="token operator">=</span> valueOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"key是: "</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">",它的值是: "</span><span class="token operator">+</span>v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用StringRedisTemplate来实现添加数据到redis与从redis获取数据</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"redis/{k}/{v}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addStringKV</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String k<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> String v<span class="token punctuation">)</span><span class="token punctuation">{</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"使用StringRedisTemplate对象"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/redis/getstr/{k}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String k<span class="token punctuation">)</span><span class="token punctuation">{</span>        String v <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"key是: "</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">",它的值是: "</span><span class="token operator">+</span>v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>设置key或者value的序列化方式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用RedisTemplate ，在存取值之前，设置序列化</span><span class="token comment" spellcheck="true">// 设置 key 使用String的序列化</span>redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置 value 的序列化</span>redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="第七章-SpringBoot集成Dubbo"><a href="#第七章-SpringBoot集成Dubbo" class="headerlink" title="第七章 SpringBoot集成Dubbo"></a>第七章 SpringBoot集成Dubbo</h1><h2 id="7-1-看-SpringBoot继承Dubbo的文档"><a href="#7-1-看-SpringBoot继承Dubbo的文档" class="headerlink" title="7.1  看 SpringBoot继承Dubbo的文档"></a>7.1  看 SpringBoot继承Dubbo的文档</h2><p> <a href="https://github.com/apache/dubbo-spring-boot-project/blob/master/README_CN.md">https://github.com/apache/dubbo-spring-boot-project/blob/master/README_CN.md</a></p><h2 id="7-2-公共项目"><a href="#7-2-公共项目" class="headerlink" title="7.2  公共项目"></a>7.2  公共项目</h2><p>独立的maven项目： 定义了接口和数据类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1901229007746699151L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentService</span> <span class="token punctuation">{</span>    Student <span class="token function">queryStudent</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="7-3-提供者"><a href="#7-3-提供者" class="headerlink" title="7.3  提供者"></a>7.3  提供者</h2><p>创建SpringBoot项目</p><p>1） pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--加入公共项目的gav--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjpowernode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>022-interface-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--dubbo依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--zookeeper依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 排除log4j依赖 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>2）实现接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用dubbo中的注解暴露服务 * @Component 可以不用加 */</span><span class="token annotation punctuation">@DubboService</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> StudentService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>version <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Student <span class="token function">queryStudent</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student student  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token number">1001</span> <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>            student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"------1001-张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1002</span>  <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>            student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"#######1002-李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3）application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#配置服务名称 dubbo:application name="名称"</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">studentservice-provider</span><span class="token comment" spellcheck="true">#配置扫描的包， 扫描的@DubboService</span><span class="token attr-name">dubbo.scan.base-packages</span><span class="token punctuation">=</span><span class="token attr-value">com.bjpowernode.service</span><span class="token comment" spellcheck="true">#配置dubbo协议</span><span class="token comment" spellcheck="true">#dubbo.protocol.name=dubbo</span><span class="token comment" spellcheck="true">#dubbo.protocol.port=20881</span><span class="token comment" spellcheck="true">#注册中心</span><span class="token attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://localhost:2181</span></code></pre><p>4)在启动类的上面</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDubbo</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderApplication</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProviderApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="7-4消费者"><a href="#7-4消费者" class="headerlink" title="7.4消费者"></a>7.4消费者</h2><p>创建SpringBoot项目</p><p>1） pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--加入公共项目的gav--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjpowernode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>022-interface-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--dubbo依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--zookeeper依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 排除log4j依赖 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li> 创建了Controller 或者 Service都可以</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 引用远程服务， 把创建好的代理对象，注入给studentService     */</span>    <span class="token comment" spellcheck="true">//@DubboReference(interfaceClass = StudentService.class,version = "1.0")</span>    <span class="token comment" spellcheck="true">/**     * 没有使用interfaceClass，默认的就是 引用类型的 数据类型      */</span>    <span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> StudentService studentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">queryStudent</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        Student student   <span class="token operator">=</span> studentService<span class="token punctuation">.</span><span class="token function">queryStudent</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"调用远程接口，获取对象："</span><span class="token operator">+</span>student<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3）application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#指定服务名称</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">consumer-application</span><span class="token comment" spellcheck="true">#指定注册中心</span><span class="token attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://localhost:2181</span></code></pre><h2 id="7-5-练习"><a href="#7-5-练习" class="headerlink" title="7.5 练习"></a>7.5 练习</h2><p>使用的技术： SpringBoot ,Dubbo, Redis, MyBatis</p><p>Student表：</p><p>CREATE TABLE <code>student</code> (<br>  <code>id</code> int(11) NOT NULL AUTO_INCREMENT,<br>  <code>name</code> varchar(255) COLLATE utf8_bin DEFAULT NULL,<br>  <code>phone</code> varchar(11) COLLATE utf8_bin DEFAULT NULL,<br>  <code>age</code> int(11) DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</p><ol><li>注册学生</li></ol><p>​     phone必须唯一， 如果已经存在了手机号， 注册失败的。 </p><p>​                 int addStudent(Student student);</p><p>​                返回值：int</p><p>​                 1： 注册成功</p><p>​                 2 ： 手机号已经存在  </p><p>​                                    </p><p>​      name至少两个字符，</p><p>​      age 必须 大于 0 </p><p>2） 查询学生，根据id查询，此学生。 </p><p>​        先到redis查询学生， 如果redis没有此学生，从数据库查询， 把查询到的学生放入到redis。</p><p>​      后面再次查询这个学生应该从redis就能获取到。</p><p>​        Student  queryStudent(Integer id);</p><ol start="3"><li>使用Dubbo框架，    addStudent, queryStudent 是有服务提供者实现的。</li></ol><p>​    消费者可以是一个Controller ， 调用提供者的两个方法。  实现注册和查询。</p><p>4）页面使用html和ajax，jquery。</p><p>​       在html页面中提供 form 注册学生， 提供文本框输入id，进行查询。</p><p>​      注册和查询都使用ajax技术。</p><p>​    html，jquery.js都放到resources/static目录中</p><h1 id="第八章-打包"><a href="#第八章-打包" class="headerlink" title="第八章  打包"></a>第八章  打包</h1><h2 id="8-1-打包war"><a href="#8-1-打包war" class="headerlink" title="8.1 打包war"></a>8.1 打包war</h2><p>1.创建了一个jsp应用</p><p>2.修改pom.xml</p><p> 1)指定打包后的文件名称</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--打包后的文件名称--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>myboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>2)指定jsp编译目录</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--resources插件， 把jsp编译到指定的目录--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>META-INF/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--使用了mybatis ，而且mapper文件放在src/main/java目录--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--把src/main/resources下面的所有文件，都包含到classes目录--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>3）执行打包是war</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--打包类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span></code></pre><p>4）主启动类继承SpringBootServletInitializer</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * SpringBootServletInitializer: 继承这个类， 才能使用独立tomcat服务器 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JspApplication</span>  <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span>  <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>JspApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> SpringApplicationBuilder <span class="token function">configure</span><span class="token punctuation">(</span>SpringApplicationBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span>JspApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5）部署war</p><p> 把war放到tomcat等服务器的发布目录中。  tomcat为例， myboot.war放到tomcat/webapps目录。</p><h2 id="8-2-打包为jar"><a href="#8-2-打包为jar" class="headerlink" title="8.2 打包为jar"></a>8.2 打包为jar</h2><p>1.创建了一个包含了jsp的项目</p><p>2.修改pom.xml</p><p>​     1) 指定打包后的文件名称</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--打包后的文件名称--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>myboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>指定springboot-maven-plugin版本</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--打包jar， 有jsp文件时，必须指定maven-plugin插件的版本是 1.4.2.RELEASE--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre><p>3）最后执行 maven clean package</p><p>​       在target目录中，生成jar 文件， 例子是myboot.jar</p><p>​       执行独立的springboot项目  在cmd中 java  -jar  myboot.jar</p><h1 id="第九章-Thymeleaf-模板引擎"><a href="#第九章-Thymeleaf-模板引擎" class="headerlink" title="第九章 Thymeleaf 模板引擎"></a>第九章 Thymeleaf 模板引擎</h1><p>Thymeleaf： 是使用java开发的模板技术， 在服务器端运行。 把处理后的数据发送给浏览器。</p><p>​         模板是作视图层工作的。  显示数据的。  Thymeleaf是基于Html语言。 Thymleaf语法是应用在</p><p>​        html标签中 。 SpringBoot框架集成Thymealeaf,  使用Thymeleaf代替jsp。</p><p>Thymeleaf 的官方网站：<a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a><br>Thymeleaf 官方手册：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p><h2 id="9-1-表达式"><a href="#9-1-表达式" class="headerlink" title="9.1 表达式"></a>9.1 表达式</h2><ol><li><p>标准变量表达式 </p><p>语法：  ${key} </p><p>作用： 获取key对于的文本数据，  key 是request作用域中的key ， 使用request.setAttribute(), model.addAttribute()</p><p>在页面中的 html标签中， 使用 th:text=”${key}” </p></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>标准变量表达式:  ${key}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${site}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>key不存在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>获取SysUser对象 属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${myuser.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${myuser.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${myuser.sex}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名：m男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${myuser.age}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${myuser.getName()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取姓名使用getXXX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>选择变量表达式（ 星号变量表达式）</p><p>语法：  *{key}</p><p>作用： 获取这个key对应的数据，   *{key}需要和th:object 这个属性一起使用。</p><p>目的是简单获取对象的属性值。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>使用 *{} 获取SysUser的属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${myuser}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{sex}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{age}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>使用*{}完成的表示 对象的属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{myuser.name}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre></li><li><p>链接表达式</p><p>语法： @{url}</p><p>作用： 表示链接， 可以</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> , <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>..<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="9-2-Thymeleaf属性"><a href="#9-2-Thymeleaf属性" class="headerlink" title="9.2  Thymeleaf属性"></a>9.2  Thymeleaf属性</h2><p>属性是放在html元素中的，就是html元素的属性，加入了th前缀。  属性的作用不变。    加入上th， 属性的值由模板引擎处理了。  在属性可以使用变量表达式</p><p>例如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/loginServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/loginServlet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${methodAttr}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h2 id="9-3-each"><a href="#9-3-each" class="headerlink" title="9.3 each"></a>9.3 each</h2><p>each循环， 可以循环List，Array</p><p>语法：</p><p>在一个html标签中，使用th:each</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合循环成员,循环的状态变量:${key}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${集合循环成员}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>集合循环成员,循环的状态变量:两个名称都是自定义的。 “循环的状态变量”这个名称可以不定义，默认是"集合循环成员Stat"</code></pre><p>each循环Map</p><p>在一个html标签中，使用th:each</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合循环成员,循环的状态变量:${key}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${集合循环成员.key}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${集合循环成员.value}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>集合循环成员,循环的状态变量:两个名称都是自定义的。 “循环的状态变量”这个名称可以不定义，默认是"集合循环成员Stat"key:map集合中的keyvalue：map集合key对应的value值</code></pre><h2 id="9-4-th-if"><a href="#9-4-th-if" class="headerlink" title="9.4 th:if"></a>9.4 th:if</h2><p>“th:if”  : 判断语句， 当条件为true， 显示html标签体内， 反之不显示 没有else语句</p><pre class=" language-xml"><code class="language-xml">语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 10 <span class="token punctuation">></span> 0 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 显示文本内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>还有一个 th:unless  和 th:if相反的行为</p><pre class=" language-xml"><code class="language-xml">语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 10 &lt; 0 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 当条件为false显示标签体内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>例子：if</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span> if 使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${sex<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>m<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别是男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${isLogin}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>已经登录系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${age <span class="token punctuation">></span> 20}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄大于20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--""空字符是true--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>name是“”<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--null是false--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${isOld}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> isOld是null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>例子： unless</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>unless: 判断条件为false，显示标签体内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${sex<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>f<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别是男的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${isLogin}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${isOld}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> isOld是null <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="9-5-th-switch"><a href="#9-5-th-switch" class="headerlink" title="9.5  th:switch"></a>9.5  th:switch</h2><p>th:switch 和 java中的swith一样的</p><pre class=" language-html"><code class="language-html">语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>要比对的值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>值1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        结果1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>值2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        结果2    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        默认结果    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    以上的case只有一个语句执行    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="9-6-th-inline"><a href="#9-6-th-inline" class="headerlink" title="9.6 th:inline"></a>9.6 th:inline</h2><ol><li><p>内联text：  在html标签外，获取表达式的值</p><p>语法： </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>显示姓名是：[[${key}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>内联 text, 使用内联表达式显示变量的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是[[${name}]]，年龄是[[${age}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>,年龄是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${age}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>使用内联text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是[[${name}]],性别是[[${sex}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>内联javascript</p></li></ol><pre class=" language-html"><code class="language-html">例子： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">         <span class="token keyword">var</span> myname <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> myage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//alert("获取的模板中数据 "+ myname + ","+myage)</span>        <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"单击事件，获取数据 "</span><span class="token operator">+</span> myname <span class="token operator">+</span> <span class="token string">","</span><span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>sex<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="9-7-字面量"><a href="#9-7-字面量" class="headerlink" title="9.7  字面量"></a>9.7  字面量</h2><p>例子：</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>文本字面量: 使用单引号括起来的字符串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>我是<span class="token punctuation">'</span>+${name}+<span class="token punctuation">'</span>,我所在的城市<span class="token punctuation">'</span>+${city}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>数字字面量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${20<span class="token punctuation">></span>5}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 20大于 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>boolean字面量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${isLogin <span class="token punctuation">=</span><span class="token punctuation">=</span> true}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户已经登录系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>null字面量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${myuser !<span class="token punctuation">=</span> null}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>有myuser数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="9-8-字符串连接"><a href="#9-8-字符串连接" class="headerlink" title="9.8  字符串连接"></a>9.8  字符串连接</h2><p>连接字符串有两种语法</p><p>1） 语法使用 单引号括起来字符串  ， 使用 + 连接其他的 字符串或者表达式</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>我是<span class="token punctuation">'</span>+${name}+<span class="token punctuation">'</span>,我所在的城市<span class="token punctuation">'</span>+${city}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>2）语法：使用双竖线， |字符串和表达式|</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>|我是${name},我所在城市${city|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    显示数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>例子：</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>字符串连接方式1：使用单引号括起来的字符串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>我是<span class="token punctuation">'</span>+${name}+<span class="token punctuation">'</span>,我所在的城市<span class="token punctuation">'</span>+${city}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>字符串连接方式2：|字符串和表达式|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>|我是${name},所在城市${city},其他人${myuser.name}|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="9-9-运算符"><a href="#9-9-运算符" class="headerlink" title="9.9 运算符"></a>9.9 运算符</h2><pre class=" language-xml"><code class="language-xml">算术运 算： + , - - , * , / , %关系比较 : > , &lt; , >= , &lt;= ( gt , lt , ge , le )相等判断： == , != ( eq , ne )<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>使用运算符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${age <span class="token punctuation">></span> 10}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄大于 10 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ 20 + 30 }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示运算结果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${myuser <span class="token punctuation">=</span><span class="token punctuation">=</span> null}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>myuser是null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${myuser eq null}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>myuser是null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${myuser ne null}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>myuser不是null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${isLogin <span class="token punctuation">=</span><span class="token punctuation">=</span> true ? <span class="token punctuation">'</span>用户已经登录<span class="token punctuation">'</span> : <span class="token punctuation">'</span>用户需要登录<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${isLogin <span class="token punctuation">=</span><span class="token punctuation">=</span> true ? ( age <span class="token punctuation">></span> 10 ? <span class="token punctuation">'</span>用户是大于10的<span class="token punctuation">'</span> : <span class="token punctuation">'</span>用户年龄比较小<span class="token punctuation">'</span>) : <span class="token punctuation">'</span>用户需要登录<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>三元运算符： 表达式  ？ true的结果 : false的结果三元运算符可以嵌套</code></pre><h2 id="9-10-内置对象"><a href="#9-10-内置对象" class="headerlink" title="9.10 内置对象"></a>9.10 内置对象</h2><p>文档地址：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#web-context-namespaces-for-requestsession-attributes-etc">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#web-context-namespaces-for-requestsession-attributes-etc</a>.</p><p>#request 表示 HttpServletRequest</p><p>#session 表示 HttpSession对象</p><p>session 表示Map对象的， 是#session的简单表示方式， 用来获取session中指定的key的值</p><p>​               #session.getAttribute(“loginname”) == session.loginname</p><p>这些是内置对象，可以在模板文件中直接使用。</p><pre class=" language-html"><code class="language-html">例子： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">350</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>内置对象#request,#session，session的使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>获取作用域中的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.getAttribute(<span class="token punctuation">'</span>requestData<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#session.getAttribute(<span class="token punctuation">'</span>sessionData<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.loginname}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>使用内置对象的方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        getRequestURL=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.getRequestURL()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        getRequestURI=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.getRequestURI()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        getQueryString=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.getQueryString()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        getContextPath=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.getContextPath()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        getServerName=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.getServerName()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        getServerPort=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.getServerPort()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="9-11-内置工具类"><a href="#9-11-内置工具类" class="headerlink" title="9.11 内置工具类"></a>9.11 内置工具类</h2><p>内置工具类型： Thymeleaf自己的一些类，提供对string， date ，集合的一些处理方法</p><p>#dates: 处理日器的工具类</p><p>#numbers:处理数字的</p><p>#lists: 处理list集合的</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">350</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>日期类对象 #dates<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(mydate )}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(mydate,<span class="token punctuation">'</span>yyyy-MM-dd<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(mydate,<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.year(mydate)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.month(mydate)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.monthName(mydate)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.createNow()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>内置工具类#numbers，操作数字的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#numbers.formatCurrency(mynum)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#numbers.formatDecimal(mynum,5,2)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>内置工具类#strings,操作字符串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#strings.toUpperCase(mystr)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#strings.indexOf(mystr,<span class="token punctuation">'</span>power<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#strings.substring(mystr,2,5)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#strings.substring(mystr,2)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#strings.concat(mystr,<span class="token punctuation">'</span>---java开发的黄埔军校---<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#strings.length(mystr)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#strings.length(<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#strings.isEmpty(mystr)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> mystring 不是 空字符串  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>内置工具类#lists,操作list集合<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#lists.size(mylist)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#lists.contains(mylist,<span class="token punctuation">'</span>a<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>有成员a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!${#lists.isEmpty(mylist)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> list 集合有多个成员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>处理null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${zoo?.dog?.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="9-12-自定义模板"><a href="#9-12-自定义模板" class="headerlink" title="9.12 自定义模板"></a>9.12 自定义模板</h2><p>模板是内容复用， 定义一次，在其他的模板文件中多次使用。</p><p>模板使用：</p><p>1.定义模板</p><p>2.使用模板</p><p>模板定义语法：</p><pre class=" language-html"><code class="language-html">th:fragment="模板自定义名称"例如：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>head<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        动力节点-java开发    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        www.bjpowernode.com    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>引用模板语法：</p><pre class=" language-html"><code class="language-html">1) ~{templatename :: selector}   templatename:  文件名称   selector： 自定义模板名称2）templatename :: selector   templatename:  文件名称   selector： 自定义模板名称对于使用模板：有包含模板（th:include）， 插入模板(th:insert)</code></pre><h1 id="第十章-总结"><a href="#第十章-总结" class="headerlink" title="第十章 总结"></a>第十章 总结</h1><h2 id="10-1-注解"><a href="#10-1-注解" class="headerlink" title="10.1 注解"></a>10.1 注解</h2><p>Spring + SpringMVC + SpringBoot </p><pre class=" language-java"><code class="language-java">创建对象的：<span class="token annotation punctuation">@Controller</span><span class="token operator">:</span> 放在类的上面，创建控制器对象，注入到容器中<span class="token annotation punctuation">@RestController</span><span class="token operator">:</span> 放在类的上面，创建控制器对象，注入到容器中。             作用：复合注解是<span class="token annotation punctuation">@Controller</span> <span class="token punctuation">,</span> <span class="token annotation punctuation">@ResponseBody</span><span class="token punctuation">,</span> 使用这个注解类的，里面的控制器方法的返回值                   都是数据<span class="token annotation punctuation">@Service</span> ： 放在业务层的实现类上面，创建service对象，注入到容器<span class="token annotation punctuation">@Repository</span> <span class="token operator">:</span> 放在dao层的实现类上面，创建dao对象，放入到容器。 没有使用这个注解，是因为现在使用MyBatis框               架，  dao对象是MyBatis通过代理生成的。 不需要使用<span class="token annotation punctuation">@Repository</span>、 所以没有使用。<span class="token annotation punctuation">@Component</span><span class="token operator">:</span>  放在类的上面，创建此类的对象，放入到容器中。 赋值的：<span class="token annotation punctuation">@Value</span> ： 简单类型的赋值， 例如 在属性的上面使用<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> String name          还可以使用<span class="token annotation punctuation">@Value</span><span class="token punctuation">,</span>获取配置文件者的数据（properties或yml）。           <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> Integer port<span class="token annotation punctuation">@Autowired</span><span class="token operator">:</span> 引用类型赋值自动注入的，支持byName<span class="token punctuation">,</span> byType<span class="token punctuation">.</span> 默认是byType 。 放在属性的上面，也可以放在构造             方法的上面。 推荐是放在构造方法的上面<span class="token annotation punctuation">@Qualifer</span><span class="token operator">:</span>  给引用类型赋值，使用byName方式。               <span class="token annotation punctuation">@Autowird</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Qualifer</span>都是Spring框架提供的。<span class="token annotation punctuation">@Resource</span> ： 来自jdk中的定义， javax<span class="token punctuation">.</span>annotation。 实现引用类型的自动注入， 支持byName<span class="token punctuation">,</span> byType<span class="token punctuation">.</span>             默认是byName<span class="token punctuation">,</span> 如果byName失败， 再使用byType注入。 在属性上面使用其他：<span class="token annotation punctuation">@Configuration</span> ： 放在类的上面，表示这是个配置类，相当于xml配置文件<span class="token annotation punctuation">@Bean</span>：放在方法的上面， 把方法的返回值对象，注入到spring容器中。<span class="token annotation punctuation">@ImportResource</span> ： 加载其他的xml配置文件， 把文件中的对象注入到spring容器中<span class="token annotation punctuation">@PropertySource</span> ： 读取其他的properties属性配置文件<span class="token annotation punctuation">@ComponentScan</span>： 扫描器 ，指定包名，扫描注解的<span class="token annotation punctuation">@ResponseBody</span><span class="token operator">:</span> 放在方法的上面，表示方法的返回值是数据， 不是视图<span class="token annotation punctuation">@RequestBody</span> <span class="token operator">:</span> 把请求体中的数据，读取出来， 转为java对象使用。<span class="token annotation punctuation">@ControllerAdvice</span><span class="token operator">:</span>  控制器增强， 放在类的上面， 表示此类提供了方法，可以对controller增强功能。<span class="token annotation punctuation">@ExceptionHandler</span> <span class="token operator">:</span> 处理异常的，放在方法的上面<span class="token annotation punctuation">@Transcational</span> <span class="token operator">:</span>  处理事务的， 放在service实现类的<span class="token keyword">public</span>方法上面， 表示此方法有事务SpringBoot中使用的注解    <span class="token annotation punctuation">@SpringBootApplication</span> ： 放在启动类上面， 包含了<span class="token annotation punctuation">@SpringBootConfiguration</span>                          <span class="token annotation punctuation">@EnableAutoConfiguration</span>， <span class="token annotation punctuation">@ComponentScan</span>    MyBatis相关的注解<span class="token annotation punctuation">@Mapper</span> ： 放在类的上面 ， 让MyBatis找到接口， 创建他的代理对象    <span class="token annotation punctuation">@MapperScan</span> <span class="token operator">:</span>放在主类的上面 ， 指定扫描的包， 把这个包中的所有接口都创建代理对象。 对象注入到容器中<span class="token annotation punctuation">@Param</span> ： 放在dao接口的方法的形参前面， 作为命名参数使用的。    Dubbo注解<span class="token annotation punctuation">@DubboService</span><span class="token operator">:</span> 在提供者端使用的，暴露服务的， 放在接口的实现类上面<span class="token annotation punctuation">@DubboReference</span><span class="token operator">:</span>  在消费者端使用的， 引用远程服务， 放在属性上面使用。<span class="token annotation punctuation">@EnableDubbo</span> <span class="token operator">:</span> 放在主类上面， 表示当前引用启用Dubbo功能。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的注册界面</title>
      <link href="/2021/10/19/two/"/>
      <url>/2021/10/19/two/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安卓开发"><a href="#安卓开发" class="headerlink" title="安卓开发"></a>安卓开发</h1><h4 id="实现一个仿QQ的注册界面"><a href="#实现一个仿QQ的注册界面" class="headerlink" title="实现一个仿QQ的注册界面"></a>实现一个仿QQ的注册界面</h4><ol><li>相对布局RelativeLayout</li><li>线性布局LinearLayout</li><li>drawable中selector标签的使用(用来实现Button的点击效果)</li><li>EditText的属性标签使用</li><li>TextView的属性标签使用</li><li>ImageView的属性标签的使用</li></ol><h3 id="1-设计分析"><a href="#1-设计分析" class="headerlink" title="1.设计分析"></a>1.设计分析</h3><ul><li><p>控件分析</p><table><thead><tr><th align="center">看到的控件</th><th align="center">业务功能</th><th align="center">实际控件</th></tr></thead><tbody><tr><td align="center">企鹅图标</td><td align="center">无</td><td align="center">ImageView</td></tr><tr><td align="center">“QQ”文本</td><td align="center">无</td><td align="center">TextView</td></tr><tr><td align="center">账号输入框</td><td align="center">编辑输入账号(只能输入数字)</td><td align="center">EditText</td></tr><tr><td align="center">密码输入框</td><td align="center">编辑输入密码(只能输入数字)</td><td align="center">EditText</td></tr><tr><td align="center">注册按钮</td><td align="center">执行注册</td><td align="center">Button</td></tr><tr><td align="center">“阅读并同意”文本</td><td align="center">无(颜色为白色)</td><td align="center">TextView</td></tr><tr><td align="center">“服务条款”</td><td align="center">无(颜色为黑色)</td><td align="center">TextView</td></tr></tbody></table></li><li><p>布局分析</p><p>使用相对布局大框架中嵌入线性布局</p><p>示意图如下:相对布局为红色,线性布局为黑色</p><p><img src="https://img-blog.csdnimg.cn/3f2456d0f14c418ba0e8684fbd662861.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="images"></p></li></ul><h3 id="2-编程中出现的问题"><a href="#2-编程中出现的问题" class="headerlink" title="2.编程中出现的问题"></a>2.编程中出现的问题</h3><ul><li>Button的点击效果颜色没有反应</li></ul><p>提示不兼容.(应该是版本问题)</p><p>解决办法如下:改为红色圈圈中的Bridge即可</p><p><img src="https://img-blog.csdnimg.cn/376d474cdff0460ba85526db74597c39.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="3-Button的点击效果实现"><a href="#3-Button的点击效果实现" class="headerlink" title="3.Button的点击效果实现"></a>3.Button的点击效果实现</h3><ol><li><p>在drawable下面创建一个xml文件:bt_bg.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>selector xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>按下时的图形 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"true"</span>   android<span class="token operator">:</span>drawable<span class="token operator">=</span><span class="token string">"@drawable/bg2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 松开时的图形 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"false"</span>   android<span class="token operator">:</span>drawable<span class="token operator">=</span><span class="token string">"@drawable/bg1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>selector<span class="token operator">></span></code></pre></li><li><p>在activity_main.xml文件中去实现</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>Button        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bt_bg"</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li><li><p>在颜色点击效果的基础上实现Button的圆角效果</p><pre class=" language-java"><code class="language-java">#在drawable下面创建一个xml文件<span class="token operator">:</span>bt_bg3<span class="token punctuation">.</span>xml    <span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>selector xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义当button 处于pressed 状态时的形态。<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>shape<span class="token operator">></span>            <span class="token operator">&lt;</span>solid android<span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"#FF00FF"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置按钮的四个角为弧形 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> android<span class="token operator">:</span>radius 弧形的半径 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>corners android<span class="token operator">:</span>radius<span class="token operator">=</span><span class="token string">"20dip"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> padding：Button里面的文字与Button边界的间隔 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>padding android<span class="token operator">:</span>bottom<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>left<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>right<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>top<span class="token operator">=</span><span class="token string">"10dp"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>shape<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义button默认时的形态<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>shape<span class="token operator">></span>            <span class="token operator">&lt;</span>solid android<span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"#000000"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置按钮的四个角为弧形 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> android<span class="token operator">:</span>radius 弧形的半径 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>corners android<span class="token operator">:</span>radius<span class="token operator">=</span><span class="token string">"20dip"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> padding：Button里面的文字与Button边界的间隔 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>padding android<span class="token operator">:</span>bottom<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>left<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>right<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>top<span class="token operator">=</span><span class="token string">"10dp"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>shape<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>selector<span class="token operator">></span>#xml文件中应用                    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bt_bg3"</span></code></pre></li></ol><h3 id="activity-main-xml源码如下"><a href="#activity-main-xml源码如下" class="headerlink" title="activity_main.xml源码如下"></a>activity_main.xml源码如下</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>RelativeLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span>    xmlns<span class="token operator">:</span>tools<span class="token operator">=</span><span class="token string">"http://schemas.android.com/tools"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    tools<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">".MainActivity"</span>    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/fengmian"</span><span class="token operator">></span>   #APP界面的背景图    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tubiao"</span>         android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span>        android<span class="token operator">:</span>layout_marginStart<span class="token operator">=</span><span class="token string">"25dp"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"80dp"</span>        android<span class="token operator">:</span>layout_marginLeft<span class="token operator">=</span><span class="token string">"25dp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ImageView  #左上角QQ图标            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/tubiao"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"QQ"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"36sp"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"43dp"</span>        android<span class="token operator">:</span>layout_below<span class="token operator">=</span><span class="token string">"@+id/tubiao"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>RelativeLayout            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ImageView                android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/mobile"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"20dp"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/ipone"</span><span class="token operator">></span>    #输入账号的手机图标            <span class="token operator">&lt;</span><span class="token operator">/</span>ImageView<span class="token operator">></span>            <span class="token operator">&lt;</span>EditText                android<span class="token operator">:</span>layout_toRightOf<span class="token operator">=</span><span class="token string">"@+id/mobile"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"@string/input_mobile"</span>                android<span class="token operator">:</span>inputType<span class="token operator">=</span><span class="token string">"number"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>EditText<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span>        <span class="token operator">&lt;</span>RelativeLayout            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ImageView                android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/mima"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"20dp"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/mima"</span><span class="token operator">></span>    #输入密码的密码矢量图            <span class="token operator">&lt;</span><span class="token operator">/</span>ImageView<span class="token operator">></span>            <span class="token operator">&lt;</span>EditText                android<span class="token operator">:</span>layout_toRightOf<span class="token operator">=</span><span class="token string">"@+id/mima"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"@string/input_password"</span>                android<span class="token operator">:</span>inputType<span class="token operator">=</span><span class="token string">"number"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>EditText<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span>        <span class="token operator">&lt;</span>Button            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"38dp"</span>            android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"22dp"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/login"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"20sp"</span>            android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bty_ys"</span><span class="token operator">></span>   实现Button的点击效果        <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span>        android<span class="token operator">:</span>layout_centerHorizontal<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>layout_alignParentBottom<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>layout_marginBottom<span class="token operator">=</span><span class="token string">"42dp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/login_message"</span>            android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@android:color/white"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/service"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span></code></pre><h3 id="strings-xml源码"><a href="#strings-xml源码" class="headerlink" title="strings.xml源码"></a>strings.xml源码</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>resources<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"app_name"</span><span class="token operator">></span>qq<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"input_mobile"</span><span class="token operator">></span>输入手机号<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"input_password"</span><span class="token operator">></span>输入密码<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"login"</span><span class="token operator">></span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"login_message"</span><span class="token operator">></span>阅读并同意<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"service"</span><span class="token operator">></span>服务条款<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>resources<span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五子棋项目</title>
      <link href="/2021/10/18/first/"/>
      <url>/2021/10/18/first/</url>
      
        <content type="html"><![CDATA[<h1 id="五子棋单机版"><a href="#五子棋单机版" class="headerlink" title="五子棋单机版"></a>五子棋单机版</h1><ol><li><h3 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h3><p>棋盘大小:15*15</p><p>空棋盘开局,黑棋先下,白棋后下,一次只能下一子.棋子下在交叉点上,棋子下在棋盘上之后,不能移动.</p><p>当相同颜色的五颗棋子连在一起的时候,就认为胜负已分.连在一起的方法有4个:水平,垂直,左上右下,左下右上;如果整个棋盘都摆满棋子之后,仍旧不分胜负,则认为和局.</p></li><li><h3 id="编程遇到的问题"><a href="#编程遇到的问题" class="headerlink" title="编程遇到的问题"></a>编程遇到的问题</h3><ol><li><h4 id="怎么样定义棋盘的坐标"><a href="#怎么样定义棋盘的坐标" class="headerlink" title="怎么样定义棋盘的坐标"></a>怎么样定义棋盘的坐标</h4><p>编程的时候数组或者列表的下标都是从0开始的,但是五子棋棋盘的坐标是从1开始的,如何解决两者之间的不协调?</p><p>第一种方法:把每个二维数组或列表的索引值全部加1,比如说五子棋棋盘第4行第6列,则对应的坐标是arr[3] [5].</p><p>第二种方法:直接忽略x=0和y=0这一行一列.分配内存时,直接分配16*16的内存空间做为棋盘即可.</p><ul><li>经过敲代码后发现,第一种方法需要来回切换,比较繁琐,代码量增加.因此采用第二种方法</li></ul></li><li><h4 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h4><p>对于计算机来说,一般会把左上角作为坐标系原点.从左往右是水平方向y,从上往下是垂直方向x</p><p>比如(4,6)表示第4行第6列,如下图:</p><p><img src="https://img-blog.csdnimg.cn/e1142dabff20449ba48dc5248ecde8f6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="images"></p><p>对于五子棋棋盘来说,4个角落的坐标点分别为:</p><ul><li>左上角:(1,1)</li><li>左下角:(15,1)</li><li>右上角:(1,15)</li><li>右下角:(15,15)</li></ul></li><li><h4 id="胜负判断"><a href="#胜负判断" class="headerlink" title="胜负判断"></a>胜负判断</h4><p>相同颜色的五颗棋子连在一起,则胜负已分.有以下几种极端情况:</p><ul><li>从左到右:判断(x,y-4)~(x,y+4)这9个坐标中是否有连续5颗棋子连在一起</li><li>从上到下:判断(x-4,y)~(x+4,y)这9个坐标中是否有连续5颗棋子连在一起</li><li>左上右下:判断(x-4,y-4)~(x+4,y+4)这9个坐标中是否有连续5颗棋子连在一起</li><li>左下右上:判断(x+4,y-4)~(x-4,y+4)这9个坐标中是否有连续5颗棋子连在一起</li></ul></li></ol></li><li><h3 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h3><p>使用面向对象的思维来建立模型</p><p>棋子类</p><ul><li> 属性:颜色color,坐标pos   </li><li>方法:setColor(),getColor(),setPos(),getPos()</li></ul><p>棋盘类</p><ul><li>属性:棋盘大小BOARD_SIZE,棋盘上的棋子board[] []</li><li>方法:setChess(),getChess(),initBoard(),printBoard()</li></ul><p>规则类(引擎类)</p><ul><li>属性:棋盘对象 board</li><li>方法:判断胜负isWon(),计算机下棋方法computerGo(),人工下棋userGo()</li></ul></li><li><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><p>创建一个棋盘类</p><p>chessboard.py</p><pre class=" language-py"><code class="language-py">#棋盘类class ChessBoard:    # 棋盘大小    BOARD_SIZE = 15    # 初始化    def __init__(self):        self.board = []        for i in range(ChessBoard.BOARD_SIZE+1):            tmp = []            for j in range(ChessBoard.BOARD_SIZE+1):                tmp.append(0)            self.board.append(tmp)    #清空棋盘    def initBoard(self):        for i in range(1,ChessBoard.BOARD_SIZE+1):            for j in range(1,ChessBoard.BOARD_SIZE+1):                self.board[i][j] = '+'  # 实现方法initBoard(),对棋盘进行初始化,把所有的空格都设置成'+'符号    # 打印棋盘    def printBoard(self):        # 打印列号        print('  ',end=' ')        for i in range(1,ChessBoard.BOARD_SIZE+1):            ch = chr(96+i)            print(ch,end=' ')        print()        # 打印行号和棋盘        for i in range(1,ChessBoard.BOARD_SIZE+1):            # 打印行号            print('%2d' % i,end=' ')            # 打印棋盘            for j in range(1,ChessBoard.BOARD_SIZE+1):                print(self.board[i][j],end=' ')            print()    # 放置棋子    # 参数1 pos位置坐标 类型是长度为2的列表或元组    # 参数2 color棋子颜色    def setChess(self,pos,color):        x = pos[0]        y = pos[1]        self.board[x][y] = color    # 放置棋子    def setChessMan(self,chessMan):            pos = chessMan.getPos()            color = chessMan.getColor()            self.setChess(pos,color)    # 根据位置读取棋子的颜色    def getChess(self,pos):        x,y = pos        return self.board[x][y]    # 判断某个坐标点是否为空    def isEmpty(self,pos):        chess = self.getChess(pos)        if chess == '+':            return True        #非空即黑或白        return False</code></pre><p>创建一个棋子类</p><p>chessman.py</p><pre class=" language-py"><code class="language-py">#棋子类class ChessMan:    # 初始化    def __init__(self):        self.color = 'x'        self.pos = (0,0)    # 设置颜色    def setColor(self,color):        self.color = color    # 获取颜色    def getColor(self):        return self.color    # 设置位置    def setPos(self,pos):        self.pos = pos    # 获取位置    def getPos(self):        return self.pos</code></pre><p>测试代码</p><p>main.py</p><pre class=" language-py"><code class="language-py"># from 文件名 import 类名from chessboard import *from chessman import *# 测试打印棋盘def test1():    board = ChessBoard()    board.initBoard()    board.printBoard()#测试摆放棋子def test2():    board = ChessBoard()    board.initBoard()    #测试setChess()摆放棋子    board.setChess((3,5),'x')    #测试setChessMan()摆放棋子    chessMan = ChessMan()    chessMan.setColor('o')    chessMan.setPos((4,6))    board.setChessMan(chessMan)    board.printBoard()    ret = board.isEmpty((3,6))    print(ret)if __name__ == '__main__':  # 相当于一个入口,当其他模块被调用的时候,先运行此模块    test2()</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis入门</title>
      <link href="/2021/08/09/mybatis/"/>
      <url>/2021/08/09/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="JDK-静态代理"><a href="#JDK-静态代理" class="headerlink" title="JDK - 静态代理"></a>JDK - 静态代理</h2><blockquote><p>静态代理要求目标和代理对象实现同一个业务接口. 代理对象中的核心功能是由目标来完成的, 代理对象负责增强功能.</p></blockquote><h3 id="什么是静态代理"><a href="#什么是静态代理" class="headerlink" title="什么是静态代理"></a>什么是静态代理</h3><p>  它是代理模式的一种.<br>  它具备以下特点:</p><ol><li>目标对象和代理对象实现同一个业务接口</li><li>目标对象必须实现接口</li><li>代理对象在程序运行前就已经存在</li><li>能够灵活的进行目标对象的切换,却无法进行功能的灵活处理(使用动态代理解决此问题)</li></ol><h3 id="静态代理的实现"><a href="#静态代理的实现" class="headerlink" title="静态代理的实现"></a>静态代理的实现</h3><p>  业务功能:请明星进行节目表演.<br>  明星刘德华:目标对象(无法直接访问)<br>  刘德华助理:代理对象(我们可以访问,他还可以跟明星对接)<br>  我们      :客户端对象</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>业务接口 : </p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//规定的唱歌的业务功能</span>    <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>目标对象 : </p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     *   目标对象:刘德华,实现业务接口中的功能,进行唱歌表演     */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStarLiu</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是刘德华,我正在表演唱歌............"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>代理对象 : </p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Agent</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//类中的成员变量设计为接口</span>    <span class="token keyword">public</span> Service target<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//目标对象</span>    <span class="token comment" spellcheck="true">//传入目标对象,方法的参数设计为接口</span>    <span class="token keyword">public</span> <span class="token function">Agent</span><span class="token punctuation">(</span>Service target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"预订时间.........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"预订场地.........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//切记切记:业务功能必须由目标对象亲自实现</span><span class="token comment" spellcheck="true">//        SuperStarLiu liu = new SuperStarLiu();</span><span class="token comment" spellcheck="true">//        liu.sing();</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        SuperStarZhou zhou = new SuperStarZhou();</span><span class="token comment" spellcheck="true">//        zhou.sing();</span>        <span class="token comment" spellcheck="true">//面向接口编程:调用时,接口指向实现类</span>        target<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结算费用.........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端对象 : </p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//测试功能</span>    <span class="token comment" spellcheck="true">//        SuperStarLiu liu = new SuperStarLiu();</span>    <span class="token comment" spellcheck="true">//        liu.sing();</span>    <span class="token comment" spellcheck="true">//        Agent agent = new Agent();</span>    <span class="token comment" spellcheck="true">//        agent.sing();</span>            <span class="token comment" spellcheck="true">//有接口和实现类,必须使用接口指向实现类(规范)</span>            Service agent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Agent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            agent<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h6 id="注意-什么是面向接口编程"><a href="#注意-什么是面向接口编程" class="headerlink" title="注意 : 什么是面向接口编程"></a>注意 : 什么是面向接口编程</h6><p>类中的成员变量设计为接口, 方法的形参设计为接口, 方法的返回值设计为接口, 调用时接口指向实现类.</p><h2 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK - 动态代理"></a>JDK - 动态代理</h2><blockquote><p>代理对象在程序运行的过程中动态在内存构建.可以灵活的进行业务功能的切换.</p></blockquote><h3 id="什么是动态代理"><a href="#什么是动态代理" class="headerlink" title="什么是动态代理"></a>什么是动态代理</h3><ol><li>目标对象必须实现业务接口</li><li>JDK代理对象不需要实现业务接口</li><li>JDK动态代理的对象在程序运行前不存在.在程序运行时动态的在内存中构建</li><li>JDK动态代理灵活的进行业务功能的切换</li><li>本类中的方法(非接口中的方法)不能被代理</li></ol><h3 id="动态代理用到的类和接口"><a href="#动态代理用到的类和接口" class="headerlink" title="动态代理用到的类和接口"></a>动态代理用到的类和接口</h3><h5 id="1-Proxy类"><a href="#1-Proxy类" class="headerlink" title="1. Proxy类"></a>1. Proxy类</h5><p>它是java.lang.reflect.Proxy包下的类. 它有一个方法Proxy.newProxyInstance(…..)专门用来生成动态代理对象.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//类加载器</span>                                      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//目标对象实现的所有接口</span>                                      InvocationHandler h<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//它就类似于Agent的功能,代理的功能和目标对象的业务功能调用在这</span>        <span class="token keyword">throws</span> IllegalArgumentException    <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h5 id="2-Method类"><a href="#2-Method类" class="headerlink" title="2. Method类"></a>2. Method类</h5><p>反射用的类,用来进行目标对象的方法的反射调用.</p><p>method对象接住我们正在调用的方法sing(),show()</p><p>method==sing(),show()</p><p>method.invoke();==&gt;手工调用目标方法   sing();    show();</p><h5 id="3-InvocationHandler接口"><a href="#3-InvocationHandler接口" class="headerlink" title="3. InvocationHandler接口"></a>3. InvocationHandler接口</h5><p>它是实现代理和业务功能的.我们在调用时使用匿名内部实现.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义一个接口</span><span class="token keyword">interface</span> <span class="token class-name">Service</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Service service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哈哈哈.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    service<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="动态代理的实现"><a href="#动态代理的实现" class="headerlink" title="动态代理的实现"></a>动态代理的实现</h3><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//类中的成员变量设计为接口,目标对象</span>    Service target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//传入目标对象</span>    <span class="token keyword">public</span> <span class="token function">ProxyFactory</span><span class="token punctuation">(</span>Service target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回动态代理对象</span>    <span class="token keyword">public</span> Object <span class="token function">getAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">//ClassLoader loader, 类加载器,完成目标对象的加载</span>            target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//Class&lt;?>[] interfaces,目标对象实现的所有接口</span>            target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//InvocationHandler h,实现代理功能的接口 ,我们传入的是匿名内部实现</span>            <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>                    <span class="token comment" spellcheck="true">//创建代理对象</span>                    Object proxy<span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//method就是目标方法sing(),show()</span>                    Method method<span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//目标方法的参数</span>                    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//代理功能</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"预订时间........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//代理功能</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"预订场地........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//主业务功能实现</span>                    <span class="token comment" spellcheck="true">//target.sing();还是写死了方法的调用, 不成</span>                    <span class="token comment" spellcheck="true">//sing(),show(),one()</span>                    Object obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//代理功能</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结算费用........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//切记:这个是目标方法的返回值</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类 : </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ProxyFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SuperStarLiu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Service agent <span class="token operator">=</span> <span class="token punctuation">(</span>Service<span class="token punctuation">)</span>factory<span class="token punctuation">.</span><span class="token function">getAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    agent<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>接口能够指向所有的实现类.</p></blockquote><p>如果在测试类中把<code>Service agent = (Service)factory.getAgent();</code> 换成<code>ServiceImpl agent = (ServiceImpl)factory.getAgent();</code> 是不行的.</p><ul><li>因为此时的 ServiceImpl 对象不是 之前的 ServiceImpl 对象, 而是被代理类增强后, 有增强功能的 ServiceImpl 对象, ServiceImpl类无法接住此对象.</li><li>使用接口可以指向新的实现.</li></ul><h2 id="一个简易MyBatis框架"><a href="#一个简易MyBatis框架" class="headerlink" title="一个简易MyBatis框架"></a>一个简易MyBatis框架</h2><p>常用的框架SSM</p><p>Spring : 它是整合其它框架的框架. 它的核心是IOC和AOP.</p><p>SpringMVC : 它是Spring家族的一员, 专门用来优化控制器的.提供了极简单数据提交, 数据携带, 页面跳转等功能.</p><p>MyBatis : 是持久化层的一个框架. 用来进行数据库访问的优化. 专注于sql语句. 极大简化了JDBC的访问.</p><h3 id="添加框架的步骤"><a href="#添加框架的步骤" class="headerlink" title="添加框架的步骤 :"></a>添加框架的步骤 :</h3><ol><li><p>新建库建表</p></li><li><p>新建maven项目</p></li><li><p>修改目录, 添加缺失的目录</p></li><li><p>修改pom.xml文件, 添加MyBatis的依赖, 添加MySQL的依赖</p></li><li><p>修改pom.xml文件, 添加资源文件的指定</p></li><li><p>在idea中添加数据库的可视化</p></li><li><p>添加jdbc.properties配置文件(数据库的配置)</p><pre class=" language-java"><code class="language-java">jdbc<span class="token punctuation">.</span>driverClassName<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverjdbc<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>ssm<span class="token operator">?</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span>Asia<span class="token operator">/</span>Shanghai<span class="token operator">&amp;</span>allowPublicKeyRetrieval<span class="token operator">=</span><span class="token boolean">true</span>jdbc<span class="token punctuation">.</span>username<span class="token operator">=</span>rootjdbc<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token number">123456</span></code></pre></li><li><p>添加SqlMapConfig.xml文件(<strong>MyBatis的核心配置文件</strong>)</p><blockquote><p>注意文件头</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--读取jdbc属性文件--></span>    <span class="token comment" spellcheck="true">&lt;!--设置日志输出--></span>    <span class="token comment" spellcheck="true">&lt;!--注册实体类别名--></span>    <span class="token comment" spellcheck="true">&lt;!--配置环境变量--></span>    <span class="token comment" spellcheck="true">&lt;!--注册mapper.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>具体实现</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--读取属性文件(jdbc.properties)        属性:            resource:从resource目录下找指定名称的文件加载(相对路径)            url:使用绝对路径加载属性文件    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置数据库的环境变量(数据库连接配置)        default:使用下面的environment标签的id属性进行指定配置    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--在公司开发时用的配置            id:就是提供给environment的default属性使用        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--配置事务管理器 - transactionManager                type:指定事务管理的方式(追源码可知道有两种选项:jdbc/managed                    JDBC:事务的控制交给程序员来出来                    MANAGED:由容器(spring)来管理事务            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--配置数据源 - dataSource                type:指定不同的配置方式(追源码可知有三种属性:jndi/pooled/unpooled                    JNDI:java命名目录接口在服务器(tomcat)端进行数据库连接池的管理                    POOLED:使用数据库连接池                    UNPOOLED:不使用数据库连接池            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--配置数据库连接池的基本参数                    private String driver;                    private String url;                    private String username;                    private String password;                --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--在家开发时用的配置--></span><span class="token comment" spellcheck="true">&lt;!--        &lt;environment id="home">            &lt;transactionManager type="">&lt;/transactionManager>            &lt;dataSource type="">&lt;/dataSource>        &lt;/environment>--></span>        <span class="token comment" spellcheck="true">&lt;!--上线时用的配置--></span><span class="token comment" spellcheck="true">&lt;!--        &lt;environment id="online">            &lt;transactionManager type="">&lt;/transactionManager>            &lt;dataSource type="">&lt;/dataSource>        &lt;/environment>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册mapper.xml文件        resource:从resource目录下找指定名称的文件进行注册        url:使用绝对路径注册        class:动态代理方式下的注册    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建实体类Student, 用来封装数据</p><blockquote><p>当前使用的是实体类的成员变量和数据库中的列名相同, 完成映射</p><p>在后续也可以使用别名进行成员变量和数据库列名的映射 =&gt; 详见 resultMap的简单用法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//做添加的时候, 因为id是自增的, 所以不用给值</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String email<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String email<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", email='"</span> <span class="token operator">+</span> email <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>添加完成学生表的增删改查的功能的StudentMapper.xml文件</p><blockquote><p>注意文件头</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--    mapper:是整个文件的大标签,用来开始和结束xml文件    属性:        namespace:指定命名空间(相当于包名),用来区分不同mapper.xml文件中相同的id属性        --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>csd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--查询语句,用到查询时,直接调用id就行--></span>        <span class="token comment" spellcheck="true">&lt;!--完成查询全部学生的功能            resultType:指定查询返回的结果集的类型,如果是集合,则必须是泛型的类型            parameterType:如果有参数,则通过它来指定参数的类型        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--用来写sql语句--></span>        select id,name,email,age from student;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建测试类, 进行功能测试</p><pre class=" language-Java"><code class="language-Java">public class MyTest {    @Test    public void testA() throws IOException {        //使用文件流读取核心配置文件SqlMapConfig.xml        InputStream in = Resources.getResourceAsStream("SqlMapConfig.xml");        //创建SqlSessionFactory工厂        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in);        //取出sqlSession对象        SqlSession sqlSession = factory.openSession();        //完成查询操作        List<Student> list = sqlSession.selectList("csd.getAll");        list.forEach(student -> System.out.println(student));        //关闭sqlSession        sqlSession.close();    }}</code></pre></li></ol><h3 id="增删改查的功能"><a href="#增删改查的功能" class="headerlink" title="增删改查的功能"></a>增删改查的功能</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>StudentMapper.xml中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--按主键ID查询--></span>    <span class="token comment" spellcheck="true">&lt;!--  原先的方法是 :public Student getById(Integer id){}           mybatis中映射关系查表得 int => Integer    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--#{}表示占位符,也就是在jdbc中的 ?--></span>        select id,name,email,age from student where id=#{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--模糊查询--></span>    <span class="token comment" spellcheck="true">&lt;!--原先的方法是 List&lt;Student> getByName(String name){}        mybatis中映射关系查表得 string => String    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--${}表示字符串拼接,有两个尖角 '' 只能使用${} --></span>        select id,name,email,age from student where name like '%${name}%';    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用文件流读取核心配置文件SqlMapConfig.xml</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SqlSessionFactory工厂</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出sqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成查询操作  (按主键ID查询)</span>        Student stu <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"csd.getById"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭sqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用文件流读取核心配置文件SqlMapConfig.xml</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SqlSessionFactory工厂</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出sqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成查询操作  (模糊查询)</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"csd.getByName"</span><span class="token punctuation">,</span> <span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭sqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p>StudentMapper.xml中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--增加学生--></span>    <span class="token comment" spellcheck="true">&lt;!--原先的方法是 int insert(Student stu){}        增删改中, mybatis自动返回, 没有resultType    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into student(name,email,age) values(#{name},#{email},#{age});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用文件流读取核心配置文件SqlMapConfig.xml</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SqlSessionFactory工厂</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出sqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//增加学生  使用到Student的除主键外的全参构造器</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"csd.insert"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"刘六"</span><span class="token punctuation">,</span><span class="token string">"123@qq.com"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要手动提交</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭sqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>StudentMapper.xml中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--按主键删除学生--></span>    <span class="token comment" spellcheck="true">&lt;!--原先的方法是 int delete(Integer id){}--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from student where id = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用文件流读取核心配置文件SqlMapConfig.xml</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SqlSessionFactory工厂</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出sqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除学生</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"csd.delete"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要手动提交</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭sqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>StudentMapper.xml中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--按主键更新学生数据--></span>    <span class="token comment" spellcheck="true">&lt;!--原先的方法是 int update(Student stu)--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update student set name=#{name},email=#{email},age=#{age} where id=#{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用文件流读取核心配置文件SqlMapConfig.xml</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SqlSessionFactory工厂</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出sqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更新学生数据    使用到了Student类的全参构造器</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"csd.update"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"刘拉拉"</span><span class="token punctuation">,</span><span class="token string">"456@qq.com"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要手动提交</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭sqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="MyBatis对象分析"><a href="#MyBatis对象分析" class="headerlink" title="MyBatis对象分析"></a>MyBatis对象分析</h2><ol><li><p>Resources类</p><p>用来解析SqlMapConfig.xml文件, 创建出相应的对象</p></li><li><p>SqlSessionFactory接口</p></li><li><p>SqlSession接口</p></li></ol><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><h3 id="实体类别名注册"><a href="#实体类别名注册" class="headerlink" title="实体类别名注册"></a>实体类别名注册</h3><p>在写sql语句时, 有返回值类型需要重复写, 我们这里可以给它在SqlMapConfig.xml文件中起别名, 注意使用标签的顺序.</p><blockquote><p>在<a href="http://mybatis.org/dtd/mybatis-3-config.dtd%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%A0%87%E7%AD%BE%E9%A1%BA%E5%BA%8F%E6%98%AF">http://mybatis.org/dtd/mybatis-3-config.dtd我们可以看到标签顺序是</a> : <!--ELEMENT configuration (properties?, settings?, typeAliases?, typeHandlers?, objectFactory?, objectWrapperFactory?, reflectorFactory?, plugins?, environments?, databaseIdProvider?, mappers?)--></p></blockquote><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--注册实体类别名,用于重复使用--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--单个实体类别名注册--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans.Student<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAlias</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--批量注册别名            别名是类名的驼峰命名法  Student => student      StudentOne  =>  studentOne        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><h3 id="测试类的优化"><a href="#测试类的优化" class="headerlink" title="测试类的优化"></a>测试类的优化</h3><p>在写测试类中, 我们发现有重复代码需要不断的实现. 那么我们可以使用@Before与@After注解</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> SqlSession sqlSession<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>   <span class="token comment" spellcheck="true">//在所有的Test方法前先执行以下代码</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用文件流读取核心配置文件SqlMapConfig.xml</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SqlSessionFactory工厂</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出sqlSession对象</span>        sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>  <span class="token comment" spellcheck="true">//在所有Test方法后执行以下代码</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">closeSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//关闭sqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="设置日志输出"><a href="#设置日志输出" class="headerlink" title="设置日志输出"></a>设置日志输出</h3><p>在SqlMapConfig.xml文件设置</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--设置日志输出底层执行的代码--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><h3 id="优化mapper-xml注册"><a href="#优化mapper-xml注册" class="headerlink" title="优化mapper.xml注册"></a>优化mapper.xml注册</h3><p>在SqlMapConfig.xml文件设置</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--注册mapper.xml--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;mapper class="com.bjpowernode.mapper.UserMapper">&lt;/mapper>--></span>        <span class="token comment" spellcheck="true">&lt;!--批量注册--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><h2 id="如何访问数据访问层"><a href="#如何访问数据访问层" class="headerlink" title="如何访问数据访问层"></a>如何访问数据访问层</h2><blockquote><p>在三层架构中, 业务逻辑层要通过接口访问数据访问层的功能, 动态代理可以实现</p></blockquote><h3 id="动态代理的实现规范"><a href="#动态代理的实现规范" class="headerlink" title="动态代理的实现规范"></a>动态代理的实现规范</h3><blockquote><p>使用动态代理时, Mapper.xml ( sql语句不能使用select来进行增删改, 必须根据当前sql语句的使用场景使用, 而普通方法可以使用select完成增删改查 )</p></blockquote><ol><li> UsersMapper.xml文件与UsersMapper.java的接口必须同一个目录下.</li><li> UsersMapper.xml文件与UsersMapper.java的接口的文件名必须一致,后缀不管.</li><li> UserMapper.xml文件中标签的id值与与UserMapper.java的接口中方法的名称完全一致.</li><li> UserMapper.xml文件中标签的parameterType属性值与与UserMapper.java的接口中方法的参数类型完全一致.</li><li> UserMapper.xml文件中标签的resultType值与与UserMapper.java的接口中方法的返回值类型完全一致.</li><li> UserMapper.xml文件中namespace属性必须是接口的完全限定名称com.bjpowernode.mapper.UsersMapper</li><li>在SqlMapConfig.xml文件中注册mapper文件时,使用class=接口的完全限定名称com.bjpowernode.mapper.UsersMapper.</li></ol><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>建表Users</p></li><li><p>新建maven工程</p></li><li><p>修改目录</p></li><li><p>修改pom.xml文件, 添加依赖</p></li><li><p>添加jdbc.properties文件到resources目录下</p></li><li><p>添加SqlMapConfig.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--读取jdbc属性文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--设置日志输出--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册实体类别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.pojo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置环境变量--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册mapper.xml--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Users</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Users{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", userName='"</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", birthday="</span> <span class="token operator">+</span> birthday <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserName</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Date <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>Date birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Users</span><span class="token punctuation">(</span>String userName<span class="token punctuation">,</span> Date birthday<span class="token punctuation">,</span> String sex<span class="token punctuation">,</span> String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Users</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String userName<span class="token punctuation">,</span> Date birthday<span class="token punctuation">,</span> String sex<span class="token punctuation">,</span> String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>添加mapper文件夹, 新建UsersMapper接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Users<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据访问层的接口,规定的数据库中可以进行的各种操作 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询所有用户</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>在mapper文件夹下, 新建UsersMapper.xml文件, 完成增删改查功能</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        //查询所有用户        List&lt;Users> getAll();    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,username,birthday,sex,address from users;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetAll01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取出动态代理的对象,完成接口中方法的调用,实则是调用xml文件中标签的功能</span>        UserMapper userMapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//xml相当于接口的实现类,getAll被动态代理出来</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users1 <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在@Test前面添加注解@Before和@After</span></code></pre></li></ol><h4 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h4><blockquote><p>使用接口类, 让xml实现接口, 从而达到动态代理来访问数据访问层</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Users<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据访问层的接口,规定的数据库中可以进行的各种操作 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询所有用户</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据用户主键查用户</span>    Users <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据用户名模糊查询</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用户的更新</span>    <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>Users users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//增加用户</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Users users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据主键删除用户</span>    <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--根据主键查找用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,username,birthday,sex,address from users where id = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--根据用户名模糊查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,username,birthday,sex,address from users where username like '%${username}%';    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetById01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Users users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users1 <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//注意使用注解进行重复代码封装</span></code></pre><h4 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h4><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--增加用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into users(username, birthday, sex, address) values (#{userName},#{birthday},#{sex},#{address});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//时间刷子</span>    SimpleDateFormat simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用来完成生日的格式转换</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token string">"牛奶"</span><span class="token punctuation">,</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-1-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--删除用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from users where id=#{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="更新-1"><a href="#更新-1" class="headerlink" title="更新"></a>更新</h4><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--用户的更新--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update users set username=#{userName},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        Users u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"豆奶"</span><span class="token punctuation">,</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2000-3-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"北京"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="与"><a href="#与" class="headerlink" title="#{} 与 ${}"></a>#{} 与 ${}</h3><h4 id="占位符"><a href="#占位符" class="headerlink" title="#{} 占位符"></a>#{} 占位符</h4><p>传参大部分使用#{}传参,它的底层使用的是PreparedStatement对象,是安全的数据库访问 ,防止sql注入.</p><p>#{ } 里面如何写? 看paramenterType参数的类型</p><ol><li><p>如果parameterType的类型是简单类型(8种基本(封装)+String),则#{}里随便写.</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  ===>入参类型是简单类型        select id,username,birthday,sex,address        from users        where id=#{zar}  ===>随便写 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  </code></pre></li><li><p>parameterType的类型是实体类的类型,则#{}里只能是类中成员变量的名称,而且区分大小写. </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  ===>入参是实体类        insert into users (username, birthday, sex, address) values(#{userName},#{birthday},#{sex},#{address})  ==>成员变量名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="字符串拼接或字符串替换"><a href="#字符串拼接或字符串替换" class="headerlink" title="${} 字符串拼接或字符串替换"></a>${} 字符串拼接或字符串替换</h4><ol><li><p>字符串拼接,一般用于模糊查询中.建议少用,因为有sql注入的风险. </p><p>也分两种情况, 同样看parameterType的类型</p></li><li><p>字符串替换</p><p>需求 : 模糊地址和用户查询</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> username <span class="token operator">like</span> <span class="token string">'%小%'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> address <span class="token operator">like</span> <span class="token string">'%市%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 两个查询语句只有两处不同,可以优化</span></code></pre></li></ol><h4 id="优化模糊查询"><a href="#优化模糊查询" class="headerlink" title="优化模糊查询"></a>优化模糊查询</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    //优化后的模糊查询    List&lt;Users> getByNameGood(String name);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByNameGood<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,username,birthday,sex,address        from users        where username like concat('%',#{name},'%')//把${}换成#{}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="优化多个参数的模糊查询"><a href="#优化多个参数的模糊查询" class="headerlink" title="优化多个参数的模糊查询"></a>优化多个参数的模糊查询</h4><p>接口类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//模糊地址和用户查询的方法</span>List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getByNameOrAddress</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"columnName"</span><span class="token punctuation">)</span>  <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>为了在sql语句中使用的名称            String columnName<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"columnValue"</span><span class="token punctuation">)</span>   <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>为了在sql语句中使用的名称            String columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>UsersMapper.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    //模糊地址和用户查询    //如果参数超过一个,则parameterType不写    List&lt;Users> getByNameOrAddress(    @Param("columnName")    ===>为了在sql语句中使用的名称    String columnName,    @Param("columnValue")   ===>为了在sql语句中使用的名称    String columnValue);                                        //columnName列名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByNameOrAddress<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,username,birthday,sex,address        from users        where ${columnName} like concat('%',#{columnValue},'%')  ==>  使用${}来替换列名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> ==> 使用的是@Param注解里的名称</code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByNameOrAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> list <span class="token operator">=</span> uMapper<span class="token punctuation">.</span><span class="token function">getByNameOrAddress</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"小"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按用户名(列名)来模糊查询</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="parameterType总结"><a href="#parameterType总结" class="headerlink" title="parameterType总结 :"></a>parameterType总结 :</h5><ul><li>如果参数超过一个,则parameterType不写</li><li>如果不是实体类和简单类型, 则parameterType不写</li></ul><h5 id="resultType总结"><a href="#resultType总结" class="headerlink" title="resultType总结 :"></a>resultType总结 :</h5><ol><li>增删改中, mybatis自动返回, 没有resultType</li></ol><h2 id="返回主键标签"><a href="#返回主键标签" class="headerlink" title="返回主键标签"></a>返回主键标签</h2><blockquote><p>在完成插入操作后, 将生成的主键信息通过实体类对象返回, 在进行后续<strong>关联</strong>插入操作时, 不用再次访问数据库</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f349cbb8b7944e6b85911b6c3a4bb7be.png" alt="img"></p><h3 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--增加用户,返回主键--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AFTER<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select last_insert_id();    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span>        insert into users(username, birthday, sex, address) values (#{userName},#{birthday},#{sex},#{address});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    &lt;selectKey>标签的参数详解:    keyProperty: users对象的哪个属性来接返回的主键值(id)    resultType:返回的主键的类型    order:在插入语句执行前,还是执行后返回主键的值--></span></code></pre><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><blockquote><p>这是一个全球唯一随机字符串,由36个字母数字中划线组.</p></blockquote><p>java中</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UUID uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>MySQL中</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><blockquote><p>可以定义代码片段,可以进行逻辑判断,可以进行循环处理(批量处理),使条件判断更为简单.</p></blockquote><h3 id="标签sql与include"><a href="#标签sql与include" class="headerlink" title="标签sql与include"></a>标签sql与include</h3><ol><li><sql> : 用来定义代码片段,可以将所有的列名,或复杂的条件定义为代码片段,供使用时调用.</sql></li><li><include> : 用来引用<sql>定义的代码片段.</sql></include></li></ol><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--定义代码片段--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id,username,birthday,sex,address    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        //查询所有用户        List&lt;Users> getAll();    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from users;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="标签if与where"><a href="#标签if与where" class="headerlink" title="标签if与where"></a>标签if与where</h3><ol><li><if> : 进行条件判断</if></li><li><where> : 进行多条件判断, 在查询, 删除, 更新时使用</where></li></ol><h4 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//按指定的条件进行多条件查询</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getByCondition</span><span class="token punctuation">(</span>Users users<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //按指定的条件进行多条件查询    List&lt;Users> getByCondition(Users users);    根据实体类中的成员变量是否有值来决定是否添加条件    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from users        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName !<span class="token punctuation">=</span> null and userName !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and username like concat('%',#{userName},'%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and birthday = #{birthday}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null and sex !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and sex = #{sex}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null and address !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and address like concat('%',#{address},'%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getByCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        Users users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给什么赋值就是查什么</span>        users<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getByCondition</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users1 <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="标签set"><a href="#标签set" class="headerlink" title="标签set"></a>标签set</h3><ol><li><set> : 有选择的进行更新处理, 至少更新一列</set></li></ol><blockquote><p>当我们在进行更新操作的时候, 如果按照以前的方法进行更新, 想要只更新一个名字时, 会发现修改了名字后, 其他没有赋值的列也被更新了(为null)</p></blockquote><h4 id="实现步骤-3"><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//有选择性的更新</span>    <span class="token keyword">int</span> <span class="token function">updateBySet</span><span class="token punctuation">(</span>Users users<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //有选择性的更新    int updateBySet(Users users);    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBySet<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update users        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName !<span class="token punctuation">=</span> null and userName !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                username = #{userName},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                birthday = #{birthday},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null and sex !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                sex = #{sex},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null and address !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                address = #{address},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        where id = #{id};  ==>注意不用漏掉    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Users users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"泉州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateBySet</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="标签foreach"><a href="#标签foreach" class="headerlink" title="标签foreach"></a>标签foreach</h3><ol><li><foreach> : 用来进行循环遍历,完成循环条件查询,批量删除(经常用),批量增加(偶尔用),批量更新(很少用).</foreach></li></ol><h4 id="实现步骤-4"><a href="#实现步骤-4" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//查询多个指定id用户的信息</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getByIds</span><span class="token punctuation">(</span>Integer arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //查询多个指定id用户的信息    List&lt;Users> getByIds(Integer arr[]);    当前使用的参数是数组, 所以foreach当中的collecting是arrays    如果是list集合就是list    是map集合就是map    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByIds<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from users        where id in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getByIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getByIds</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="foreach标签参数详解"><a href="#foreach标签参数详解" class="headerlink" title="foreach标签参数详解"></a>foreach标签参数详解</h4><ul><li>collection:用来指定入参的类型,如果是List集合,则为list,如果是Map集合,则为map,如果是数组,则为array.</li><li>item:每次循环遍历出来的值或对象</li><li>separator:多个值或对象或语句之间的分隔符</li><li>open:整个循环外面的前括号 </li><li>close:整个循环外面的后括号</li></ul><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><h4 id="实现步骤-5"><a href="#实现步骤-5" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//批量删除</span>    <span class="token keyword">int</span> <span class="token function">deleteAll</span><span class="token punctuation">(</span>Integer arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //批量删除    int deleteAll(Integer arr[]);    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteAll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from users where id in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="批量增加"><a href="#批量增加" class="headerlink" title="批量增加"></a>批量增加</h3><h4 id="实现步骤-6"><a href="#实现步骤-6" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//批量增加</span>    <span class="token keyword">int</span> <span class="token function">insertAll</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //批量增加    int insertAll(List list);    注意要使用u.userName....    因为是封装到对象u中去    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertAll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into users(username, birthday, sex, address) values        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            (#{u.userName},#{u.birthday},#{u.sex},#{u.address})        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        Users users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"广东"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Users users1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"广东1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Users users2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"广东2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Users users3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"广东3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users1<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users2<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insertAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="指定参数位置-使用下标"><a href="#指定参数位置-使用下标" class="headerlink" title="指定参数位置(使用下标)"></a>指定参数位置(使用下标)</h3><blockquote><p>如果入参是多个,可以通过指定参数位置进行传参. 是实体包含不住的条件.实体类只能封装住成员变量的条件.如果某个成员变量要有区间范围内的判断,或者有两个值进行处理,则实体类包不住.</p><p>例如:查询指定日期范围内的用户信息.</p></blockquote><h4 id="如何指定"><a href="#如何指定" class="headerlink" title="如何指定"></a>如何指定</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//查询指定日期范围内的用户信息</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getByDate</span><span class="token punctuation">(</span>Date begin<span class="token punctuation">,</span> Date end<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //查询指定日期范围内的用户信息    List&lt;Users> getByDate(Date begin, Date end);    有默认的下标, 从0开始, 也就是从arg0开始    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByDate<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from users        where birthday between #{arg0} and #{arg1};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        Date begin <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date end <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-12-31"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getByDate</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="指定参数位置-Param指定参数位置"><a href="#指定参数位置-Param指定参数位置" class="headerlink" title="指定参数位置(@Param指定参数位置)"></a>指定参数位置(@Param指定参数位置)</h3><ul><li><strong>详见 : 优化多个参数的模糊查询示例</strong></li></ul><h3 id="指定参数位置-入参是map"><a href="#指定参数位置-入参是map" class="headerlink" title="指定参数位置(入参是map)"></a>指定参数位置(入参是map)</h3><blockquote><p>如果入参超过一个以上, 使用map封装查询条件, 更有语义, 查询条件更明确.</p></blockquote><h4 id="实现步骤-7"><a href="#实现步骤-7" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//入参是map, 查询指定日期范围内的用户信息</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getByMap</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //入参是map, 查询指定日期范围内的用户信息    List&lt;Users> getByMap(Map map);    Map里面的成员变量是啥    #{birthdaybegin} 与 #{birthdayend} : 就是map中的key    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from users        where birthday between #{birthdaybegin} and #{birthdayend};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        Date begin <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date end <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-12-31"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"birthdaybegin"</span><span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"birthdayend"</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="返回一行Map"><a href="#返回一行Map" class="headerlink" title="返回一行Map"></a>返回一行Map</h4><blockquote><p>如果返回的数据实体类无法包含, 可以使用map返回多张表中的若干数据. 返回后这些数据之间没有任何关系. 就是Object类型. <strong>返回的map的key就是列名或别名.</strong></p></blockquote><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//返回一行map   返回姓名和地址封装到map中</span>    Map <span class="token function">getReturnMapOne</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //返回一行map    Map getReturnMapOne(Integer id);    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getReturnMapOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select username,address from users        where id = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReturnMapOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Map map <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getReturnMapOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="返回多行Map"><a href="#返回多行Map" class="headerlink" title="返回多行Map"></a>返回多行Map</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//返回多行map</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">></span> <span class="token function">getMulMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //返回多行map    List&lt;Map> getMulMap();    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getMulMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select username,address from users    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetMulMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getMulMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>map <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="resultMap的简单用法"><a href="#resultMap的简单用法" class="headerlink" title="resultMap的简单用法"></a>resultMap的简单用法</h3><blockquote><p>在之前我们提到实体类中的成员变量需要和数据库中的列名相同, 以此来完成映射</p></blockquote><p>在这里我们要介绍的是还有两种方法可以完成映射</p><ol><li><p>使用别名进行成员变量和数据库列名的映射</p><ul><li><p>我们可以在写sql语句时, 使用别名(给数据库中的列名起别名)来完成数据库列名与实体类成员变量的名称一致</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookmap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select bookid id,bookname name from book;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>使用resultMap</p><ul><li><p>在之前我们的返回类型都是使用<code>resultType</code> , 但是当出现实体类成员变量与数据库列名不一致时, 我们就不能单纯的使用它了, 需要在sql语句起别名, 那么有没有其他的方法呢 ? </p></li><li><p>我们可以使用<code>resultMap</code> 来自定义</p></li><li><p>举例 : 查询所有图书, 图书的实体类与数据库列名不同</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实体类</span><span class="token keyword">private</span> Integer id<span class="token punctuation">;</span> <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库列名</span><span class="token comment" spellcheck="true">//  bookid 与 bookname</span></code></pre></li><li><p>实现步骤</p><p>在UsersMapper.xml文件中</p><ul><li><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--使用resultMap完成手工映射--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookmap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--主键绑定 property指的是实体类的成员变量, column指的是数据库中的列名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--非主键绑定--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookmap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select bookid,bookname from book;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul></li></ol><h2 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h2><h3 id="一对多关联关系"><a href="#一对多关联关系" class="headerlink" title="一对多关联关系"></a>一对多关联关系</h3><p>  客户和订单就是典型的一对多关联关系.<br>  一个客户名下可以有多个订单.<br>  客户表是一方,订单表是多方.客户一中持有订单的集合.<br>  使用一对多的关联关系,可以满足查询客户的同时查询该客户名下的所有订单.</p><h4 id="实现步骤-8"><a href="#实现步骤-8" class="headerlink" title="实现步骤"></a>实现步骤</h4><h5 id="1-创建实体类"><a href="#1-创建实体类" class="headerlink" title="1.创建实体类"></a>1.<strong>创建实体类</strong></h5><p>客户实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//客户名下的所有订单信息</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Customer{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", ordersList="</span> <span class="token operator">+</span> ordersList <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> <span class="token function">getOrdersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ordersList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrdersList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ordersList <span class="token operator">=</span> ordersList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Customer</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ordersList <span class="token operator">=</span> ordersList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>订单实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String orderNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double orderPrice<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Orders{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", orderNumber='"</span> <span class="token operator">+</span> orderNumber <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", orderPrice="</span> <span class="token operator">+</span> orderPrice <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOrderNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderNumber</span><span class="token punctuation">(</span>String orderNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Double <span class="token function">getOrderPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderPrice</span><span class="token punctuation">(</span>Double orderPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderPrice <span class="token operator">=</span> orderPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String orderNumber<span class="token punctuation">,</span> Double orderPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderPrice <span class="token operator">=</span> orderPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-创建Mapper文件"><a href="#2-创建Mapper文件" class="headerlink" title="2.创建Mapper文件"></a>2.<strong>创建Mapper文件</strong></h5><blockquote><p>我们现在需要由客户来查信息, 所以创建的是CustomerMapper</p></blockquote><p>CustomerMapper接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数据访问层的接口,规定的数据库中可以进行的各种操作 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据客户ID查询客户所有信息,并且返回客户的所有订单信息</span>    Customer <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>CustomerMapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper.CustomerMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    //根据客户ID查询客户所有信息,并且返回客户的所有订单信息    Customer getById(Integer id);    select 字段列表 from 表1 left [outer] join 表2 on 条件...;    ofType指泛型的类型 ==> //客户名下的所有订单信息,一方持有多方的集合                          private List&lt;Orders> ordersList;    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customermap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--主键绑定,注意数据库中id已经起了别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--非主键绑定--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--ordersList绑定, 返回的订单信息是集合--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ordersList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--主键绑定,注意数据库中id已经起了别名--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--非主键绑定--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderNumber<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderNumber<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderPrice<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderPrice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customermap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select c.id cid,c.name,c.age,o.id oid,o.orderNumber,o.orderPrice,o.customer_id        from customer c left outer join orders o on c.id = o.customer_id        where c.id = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h5 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.<strong>测试</strong></h5><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByIdCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Customer customer <span class="token operator">=</span> customerMapper<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="多对一关联关系"><a href="#多对一关联关系" class="headerlink" title="多对一关联关系"></a>多对一关联关系</h3><p>  订单和客户就是多对一关联.<br>  站在订单的方向查询订单的同时将客户信息查出.<br>  订单是多方,会持有一方的对象.客户是一方.</p><h4 id="实现步骤-9"><a href="#实现步骤-9" class="headerlink" title="实现步骤"></a>实现步骤</h4><h5 id="1-创建实体类-1"><a href="#1-创建实体类-1" class="headerlink" title="1.创建实体类"></a>1.<strong>创建实体类</strong></h5><p>客户实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//客户名下的所有订单信息,一方持有多方的集合</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Customer{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", ordersList="</span> <span class="token operator">+</span> ordersList <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> <span class="token function">getOrdersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ordersList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrdersList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ordersList <span class="token operator">=</span> ordersList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Customer</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ordersList <span class="token operator">=</span> ordersList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>订单实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String orderNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double orderPrice<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//关联下此订单的客户信息, 多方持有一方的对象</span>    <span class="token keyword">private</span> Customer customer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Orders{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", orderNumber='"</span> <span class="token operator">+</span> orderNumber <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", orderPrice="</span> <span class="token operator">+</span> orderPrice <span class="token operator">+</span>                <span class="token string">", customer="</span> <span class="token operator">+</span> customer <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOrderNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderNumber</span><span class="token punctuation">(</span>String orderNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Double <span class="token function">getOrderPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderPrice</span><span class="token punctuation">(</span>Double orderPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderPrice <span class="token operator">=</span> orderPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Customer <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> customer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustomer</span><span class="token punctuation">(</span>Customer customer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customer <span class="token operator">=</span> customer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String orderNumber<span class="token punctuation">,</span> Double orderPrice<span class="token punctuation">,</span> Customer customer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderPrice <span class="token operator">=</span> orderPrice<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customer <span class="token operator">=</span> customer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-创建Mapper文件-1"><a href="#2-创建Mapper文件-1" class="headerlink" title="2.创建Mapper文件"></a>2.<strong>创建Mapper文件</strong></h5><blockquote><p>我们现在需要由订单来查信息, 所以创建的是OredrsMapper</p></blockquote><p>OredrsMapper接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数据访问层的接口,规定的数据库中可以进行的各种操作 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrdersMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据订单ID查询订单所以信息, 并返回该订单所属客户的信息</span>    Orders <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>OredrsMapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper.OrdersMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    //根据订单ID查询订单所以信息, 并返回该订单所属客户的信息    Orders getById(Integer id);    javaType指的是类型 ==> //关联下此订单的客户信息, 多方持有一方的对象                          private Customer customer;    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ordersmap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--主键绑定,注意数据库中id已经起了别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--非主键绑定--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderNumber<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderNumber<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderPrice<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderPrice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--customer绑定,返回的是客户对象--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--主键绑定,注意数据库中id已经起了别名--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--非主键绑定--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ordersmap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select o.id oid,o.orderNumber,o.orderPrice,o.customer_id,c.id cid,c.name,c.age        from orders o join customer c on c.id = o.customer_id        where o.id = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h5 id="3-测试-1"><a href="#3-测试-1" class="headerlink" title="3.测试"></a>3.测试</h5><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByIdOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Orders orders <span class="token operator">=</span> ordersMapper<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="一对一与多对多关联关系"><a href="#一对一与多对多关联关系" class="headerlink" title="一对一与多对多关联关系"></a>一对一与多对多关联关系</h3><blockquote><p>无论是什么关联关系，如果某方持有另一方的集合，则使用<collection>标签完成映射，如果某方持有另一方的对象，则使用<association>标签完成映射。</association></collection></p></blockquote><h4 id="多对多关联"><a href="#多对多关联" class="headerlink" title="多对多关联"></a>多对多关联</h4><p>需要使用中间表来进行过渡</p><blockquote><p>多对多关联中，需要通过中间表化解关联关系。中间表描述两张主键表的关联。中间表没有对应的实体类。Mapper.xml文件中也没有中间表的对应标签描述，只是在查询语句中使用中间表来进行关联。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/8b14674e7b0342bbaf2ca4b0013f1a46.png" alt="img"></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>多个操作同时完成,或同时失败称为事务处理.<br> 事务有四个特性:一致性,持久性,原子性,隔离性.</p></blockquote><p>在MyBatis框架中设置事务 : mybatis核心配置文件中</p><p><transactionmanager type="JDBC"></transactionmanager>  ===&gt;程序员自己控制处理的提交和回滚</p><p>在测试类中, 取出对象的时候, 可以设置成自动提交</p><ul><li><code>sqlSession = factory.openSession(); </code> ===&gt;默认是手工提交事务,设置为false也是手工提交事务,如果设置为true,则为自动提交.</li><li><code>sqlSession = factory.openSession(true); </code> ===&gt;设置为自动提交,在增删改后不需要<code>commit();</code></li></ul><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><blockquote><p>MyBatis框架提供两级缓存,一级缓存和二级缓存.默认开启一级缓存.</p><p>我们有专门的缓存框架redis</p><p>缓存就是为了提高查询效率</p></blockquote><p>使用缓存后, 查询的流程 : </p><p>查询时先到缓存里查,如果没有则查询数据库,放缓存一份,再返回客户端.下次再查询的时候直接从缓存返回,不再访问数据库.如果数据库中发生commit()操作,则清空缓存.</p><p>一级缓存使用的是SqlSession的作用域,同一个sqlSession共享一级缓存的数据.<br>二级缓存使用的是mapper的作用域,不同的sqlSession只要访问的同一个mapper.xml文件,则共享二级缓存作用域.</p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><blockquote><p>ORM(Object Relational Mapping):对象关系映射</p></blockquote><p>java语言中以对象的方式操作数据,存到数据库中是以表的方式进行存储,对象中的成员变量与表中的列之间的数据互换称为映射.整个这套操作就是ORM.</p><p>持久化的操作：将对象保存到关系型数据库中 ,将关系型数据库中的数据读取出来以对象的形式封装</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring入门</title>
      <link href="/2021/07/15/spring/"/>
      <url>/2021/07/15/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><ul><li>Spring 的核心是控制反转(IOC) 和面向切面编程(AOP).</li><li>Spring 的主要作用就是为代码“解耦”，降低代码间的耦合度。好比连衣裙和普通衣服, 连衣裙如果破了要整件脱下来修补, 而普通衣服则是裤子破了, 脱裤子, 上衣破了, 脱上衣.</li></ul><h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC - 控制反转"></a>IOC - 控制反转</h2><p>由Spring容器进行对象的创建和依赖注入. 程序员在使用时直接取出使用.</p><ul><li><p>正转 : 由程序员进行对象的创建和依赖注入称为正转. 程序员说了算</p><pre class=" language-java"><code class="language-java">Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//程序员创建对象</span>stu<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//程序员进行赋值</span>stu<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>反转 : 由Spring容器创建对象和依赖注入称为反转, 将控制权从程序员手中夺走, 给Spring容器, 称为反转. 容器说了算</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id <span class="token operator">=</span> <span class="token string">"stu"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.csd.Student"</span><span class="token operator">></span>   <span class="token comment" spellcheck="true">//Spring容器负责对象的创建</span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"张三"</span><span class="token operator">></span>     <span class="token comment" spellcheck="true">//Spring容器依赖注入值</span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre></li></ul><h2 id="编写一个spring"><a href="#编写一个spring" class="headerlink" title="编写一个spring"></a>编写一个spring</h2><blockquote><p>基于xml的IOC</p></blockquote><h3 id="需要配置依赖"><a href="#需要配置依赖" class="headerlink" title="需要配置依赖"></a>需要配置依赖</h3><p>pom.xml中 : </p><p>引入一个坐标, 会自动引入该项目的其他子项目</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--spring的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><ul><li><p>在pom.xml中的插件build中添加 (防止资源出错)</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="将写好的的类注册到Bean中"><a href="#将写好的的类注册到Bean中" class="headerlink" title="将写好的的类注册到Bean中"></a>将写好的的类注册到Bean中</h3><p>编写完基本信息后到main下的resource下创建一个spring config(applicationContext.xml)</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li><p>创建一个学生类, 注意Spring无法自己创建类型.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用类型的成员变量,学生所在的学校</span>        <span class="token comment" spellcheck="true">//要有无参构造器,spring才能启动</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生的无参构造器被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>在applicationContext.xml配置中添加bean标签</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--创建学生对象    等同于 Student stu = new Student();    id: 就是创建对象的名称    class: 就是创建对象的类型,底层通过反射构建对象    启动容器的同时,创建对象    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.csdexample.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>在测试类中测试spring创建的学生类对象</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SrudentSpring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//spring创建对象</span>        <span class="token comment" spellcheck="true">//如果想要从spring容器中取出对象,则要先创建容器,并启动</span>        <span class="token comment" spellcheck="true">//创建容器对象</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出学生对象</span>        Student stu <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="如何赋值"><a href="#如何赋值" class="headerlink" title="如何赋值"></a>如何赋值</h3><p>前面我们已经创建好对象了, 但是我们发现要对它进行赋值时, 单纯的使用<code>property</code>, 会出现报错. 下面我们谈谈基于xml的IOC如何给创建的对象赋值</p><ul><li><p>使用setter注入</p><blockquote><p>注入分为简单类型注入和引用类型注入</p><p>简单类型注入值使用value属性</p><p>引用类型注入值使用ref属性</p><p>必须要注意:使用setter注入必须提供无参的构造方法,必须提供setXXX()方法.</p></blockquote><pre class=" language-xml"><code class="language-xml">   <span class="token comment" spellcheck="true">&lt;!--创建学校对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.csdexample.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>清华大学<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>海淀区<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--创建学生对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.csdexample.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    ===>简单类型注入        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  ===>引用类型注入 在前面创建过的对象,都可以注入    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用构造方法注入</p><ol><li><p>使用构造方法的参数名称进行注入值</p><p>​    创建一个学校类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">School</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"School{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    在spring核心配置文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--创建学校对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.pojo.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>北京大学<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>海定区<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用构造方法参数的下标注入值</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--创建学生对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.pojo3.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>钱七<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>  ==>引用类型注入    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用默认的构造方法的参数的顺序注入值</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--创建学生对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stuSequence<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.pojo3.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>陈十<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    ==>引用类型注入    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><h2 id="spring接管三层架构"><a href="#spring接管三层架构" class="headerlink" title="spring接管三层架构"></a>spring接管三层架构</h2><blockquote><p>界面层,业务逻辑层,数据访问层(模拟, 没有使用到myBatis)</p><p>基于注解的IOC</p></blockquote><p><strong>spring不能创建接口的对象, 只能创建实现类的对象</strong></p><h3 id="什么是基于注解的IOC"><a href="#什么是基于注解的IOC" class="headerlink" title="什么是基于注解的IOC"></a>什么是基于注解的IOC</h3><ul><li><p>基于注解的IOC,必须要在Spring的核心配置文件中添加包扫描.</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--创建包扫描,只需要写到包就行了,不用写到具体的类--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre></li></ul><p>与基于xml相比, 只是换汤不换药.</p><p>药 : 创建对象并依赖注入</p><p>汤 : xml 与 注解annotation</p><ol><li><p>创建对象的注解</p><ul><li>@Component : 可以创建任意对象.创建的对象的默认名称是类名的驼峰命名法.也可以指定对象的名称 <code>@Component("指定名称")</code></li><li>@Controller : 专门用来创建控制器的对象,这种对象可以接收用户的请求,可以返回处理结果给客户端.</li><li>@Service : 专门用来创建业务逻辑层的对象,负责向下访问数据访问层,处理完毕后的结果返回给界面层.</li><li>@Repository : 专门用来创建数据访问层的对象,负责数据库中的增删改查所有操作.</li><li>注意如果在数据访问层使用@Mapper, 那么注入对象需要使用@Resource注解.</li></ul></li><li><p>依赖注入的注解</p><ul><li><p>值类型的注入   (8种基本类型+String)</p><p>@Value : 用来给简单类型注入值</p></li><li><p>引用类型的注入</p><ul><li><p>@Autowired : 使用类型注入值,从整个Bean工厂中搜索同源类型的对象进行注入.</p></li><li><p>@Autowired </p><p>@Qualifier : 使用名称注入值,从整个Bean工厂中搜索相同名称的对象进行注入.</p></li></ul></li></ul></li></ol><h3 id="编写一个基于注解的Spring"><a href="#编写一个基于注解的Spring" class="headerlink" title="编写一个基于注解的Spring"></a>编写一个基于注解的Spring</h3><blockquote><p>使用@Component</p></blockquote><h4 id="1-配置依赖与准备工作"><a href="#1-配置依赖与准备工作" class="headerlink" title="1.配置依赖与准备工作"></a>1.配置依赖与准备工作</h4><p>与基于xml的IOC相同</p><h4 id="2-创建学生类"><a href="#2-创建学生类" class="headerlink" title="2.创建学生类"></a>2.创建学生类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>s01<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span>   <span class="token comment" spellcheck="true">//需要添加包扫描来识别该注解    交给spring去创建对象,就是在容器启动时创建</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生类的无参构造器被调用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-在applicationContext-xml中添加包扫描"><a href="#3-在applicationContext-xml中添加包扫描" class="headerlink" title="3.在applicationContext.xml中添加包扫描"></a>3.在applicationContext.xml中添加包扫描</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建容器</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"s01/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出对象</span>        Student stu <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="5-如何赋值"><a href="#5-如何赋值" class="headerlink" title="5.如何赋值"></a>5.如何赋值</h4><ul><li><h6 id="不管是基于xml的IOC还是基于注解的IOC-在引用类型注入时-如果使用按类型注入值的方法-都要知道只有是同源类型才可以注入"><a href="#不管是基于xml的IOC还是基于注解的IOC-在引用类型注入时-如果使用按类型注入值的方法-都要知道只有是同源类型才可以注入" class="headerlink" title="不管是基于xml的IOC还是基于注解的IOC, 在引用类型注入时, 如果使用按类型注入值的方法, 都要知道只有是同源类型才可以注入"></a>不管是基于xml的IOC还是基于注解的IOC, 在引用类型注入时, 如果使用按类型注入值的方法, 都要知道只有是同源类型才可以注入</h6><ul><li>被注入的类型与注入的类型(子)是父子类</li><li>被注入的类型与注入的类型(实现类)是接口和实现类</li><li>被注入的类型与注入的类型是完全相同的类型</li></ul></li></ul><h6 id="按类型注入"><a href="#按类型注入" class="headerlink" title="按类型注入"></a>按类型注入</h6><ol><li><p>创建学校类和学生类   直接使用Value赋值(入门)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//学校类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"北京大学"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//注意双引号不能少</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"海定区"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">School</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学校类的无参构造器被调用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"School{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//学生类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用 引用类型按类型注入 方法</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", school="</span> <span class="token operator">+</span> school <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在applicationContext.xml中添加包扫描</p></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest02</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAnnotation01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建容器</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"s02/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出对象</span>        Student stu <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h6 id="按名称注入"><a href="#按名称注入" class="headerlink" title="按名称注入"></a>按名称注入</h6><ol><li><p>创建学校类和学生类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//学校类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//此时School的名称就是school</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"北京大学"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//注意双引号不能少</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"海定区"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">School</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学校类的无参构造器被调用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//学生类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用 引用类型按名称注入 方法</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"school"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>在applicationContext.xml中添加包扫描</p></li></ol><h6 id="有父子类的情况下按类型与按名称注入"><a href="#有父子类的情况下按类型与按名称注入" class="headerlink" title="有父子类的情况下按类型与按名称注入"></a>有父子类的情况下按类型与按名称注入</h6><ol><li><p>创建学校的子类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在有父子类的情况下,使用按类型注入,就意味着有多个可注入的对象.此时按照名称进行二次筛选,选中与被注入对象相同名称的对象进行注入.</span><span class="token comment" spellcheck="true">//如果有父子类的情况下,使用名称注入值, 直接按名称进行注入值</span><span class="token comment" spellcheck="true">//学校的子类, 用于测试有父子类的情况下注入值</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SonSchool</span> <span class="token keyword">extends</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"清华附中小学"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"海定区"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SonSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学校的子类的无参构造器被调用...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"SonSchool{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在applicationContext.xml中添加包扫描</p></li></ol><h3 id="基于注解的三层架构"><a href="#基于注解的三层架构" class="headerlink" title="基于注解的三层架构"></a>基于注解的三层架构</h3><blockquote><p>@Controller:专门用来创建控制器的对象(Servlet),这种对象可以接收用户的请求,可以返回处理结果给客户端.</p><p>@Service:专门用来创建业务逻辑层的对象,负责向下访问数据访问层,处理完毕后的结果返回给界面层.</p><p>@Repository:专门用来创建数据访问层的对象,负责数据库中的增删改查所有操作.</p></blockquote><h3 id="添加包扫描的方式"><a href="#添加包扫描的方式" class="headerlink" title="添加包扫描的方式"></a>添加包扫描的方式</h3><ol><li><p>单个包扫描(推荐使用)</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.service.impl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre></li><li><p>多个包扫描, 多个包之间以逗号或空格或分号分隔</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller com.bjpowernode.service ,com.bjpowernode.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre></li><li><p>扫描根包(不推荐)</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><p>会降低容器启动的速度, 导致多做无用功</p></li></ol><h2 id="Spring配置文件的拆分"><a href="#Spring配置文件的拆分" class="headerlink" title="Spring配置文件的拆分"></a>Spring配置文件的拆分</h2><blockquote><p>当项目越来越大,需要多人合作开发,一个配置就存在很大隐患.</p></blockquote><h5 id="拆分配置文件的策略"><a href="#拆分配置文件的策略" class="headerlink" title="拆分配置文件的策略"></a>拆分配置文件的策略</h5><ul><li><p>按层拆(界面层, 业务层, 数据层)</p><pre class=" language-xml"><code class="language-xml">      applicationContext_controller.xml                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uController<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.UsersController<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bController<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.BookController<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      applicationContext_service.xml                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.UsersService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.BookService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      applicationContext_mapper.xml                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.UsersMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.BookMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>按功能拆</p><pre class=" language-xml"><code class="language-xml">      applicationContext_users.xml                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uController<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.UsersController<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.UsersService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.UsersMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      applicationContext_book.xml              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bController<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.BookController<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.BookService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.BookMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ul><h5 id="配置文件的整合"><a href="#配置文件的整合" class="headerlink" title="配置文件的整合"></a>配置文件的整合</h5><blockquote><p>最后访问的是整合后的配置文件</p></blockquote><ul><li><p>单个文件导入</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicatoinContext_mapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicatoinContext_service.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicatoinContext_controller.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span></code></pre></li><li><p>批量导入</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicatoinContext_*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP - 面向切面编程"></a>AOP - 面向切面编程</h2><blockquote><p>就是将切面提取出来,单独开发,在需要调用的方法中通过动态代理的方式进行织入.</p></blockquote><p>面向切面编程只是面向对象编程的一种补充. 用AOP减少重复代码, 专注业务实现</p><p><img src="https://img-blog.csdnimg.cn/1f3ff7177b2245249364280b9140e13b.png" alt="img"></p><h2 id="手写AOP框架"><a href="#手写AOP框架" class="headerlink" title="手写AOP框架"></a>手写AOP框架</h2><h3 id="版本一-业务和切面紧耦合在一起-没有拆分"><a href="#版本一-业务和切面紧耦合在一起-没有拆分" class="headerlink" title="版本一 : 业务和切面紧耦合在一起, 没有拆分"></a>版本一 : 业务和切面紧耦合在一起, 没有拆分</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 图书购买业务和事务切面耦合在一起 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务开启..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图书购买业务功能实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务提交..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务回滚..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="版本二-使用子类代理的方式拆分业务和切面"><a href="#版本二-使用子类代理的方式拆分业务和切面" class="headerlink" title="版本二 : 使用子类代理的方式拆分业务和切面"></a>版本二 : 使用子类代理的方式拆分业务和切面</h3><p>父类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用子类代理的方式进行图书业务和事务切面的拆分 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//父类专注完成自己的业务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图书购买功能实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>子类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 子类就是代理类,将父类的图书购买功能添加事务切面 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SonBookServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">BookServiceImpl</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//事务切面</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务开启..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//主业务实现, 还是父类自己去实现</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//事务切面</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务提交..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务回滚..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest02</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BookServiceImpl service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SonBookServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="版本三-使用静态代理拆分业务和切面-业务和业务接口已拆分-但是切面紧耦合在业务中"><a href="#版本三-使用静态代理拆分业务和切面-业务和业务接口已拆分-但是切面紧耦合在业务中" class="headerlink" title="版本三 : 使用静态代理拆分业务和切面. 业务和业务接口已拆分.但是切面紧耦合在业务中"></a>版本三 : 使用静态代理拆分业务和切面. 业务和业务接口已拆分.但是切面紧耦合在业务中</h3><ul><li><p>静态代理梳理</p><p><img src="https://img-blog.csdnimg.cn/c43f3a8f67e94ed19aca88b43d7b0ae7.png" alt="img"></p></li></ul><p>业务接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 业务接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Service_</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//规定业务功能</span>    <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>目标对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 目标对象, 实现业务接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Service_</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图书购买业务功能实现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代理类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 代理对象 * 静态代理已经实现了目标对象的灵活切换 * 图书购买业务, 商品购买业务 等等... */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookAgent</span> <span class="token keyword">implements</span> <span class="token class-name">Service_</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设计成员变量的类型为接口, 为灵活切换目标对象</span>    <span class="token keyword">public</span> Service_ target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用构造方法传入目标对象</span>    <span class="token keyword">public</span> <span class="token function">BookAgent</span><span class="token punctuation">(</span>Service_ target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//切面功能</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务开启"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//业务功能</span>            target<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//切面功能</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务回滚..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest03</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Service_ agent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookAgent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BookServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        agent<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="版本四-使用静态代理拆分业务和业务接口-切面和切面接口"><a href="#版本四-使用静态代理拆分业务和业务接口-切面和切面接口" class="headerlink" title="版本四 : 使用静态代理拆分业务和业务接口,切面和切面接口"></a>版本四 : 使用静态代理拆分业务和业务接口,切面和切面接口</h3><ul><li><p>流程分析</p><p><img src="https://img-blog.csdnimg.cn/6ae82a2350004c0f98cc8bb245e7f26e.png" alt="img"></p></li></ul><p>在版本三的基础上, 新增加切面接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 切面的接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Aop_</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用default, 用来允许空实现, 这样可以灵活切换事务和日志等...</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>切面接口的目标对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 事务 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransAop</span> <span class="token keyword">implements</span> <span class="token class-name">Aop_</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务开启...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务提交........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务回滚................"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    或者 <span class="token operator">:</span> <span class="token comment" spellcheck="true">/** * 日志输出 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAop</span> <span class="token keyword">implements</span> <span class="token class-name">Aop_</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置日志输出..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>业务与切面的代理类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>proxy4<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 代理对象 * 静态代理已经实现了目标对象的灵活切换 * 图书购买业务, 商品购买业务 等等... */</span><span class="token comment" spellcheck="true">//这里实现业务接口Service_是因为要实现buy方法, 而切面接口使用到了default, 可以空实现,</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookAgent</span> <span class="token keyword">implements</span> <span class="token class-name">Service_</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设计成员变量的类型为接口, 为灵活切换目标对象</span>    <span class="token comment" spellcheck="true">//传入目标(业务)对象,切面对象</span>    <span class="token keyword">public</span> Service_ target<span class="token punctuation">;</span>    <span class="token keyword">public</span> Aop_ aop<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用构造方法传入目标对象</span>    <span class="token keyword">public</span> <span class="token function">BookAgent</span><span class="token punctuation">(</span>Service_ target<span class="token punctuation">,</span> Aop_ aop<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aop <span class="token operator">=</span> aop<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//切面功能</span>            aop<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在业务功能之前      可以是事务, 日志 等....</span>            <span class="token comment" spellcheck="true">//业务功能</span>            target<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//切面功能</span>            aop<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在业务功能之后</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            aop<span class="token punctuation">.</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在业务有异常时</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest04</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Service_ service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookAgent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BookServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="如何切入多个切面"><a href="#如何切入多个切面" class="headerlink" title="如何切入多个切面"></a>如何切入多个切面</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest04</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Service_ service1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookAgent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BookServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//代理类实现了业务接口</span>        Service_ service2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookAgent</span><span class="token punctuation">(</span>service1<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LogAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代理套代理</span>        service1<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="版本五-使用动态代理完成第四个版本的优化"><a href="#版本五-使用动态代理完成第四个版本的优化" class="headerlink" title="版本五 : 使用动态代理完成第四个版本的优化"></a>版本五 : 使用动态代理完成第四个版本的优化</h3><p>把静态代理类 BookAgent 改成动态代理类 Agent </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>proxy5<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 动态代理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Agent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getAgent</span><span class="token punctuation">(</span>Service_ target<span class="token punctuation">,</span>Aop_ aop<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回生成的动态代理对象</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                <span class="token comment" spellcheck="true">//类加载器</span>                target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//目标对象实现的所有接口</span>                target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//代理功能实现</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>                            <span class="token comment" spellcheck="true">//生成的代理对象</span>                            Object proxy<span class="token punctuation">,</span>                            <span class="token comment" spellcheck="true">//正在被调用的目标方法buy(), show()等等....</span>                            Method method<span class="token punctuation">,</span>                            <span class="token comment" spellcheck="true">//目标方法的参数</span>                            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                        Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//切面</span>                            aop<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//业务</span>                            obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//切面</span>                            aop<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//切面</span>                            aop<span class="token punctuation">.</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest05</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//得到动态代理对象</span>        Service_ agent <span class="token operator">=</span> <span class="token punctuation">(</span>Service_<span class="token punctuation">)</span> Agent<span class="token punctuation">.</span><span class="token function">getAgent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BookServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        agent<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Spring原生AOP的实现"><a href="#Spring原生AOP的实现" class="headerlink" title="Spring原生AOP的实现"></a>Spring原生AOP的实现</h2><blockquote><p>了解, 实际干活使用AspectJ框架</p></blockquote><p>  Spring支持AOP的编程，常用的有以下几种：</p><ol><li>Before通知：在目标方法被调用前调用，涉及接口org.springframework.aop.MethodBeforeAdvice; </li><li>After通知：在目标方法被调用后调用，涉及接口为org.springframework.aop.AfterReturningAdvice; </li><li>Throws通知：目标方法抛出异常时调用，涉及接口org.springframework.aop.ThrowsAdvice; </li><li>Around通知：拦截对目标对象方法调用，涉及接口为org.aopalliance.intercept.MethodInterceptor。</li></ol><p>AOP常用的术语 : </p><ol><li>切面:就是那些重复的,公共的,通用的功能称为切面,例如:日志,事务,权限.</li><li>连接点:就是目标方法.因为在目标方法中要实现目标方法的功能和切面功能.</li><li>切入点(Pointcut):指定切入的位置,多个连接点构成切入点.切入点可以是一个目标方法,可以是一个类中的所有方法,可以是某个包下的所有类中的方法.</li><li>目标对象:操作谁,谁就是目标对象.</li><li>通知(Advice):来指定切入的时机.是在目标方法执行前还是执行后还是出错时,还是环绕目标方法切入切面功能.</li></ol><h2 id="AspectJ框架"><a href="#AspectJ框架" class="headerlink" title="AspectJ框架"></a>AspectJ框架</h2><blockquote><p>AspectJ 是一个优秀面向切面的框架，它扩展了 Java 语言，提供了强大的切面实现。它因为是基于java语言开发的,所以无缝扩展.easy to learn and use（易学易用）.</p></blockquote><h3 id="AspectJ常见通知类型"><a href="#AspectJ常见通知类型" class="headerlink" title="AspectJ常见通知类型"></a>AspectJ常见通知类型</h3><p>  AspectJ 中常用的通知有四种类型：</p><ol><li>前置通知@Before</li><li>后置通知@AfterReturning</li><li>环绕通知@Around   (功能最强大, 事务用最多)</li><li>最终通知@After    (无论方法是否执行成功, 都会通知)</li><li>定义切入点@Pointcut(了解)   (用于简化切面表达式)</li></ol><h3 id="什么是切面表达式"><a href="#什么是切面表达式" class="headerlink" title="什么是切面表达式"></a>什么是切面表达式</h3><ul><li><p>规范的公式 : </p><p><code>execution(访问权限  方法返回值  方法声明(参数)  异常类型)</code></p></li><li><p>简化后的公式 : </p><p><code>execution( 方法返回值  方法声明(参数) )</code></p></li><li><p>用到的符号</p><p>*       代表任意个任意的字符(通配符)</p><p>..       如果出现在方法的参数中, 则代表任意参数</p><p>​         如果出现在路径中, 则代表本路径及其所有的子路径</p></li></ul><h6 id="举例"><a href="#举例" class="headerlink" title="举例 :"></a>举例 :</h6><blockquote><p>方法只能出现在类中, 不能出现在包中</p></blockquote><ul><li><code>execution(public * *(..))</code>  : 任意的公共方法</li><li><code>execution(* set*(..))</code> : 任何一个以“set”开头的方法</li><li><code>execution(* com.xyz.service.impl.*.*(..))</code> : 任意的返回值类型,在com.xyz.service.impl包下的任意类的任意方法的任意参数    (注意方法不能出现在包中, 只能出现在类中)</li><li><code>execution(* com.xyz.service..*.*(..))</code> : 任意的返回值类型 ,在com.xyz.service及其子包下的任意类的任意方法的任意参数  </li></ul><h3 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h3><blockquote><p>AspectJ的前置通知@Before</p><p>在目标方法执行前切入切面功能.在切面方法中不可以获得目标方法的返回值,只能得到目标方法的签名(就是方法名, 参数之类).</p></blockquote><p><img src="https://img-blog.csdnimg.cn/3842086097d240968082c9cafcbee9b5.png" alt="img"></p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><blockquote><p>需要在pom.xml文件下添加spring的依赖与aspectj的依赖</p></blockquote><p>  1)创建业务接口类<br>  2)创建业务实现类<br>  3)创建切面类,实现切面方法<br>  4)在applicationContext.xml文件中进行切面绑定</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>业务接口类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>s01<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 业务接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>业务实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>s01<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 业务实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSome的业务功能被实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>s01<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 此类为切面类, 包含各种切面方法 * */</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment" spellcheck="true">//交给Aspect的框架去识别切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 所有的切面功能都要放在切面方法来实现的     * 可以将各种切面都在此类进行开发     *     * 前置通知的切面方法的规范     * 1)访问权限是public     * 2)方法的返回值是void     * 3)方法名称自定义     * 4)方法没有参数, 如果有也只能是JoinPoint类型     * 5)必须使用@Before注解来声明切入的时机是前切功能和切入点     *   参数:value  指定切入点表达式     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public String com.bjpowernode.s01.SomeServiceImpl.doSome(String,int ))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面方法中的前置通知功能实现............"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--创建业务对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s01.SomeServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--创建切面对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s01.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--绑定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//启动容器</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"s01/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出代理对象</span>        SomeService someService <span class="token operator">=</span> <span class="token punctuation">(</span>SomeService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"someService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> someService<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="基于注解方式实现"><a href="#基于注解方式实现" class="headerlink" title="基于注解方式实现"></a>基于注解方式实现</h4><p>业务实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>s01<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 业务实现类 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSome的业务功能被实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>s01<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 此类为切面类, 包含各种切面方法 * */</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment" spellcheck="true">//交给Aspect的框架去识别切面类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public String com.bjpowernode.s01.SomeServiceImpl.doSome(String,int ))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面方法中的前置通知功能实现............"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--基于注解的方式要添加包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--绑定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><h5 id="1-前置通知的切面方法中方法的参数-JoinPoint-的用法"><a href="#1-前置通知的切面方法中方法的参数-JoinPoint-的用法" class="headerlink" title="1.前置通知的切面方法中方法的参数 JoinPoint 的用法"></a>1.前置通知的切面方法中方法的参数 <strong>JoinPoint</strong> 的用法</h5><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution( * com.bjpowernode.s01.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span>JoinPoint jp<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面方法中的前置通知功能实现............"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法的签名:"</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法的参数:"</span><span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-AspectJ框架切换JDK动态代理和CGLib动态代理"><a href="#2-AspectJ框架切换JDK动态代理和CGLib动态代理" class="headerlink" title="2.AspectJ框架切换JDK动态代理和CGLib动态代理"></a>2.AspectJ框架切换JDK动态代理和CGLib动态代理</h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--applicationContext.xml配置文件中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span>  ===>默认是JDK动态代理,取出来时必须使用接口类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span>  ==>设置为CGLib子类代理,可以使用接口和实现类来接</code></pre><p><strong>使用接口来接,永远不出错.</strong></p><h3 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h3><blockquote><p>AspectJ的后置通知@AfterReturning</p><p>可以得到业务方法的返回值</p></blockquote><p><img src="https://img-blog.csdnimg.cn/9b4d23e728e04d9087f1274d2da4ea67.png" alt="img"></p><h4 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>业务接口类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>业务实现类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSome业务被实现...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 后置通知的方法规范     * 方法权限是public     * 方法没有返回值     * 方法名称自定义     * 方法有参数(也可以没有参数,如果目标方法没有返回值,则可以写无参的方法,但一般会写有参,     * 这样可以处理无参可以处理有参),这个切面方法的参数就是目标方法的返回值     * 使用的注解是  @AfterReturning注解表明是后置通知     *  value:指定切入点表达式     *  returning:指定目标方法的返回值的名称,则名称必须与切面方法的参数名称一致.     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(String com.bjpowernode.s02.*.*(..))"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"obj"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前面方法的后置功能被实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--添加包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--绑定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//启动容器</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"s02/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出代理对象</span>        SomeService someService <span class="token operator">=</span> <span class="token punctuation">(</span>SomeService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"someServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> someService<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="后置通知中无法改变目标方法返回值示例"><a href="#后置通知中无法改变目标方法返回值示例" class="headerlink" title="后置通知中无法改变目标方法返回值示例"></a>后置通知中无法改变目标方法返回值示例</h4><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//切面类中</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(String com.bjpowernode.s02.*.*(..))"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"obj"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前面方法的后置功能被实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断目标方法的返回值是不是八种基本类型或String类型, 如果是则不可以改变. 当前例子使用String类型演示</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                obj <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试结果 : </p><p><img src="https://img-blog.csdnimg.cn/3b9433b020a14b9f97ce11a51cb15c89.png" alt="img"></p><h4 id="后置方法中可以改变目标方法返回值示例"><a href="#后置方法中可以改变目标方法返回值示例" class="headerlink" title="后置方法中可以改变目标方法返回值示例"></a>后置方法中可以改变目标方法返回值示例</h4><p>新建一个Student类完成测试</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试返回值为引用类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>业务实现类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 业务实现类 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Student <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSome业务被实现...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//切面类中</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(Student com.bjpowernode.s02.*.*(..))"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"obj"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前面方法的后置功能被实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断目标方法的返回值是不是引用类型类型, 如果是则可以改变. 当前例子使用String类型演示</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"在切面方法中目标方法的返回值是"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试结果 : </p><p><img src="https://img-blog.csdnimg.cn/fa869dfe1aad475fa4852a5bdf5d2403.png" alt="img"></p><h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><blockquote><p>AspectJ的环绕通知@Around</p><p>它是通过拦截目标方法的方式 ,在目标方法前后增强功能的通知.它是功能最强大的通知,一般事务使用此通知.它可以轻易的改变目标方法的返回值.</p></blockquote><p><img src="https://img-blog.csdnimg.cn/d271d2c994e84ca4b3fbff40af0fd2be.png" alt="img"></p><h4 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>业务接口类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>业务实现类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法doSome()被调用...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知方法的规范     * 访问权限是public     * 切面方法有返回值, 此返回值就是目标方法的返回值     * 方法名称自定义     * 方法有参数, 参数就是目标方法     * 回避异常 Throwable     * 使用@Around注解声明是环绕通知     *      参数 value : 指定切入点表达式     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.bjpowernode.s03.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">myAround</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//前切功能实现</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知的前切功能实现...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//目标方法调用</span>        Object obj <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//后切功能实现</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知的后切功能实现...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--添加包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--绑定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//启动容器</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"s03/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出代理对象</span>        SomeService someService <span class="token operator">=</span> <span class="token punctuation">(</span>SomeService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"someServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> someService<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="最终通知"><a href="#最终通知" class="headerlink" title="最终通知"></a>最终通知</h3><blockquote><p>AspectJ的最终通知@After</p><p>无论目标方法是否正常执行,最终通知的代码都会被执行.</p></blockquote><h4 id="实现步骤-3"><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>1.业务接口类</p><p>2.业务实现类</p><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 最终通知的方法规范     * 访问权限是public     * 方法没有返回值     * 方法名称自定义     * 方法没有参数,如果有也只能是JoinPoint     *   参数 :     *       value : 指定切入点表达式     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.bjpowernode.s04.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终方法被实现....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.配置文件applicationContext.xml</p><p>5.测试类</p><h3 id="定义切入点别名"><a href="#定义切入点别名" class="headerlink" title="定义切入点别名"></a>定义切入点别名</h3><blockquote><p>一个方法添加多个通知</p><p>给切入点表达式起别名,  如果多个切面切入到同一个切入点,可以使用别名简化开发.<br>  使用@Pointcut注解,创建一个空方法,此方法的名称就是别名.</p></blockquote><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知方法被实现....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myCut()"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"obj"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterReturning</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知方法被实现....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知方法被实现....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">myAround</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知的前置方法被实现....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知的后置方法被实现....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义切入点表达式的别名</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.bjpowernode.s04.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行顺序如下 : </p><p><img src="https://img-blog.csdnimg.cn/1eb433cd158f4df3be666e70ed661914.png" alt="img"></p><h2 id="SM整合"><a href="#SM整合" class="headerlink" title="SM整合"></a>SM整合</h2><blockquote><p>将MyBatis与Spring进行整合, 主要解决的问题是将SqlSessionFactory对象交由Spring来管理.</p></blockquote><h3 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h3><ol><li><p>建表</p></li><li><p>新建项目, 选择quickstart模板</p></li><li><p>修改pom.xml文件, 添加相关的依赖</p></li><li><p>添加MyBatis相应的模板(也就是直接一直粘贴复制的头文件)</p></li><li><p>添加MyBatis核心配置文件(SqlMapConfig.xml文件), 并拷贝jdbc.properties属性文件到resource目录下</p><p>SqlMapConfig.xml文件 : </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span> <span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--读取属性文件中数据库的配置,    被spring接管, 在applicationContext_mapper.xml中配置了    --></span><span class="token comment" spellcheck="true">&lt;!--    &lt;properties resource="db.properties">&lt;/properties>--></span>    <span class="token comment" spellcheck="true">&lt;!--设置日志输出语句,显示相应操作的sql语名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册实体类别名,    被spring接管, 在applicationContext_mapper.xml中配置了    --></span><span class="token comment" spellcheck="true">&lt;!--    &lt;typeAliases>        &lt;package name="com.bjpowernode.pojo">&lt;/package>    &lt;/typeAliases>--></span>    <span class="token comment" spellcheck="true">&lt;!--    配置数据库的环境变量(数据库连接配置)    jdbc数据源,被spring接管, 在applicationContext_mapper.xml中配置了    --></span><span class="token comment" spellcheck="true">&lt;!--    &lt;environments default="development">        &lt;environment id="development">            &lt;transactionManager type="JDBC"/>            &lt;dataSource type="POOLED">                &lt;property name="driver" value="com.mysql.jdbc.Driver"/>                &lt;property name="url"                          value="jdbc:mysql://localhost:3308/ssm?useSSL=false&amp;amp;serverTimezone=UTC&amp;amp;allowPublicKeyRetrieval=true"/>                &lt;property name="username" value="root"/>                &lt;property name="password" value="123456"/>            &lt;/dataSource>        &lt;/environment>    &lt;/environments>--></span>    <span class="token comment" spellcheck="true">&lt;!--mapper文件注册    被spring接管, 在applicationContext_mapper.xml中配置了    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加applicationContext_mapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--读取jdbc配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>property-placeholder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--创建数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置SqlSessionFactoryBean类,系统工具类--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--配置数据源, 引用前面配置的jdbc数据源--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--配置MyBatis的核心配置文件--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SqlMapConfig.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--注册实体类的别名--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.pojo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注册mapper.xml文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加applicationContext_service.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--SM是基于注解的开发,所以添加包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.service.impl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--事务处理--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加Accounts实体类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 实体类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Accounts</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer aid<span class="token punctuation">;</span>    <span class="token keyword">private</span> String aname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String acontent<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Accounts{"</span> <span class="token operator">+</span>                <span class="token string">"aid="</span> <span class="token operator">+</span> aid <span class="token operator">+</span>                <span class="token string">", aname='"</span> <span class="token operator">+</span> aname <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", acontent='"</span> <span class="token operator">+</span> acontent <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> aid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAid</span><span class="token punctuation">(</span>Integer aid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aid <span class="token operator">=</span> aid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> aname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAname</span><span class="token punctuation">(</span>String aname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aname <span class="token operator">=</span> aname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAcontent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> acontent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAcontent</span><span class="token punctuation">(</span>String acontent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acontent <span class="token operator">=</span> acontent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Accounts</span><span class="token punctuation">(</span>Integer aid<span class="token punctuation">,</span> String aname<span class="token punctuation">,</span> String acontent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aid <span class="token operator">=</span> aid<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aname <span class="token operator">=</span> aname<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acontent <span class="token operator">=</span> acontent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Accounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>添加mapper包, 添加AccountsMapper接口和AccountsMapper.xml文件并开发</p><p>AccountsMapper接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Accounts<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据访问层 * 数据库sql接口, 用来定义增删改查的方法 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountsMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//增加用户</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Accounts accounts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AccountsMapper.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span> <span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper.AccountsMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        int insert(Accounts accounts);        private Integer aid;        private String aname;        private String acontent;    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into accounts values (#{aid},#{aname},#{acontent});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加service包, 添加AccountsService接口和AccountsServiceImpl实现类</p><p>AccountsService接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Accounts<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 业务逻辑层 *业务接口类 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountsService</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Accounts accounts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AccountsServiceImpl实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>AccountsMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Accounts<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AccountsService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 业务接口实现类 */</span><span class="token annotation punctuation">@Service</span> <span class="token comment" spellcheck="true">//交给Spring去创建对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountsService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//切记:在所有的业务逻辑层实现类中一定会有数据访问层的对象</span>    <span class="token annotation punctuation">@Autowired</span>    AccountsMapper accountsMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Accounts accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountsMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>accounts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>添加测试类进行功能测试</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建容器对象并启动</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出AccountsServiceImpl对象,业务实现类的对象</span>        AccountsService aService <span class="token operator">=</span> <span class="token punctuation">(</span>AccountsService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountsServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> aService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Accounts</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><h3 id="基于注解的事务"><a href="#基于注解的事务" class="headerlink" title="基于注解的事务"></a>基于注解的事务</h3><ol><li><p>在applicationContext_service.xml文件中添加事务管理器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--1.添加事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--因为事务必须关联数据库处理, 所以要配置数据源, 配置的数据源是从applicationContext_mapper.xml导入的jdbc数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>在applicationContext_service.xml文件中添加事务的注解驱动</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--2.添加注解驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre></li><li><p>在业务逻辑的实现类上添加注解@Transactional(propagation = Propagation.REQUIRED)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 业务接口实现类 */</span><span class="token annotation punctuation">@Service</span> <span class="token comment" spellcheck="true">//交给Spring去创建对象</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//添加事务的注解, 增删改使用Propagation.REQUIRED</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountsService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//切记:在所有的业务逻辑层实现类中一定会有数据访问层的对象</span>    <span class="token annotation punctuation">@Autowired</span>    AccountsMapper accountsMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Accounts accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountsMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>accounts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="Transactional注解参数详解"><a href="#Transactional注解参数详解" class="headerlink" title="@Transactional注解参数详解"></a>@Transactional注解参数详解</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//事务的传播特性</span>            noRollbackForClassName <span class="token operator">=</span> <span class="token string">"ArithmeticException"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//指定发生什么异常不回滚,使用的是异常的名称</span>            noRollbackFor <span class="token operator">=</span> ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指定发生什么异常不回滚,使用的是异常的类型</span>            rollbackForClassName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指定发生什么异常必须回滚</span>            rollbackFor <span class="token operator">=</span> ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指定发生什么异常必须回滚</span>            timeout <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//连接超时设置,默认值是-1,表示永不超时</span>            readOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//默认是false,如果是查询操作,必须设置为true.</span>            isolation <span class="token operator">=</span> Isolation<span class="token punctuation">.</span>DEFAULT<span class="token comment" spellcheck="true">//使用数据库自已的隔离级别        </span>    <span class="token punctuation">)</span></code></pre><h3 id="为什么添加事务管理器"><a href="#为什么添加事务管理器" class="headerlink" title="为什么添加事务管理器"></a>为什么添加事务管理器</h3><blockquote><p> 事务管理器用来生成相应技术的连接+执行语句的对象.</p></blockquote><p>  JDBC:  Connection   con.commit();   con.rollback();<br>  MyBatis:  SqlSession   sqlSession.commit();  sqlSession.rollback();<br>  Hibernate:  Session    session.commit();   session.rollback();</p><p> 如果使用MyBatis框架,必须使用DataSourceTransactionManager类完成处理</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--1.添加事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--因为事务必须关联数据库处理, 所以要配置数据源, 配置的数据源是从applicationContext_mapper.xml导入的jdbc数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p><strong>项目中的所有事务,必须添加到业务逻辑层上.</strong> </p><h3 id="Spring事务的传播特性"><a href="#Spring事务的传播特性" class="headerlink" title="Spring事务的传播特性"></a>Spring事务的传播特性</h3><blockquote><p>多个事务之间的合并,互斥等都可以通过设置事务的传播特性来解决.</p></blockquote><ul><li>PROPAGATION_REQUIRED：必被包含事务(增删改必用)</li><li>PROPAGATION_REQUIRES_NEW：自己新开事务，不管之前是否有事务</li><li>PROPAGATION_SUPPORTS：支持事务，如果加入的方法有事务，则支持事务，如果没有，不单开事务</li><li>PROPAGATION_NEVER：不能运行中事务中，如果包在事务中，抛异常</li><li>PROPAGATION_NOT_SUPPORTED：不支持事务，运行在非事务的环境</li></ul><p>不常用</p><ul><li>PROPAGATION_MANDATORY：必须包在事务中，没有事务则抛异常</li><li>PROPAGATION_NESTED：嵌套事务</li></ul><h4 id="测试事务间的互相影响作用是什么"><a href="#测试事务间的互相影响作用是什么" class="headerlink" title="测试事务间的互相影响作用是什么"></a>测试事务间的互相影响作用是什么</h4><ol><li><p>创建一个新表, 用户表</p></li><li><p>在pojo包中, 创建用户实体类</p></li><li><p>在mapper包中, 创建UsersMapper接口和UsersMapper.xml文件并开发</p></li><li><p>在service包中, 创建UsersService接口和UsersServiceImpl实现类</p></li><li><p>在UsersServiceImpl实现类中 调用账户的增加操作 =&gt; (也就是用户事务中包含着账户事务)</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token comment" spellcheck="true">//交给Spring去创建对象</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsersServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UsersService</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    UsersMapper usersMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    AccountsService accountsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Users users<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> usersMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户增加成功!num="</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用帐户的增加操作,调用的帐户的业务逻辑层的功能</span>        num <span class="token operator">=</span> accountsService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Accounts</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"帐户好的呢!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>测试结果图</p><p><img src="https://img-blog.csdnimg.cn/4528569dc6134fc395d9805a242421d8.png" alt="img"></p></li></ol><h3 id="Spring中事务的五大隔离级别"><a href="#Spring中事务的五大隔离级别" class="headerlink" title="Spring中事务的五大隔离级别"></a>Spring中事务的五大隔离级别</h3><ul><li>未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据</li><li>提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)</li><li>可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读，但是innoDB解决了幻读</li><li>串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞(高并发不会使用, 速度慢, 很少用)</li><li>使用数据库默认的隔离级别isolation = Isolation.DEFAULT<ul><li>MySQL：mysql默认的事务处理级别是’REPEATABLE-READ’,也就是<strong>可重复读</strong></li><li>Oracle：oracle数据库支持READ COMMITTED 和 SERIALIZABLE这两种事务隔离级别。默认系统事务隔离级别是READ COMMITTED,也就是读已提交</li></ul></li></ul><h3 id="Spring的两种事务处理方式"><a href="#Spring的两种事务处理方式" class="headerlink" title="Spring的两种事务处理方式"></a>Spring的两种事务处理方式</h3><ol><li><p>注解式的事务</p><p>使用@Transactional注解完成事务控制,此注解可添加到类上,则对类中所有方法执行事务的设定.此注解可添加到方法上,只是对此方法执行事务的处理.</p></li><li><p>声明式事务(必须掌握)</p><p>在配置文件中添加一次,整个项目遵循事务的设定.</p></li></ol><h4 id="声明式事务的实现步骤"><a href="#声明式事务的实现步骤" class="headerlink" title="声明式事务的实现步骤"></a>声明式事务的实现步骤</h4><blockquote><p>  要求项目中的方法命名有规范<br>  1)完成增加操作包含    add  save  insert  set<br>  2)更新操作包含   update   change  modify<br>  3)删除操作包含   delete   drop    remove  clear<br>  4)查询操作包含   select   find    search  get </p></blockquote><ol><li><p>创建Spring核心配置文件(applicationContext_trans.xml  事务配置文件)</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--此配置文件与applicationContext_service.xml的功能一样,只是事务配置不同--></span>    <span class="token comment" spellcheck="true">&lt;!--导入applicationContext_mapper.xml--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicationContext_mapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--添加包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.service.impl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--添加事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置事务切面,哪些方法添加事务--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myadvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*select*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*find*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*search*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*get*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*insert*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">no-rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArithmeticException<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*add*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*save*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">no-rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArithmeticException<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*set*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*update*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*change*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*modify*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*delete*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*remove*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*drop*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*clear*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--绑定切面和切入点--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mycut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.bjpowernode.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myadvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mycut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射初级</title>
      <link href="/2020/03/17/java-note009/"/>
      <url>/2020/03/17/java-note009/</url>
      
        <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>通过外部文件配置, 在不修改源码情况下, 来控制程序</p><p><img src="https://img-blog.csdnimg.cn/8b63b5fc975a4245851a12f82bab67cd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用反射机制</span><span class="token comment" spellcheck="true">//1.加载类,返回Class类型的对象cls</span>Class <span class="token class-name">cls</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classfullpath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.通过 cls 得到你加载的类 com.hspedu.Cat 的对象实例</span>Object o <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o的运行类型="</span> <span class="token operator">+</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.通过 cls 得到你加载的类 com.hspedu.Cat 的method名字 : "hi" 的方法对象</span><span class="token comment" spellcheck="true">//即 : 在反射中,可以把方法视为对象(万物皆对象)</span>Method method1 <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.通过method1调用方法:即通过方法对象来实现调用方法</span>method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传统方法: 对象.方法(),反射机制: 方法.invoke(对象)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/3c96cd118bcd48c1b138ae86ebb0deb2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="反射原理"><a href="#反射原理" class="headerlink" title="反射原理"></a>反射原理</h3><p><img src="https://img-blog.csdnimg.cn/1090fc72f2c540f59ca87c3a1deabaa3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>反射相关的主要类</strong></p><p><img src="https://img-blog.csdnimg.cn/43e03f651b774e328a6d41665bb7c308.png" alt="img"></p><p><strong>反射优化</strong></p><p><img src="https://img-blog.csdnimg.cn/0461f6681ffb470d8186ea0144902961.png" alt="img"></p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><ol><li>Class也是类, 因此也继承Object类</li><li>Class类对象不是new出来的, 而是系统创建的</li><li>对于某个类的Class类对象, 在内存中只有一份, 因为类只加载一次</li><li>每个类的实例都会记得自己是由哪个Class实例所生成</li><li>通过Class对象可以完整地得到一个类的完整结构, 通过一系列API</li><li>Class对象是存放在堆的</li><li>类的字节码二进制数据, 是放在方法区的, 有的地方称为类的元数据(包括 方法代码, 变量名, 方法名, 访问权限等等)</li></ol><p><strong>常用方法演示</strong></p><p><img src="https://img-blog.csdnimg.cn/27a5f7b9bdc54ef3be2f3107176eaca0.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/d8b9c76a04114cbca3f1e2d8ce04b461.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/404394e55c234268aed02ec0efdd94cd.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/9b07758c07a84aabbdd44daacee27e4e.png" alt="img"></p><p><strong>获取Class对象六种方式</strong></p><ol><li><p>在编译阶段中 : <code>Class.forName()</code></p><p><img src="https://img-blog.csdnimg.cn/6d3cd41738d549dda633372d3b94db33.png" alt="img"></p></li><li><p>在类加载阶段中 : <code>类.class</code></p><p><img src="https://img-blog.csdnimg.cn/09dac9ce71e94480b5e168f752d193fd.png" alt="img"></p></li><li><p>在运行阶段中 : <code>对象.getClass()</code></p><p><img src="https://img-blog.csdnimg.cn/e5e3b5e0396243278ec25a09257acd65.png" alt="img"></p></li><li><p>在类加载得到Class对象 : </p><p><img src="https://img-blog.csdnimg.cn/af4935fb72964ca78f3c711415ba1c22.png" alt="img"></p></li><li><p>基本数据</p><p><img src="https://img-blog.csdnimg.cn/65ab7cb295a84707a45657236aac7802.png" alt="img"></p></li><li><p>基本数据对应的包装类</p><p><img src="https://img-blog.csdnimg.cn/3523affb82d64dc995d07ab6559130d7.png" alt="img"></p></li></ol><p><strong>哪些类型有Class对象</strong></p><p><img src="https://img-blog.csdnimg.cn/51cfd76673c44ee28603dae3bf2b73eb.png" alt="img"></p><h3 id="动态和静态加载"><a href="#动态和静态加载" class="headerlink" title="动态和静态加载"></a>动态和静态加载</h3><ol><li>静态加载 : 编译时加载相关的类, 如果没有则报错, 依赖性太强</li><li>动态加载 : 运行时加载需要的类, 如果运行时不用该类, 即使不存在该类, 则不报错, 降低了依赖性</li></ol><p><strong>类加载的时机</strong></p><p><img src="https://img-blog.csdnimg.cn/64ba8d721c394b5db5c08f5bc6ee02d3.png" alt="img"></p><p><strong>类加载流程图</strong></p><p><img src="https://img-blog.csdnimg.cn/3c1fbfb307b145299977708e0dec4252.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>类加载各阶段完成的任务</strong></p><p><img src="https://img-blog.csdnimg.cn/caa4923d7b2f421590c7105a3579e4bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="类加载的五个阶段"><a href="#类加载的五个阶段" class="headerlink" title="类加载的五个阶段"></a>类加载的五个阶段</h3><ul><li><p>加载阶段</p><p><img src="https://img-blog.csdnimg.cn/acdf599a4d8b4735843807b435ba2876.png" alt="img"></p></li><li><p>连接阶段-验证</p><p><img src="https://img-blog.csdnimg.cn/e125756a9ea349bb8814f1b725ec965c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>连接阶段-准备</p><p><img src="https://img-blog.csdnimg.cn/62cf5eddd9014961ac556c3b86354e78.png" alt="img"></p><h6 id="eg"><a href="#eg" class="headerlink" title="eg :"></a>eg :</h6><p><img src="https://img-blog.csdnimg.cn/610b94fae9b04000a571a0299a48fc56.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>连接阶段-解析</p><p><img src="https://img-blog.csdnimg.cn/aeea7892bc254400976c651c1a4f9e9a.png" alt="img"></p></li><li><p>初始化阶段</p><p><img src="https://img-blog.csdnimg.cn/9a22a5946d884a74883f954739945b2a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ul><h3 id="反射暴破创建"><a href="#反射暴破创建" class="headerlink" title="反射暴破创建"></a>反射暴破创建</h3><p><strong>通过反射创建对象</strong></p><ol><li>Class类相关方法<ul><li><code>newInstance</code> : 调用类中的无参构造器, 获取对应类的对象</li><li><code>getConstructor(Class...clazz)</code> : 根据参数列表, 获取对应的构造器对象</li><li><code>getDecalaredConstructor(Class...clazz)</code> : 根据参数列表, 获取对应的构造器对象</li></ul></li><li>Constructor类相关方法<ul><li><code>setAccessible</code> : 暴破</li><li><code>newInstance(Object...obj)</code> : 调用构造器</li></ul></li></ol><p><img src="https://img-blog.csdnimg.cn/836648d982514acb8eef213d39298c2b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/864add14287e41adb6fbe017cbecab31.png" alt="img"></p><p><strong>通过反射访问类中的成员</strong></p><ol><li><p>根据属性名获取Field对象</p><p><code>Field f = clazz对象.getDeclaredField(属性名);</code></p></li><li><p>暴破 : <code>f.setAccessible(true);</code> //f是Field</p></li><li><p>访问 : </p><p><code>f.set(o, 值);</code>//o表示对象</p><p><code>syso(f.get(o));</code>//o表示对象</p></li><li><p>注意 : 如果是静态属性, 则set和get中的参数o, 可以写成null</p></li></ol><p><img src="https://img-blog.csdnimg.cn/15281723e1e14523a398c350d65242ba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/de8581500d5445f0945c4a3b64142ab5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>通过反射访问类中的方法</strong></p><ol><li>根据方法名和参数列表获取Method方法对象 : <code>Method m = clazz.getDeclaredMethod(方法名, XX.class);</code>//得到本类的所有方法</li><li>获取对象 : <code>Object o = clazz.newInstance();</code></li><li>暴破 : <code>m.setAccessible(true);</code></li><li>访问 : <code>Object returnValue = m.invoke(o, 实参列表);</code>//o就是对象</li><li>注意 : 如果是静态方法, 则invoke的参数o, 可以写成null</li></ol><p><img src="https://img-blog.csdnimg.cn/590649ca878144f993cff6003a4b150e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_16,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/740e7e562e974ffcb44a7374d2c87451.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/506714c7b66b4f92b36c8abdfb5ecb26.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解IO流</title>
      <link href="/2020/03/10/java-note008/"/>
      <url>/2020/03/10/java-note008/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是流"><a href="#什么是流" class="headerlink" title="什么是流"></a>什么是流</h2><blockquote><p>文件在程序中是以流的形式来操作的</p></blockquote><p>流 : 数据在数据源(文件)和程序(内存)之间经历的路径</p><p>以Java程序(内存)为参考点</p><ul><li>输入流 : 数据从数据源到程序</li><li>输出流 : 数据从程序到数据源</li></ul><h3 id="文件基础知识"><a href="#文件基础知识" class="headerlink" title="文件基础知识"></a>文件基础知识</h3><p><span class="github-emoji"><span>🎪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 具体操作查阅文档 ~</p><ol><li>创建文件  <code>createNewFile()</code></li><li>获取文件信息 <code>getName </code>   <code>length</code>   <code>isFile</code>  <code>getAbsolutePath</code> <code>getParent</code> 等等</li><li>目录操作 <code>mkdirs</code>  <code>delete</code> 等等</li></ol><h2 id="IO流原理及分类"><a href="#IO流原理及分类" class="headerlink" title="IO流原理及分类"></a>IO流原理及分类</h2><blockquote><ul><li>I/O是input/output的缩写, 用于处理数据传输. 如读写文件, 网络通讯等</li><li>Java程序中, 对于数据的输入/输出操作以流的方式进行</li></ul></blockquote><ul><li>按操作数据单位不同分为 : 字节流(8 bit)和字符流</li><li>按数据流的流向不同分为 : 输入流和输出流</li><li>按流的角色的不同分为 : 节点流和处理流/包装流</li></ul><p>Java的IO流共涉及到40多个类, 都是从4个抽象基类派生出来的分别是  </p><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><h2 id="四个抽象基类的常用子类"><a href="#四个抽象基类的常用子类" class="headerlink" title="四个抽象基类的常用子类"></a>四个抽象基类的常用子类</h2><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><blockquote><p>文件输入流-读取</p></blockquote><p>让我们来实现一个小案例, 读取D盘下demo目录中的hello.txt文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用多个字符读取方法</span><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>StringToIntTable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInPutStream_01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//要读取文件的路径</span>    String filePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\hello.txt"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个byte数组, 用来多个字符读取</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次读取8个字节</span>    <span class="token keyword">int</span> readLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    FileInputStream fileInputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建FileInputStream对象,用于读取文件</span>            fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从该输入流读取最多buf.length字节的数据, 如果没有输入可用, 该方法将被阻止</span>            <span class="token comment" spellcheck="true">//如果返回-1, 表示读取完毕</span>            <span class="token comment" spellcheck="true">//如果读取正常,返回实际读取的字节数</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//public String(byte[] bytes,要解码为字符的字节</span>                <span class="token comment" spellcheck="true">//              int offset,要解码的第一个字节的索引</span>                <span class="token comment" spellcheck="true">//              int length)要解码的字节数</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readLen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭流</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意 : 我们使用的是字节输入流的子类, 也就是说我们并不能读取中文. 因为会造成乱码.</p><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><blockquote><p>文件输出流</p></blockquote><p>让我们来实现一个小案例, 将数据写入D盘下的demo下的a.txt, 如果文件不存在, 则创建文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用多个字符写入方法</span><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutPutStream_01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//要写入文件的路径</span>        String filePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\a.txt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建FileOutputStream对象</span>        FileOutputStream fileOutPutStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token string">"hello,world"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//得到FileOutPutStream对象</span>            fileOutPutStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//写入字符串</span>            fileOutPutStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把字符串转成byte数组</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭流</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                fileOutPutStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意 : 如果是 <code>new FileOutputStream(filePath)</code> 创建方式, 当写入内容时, 会覆盖掉原来的内容, 但是有时我们并不想这样做, 而是想要在末尾添加.</p><p>那么我们可以使用 <code>new FileOutputStream(filePath, true)</code> 创建方式</p><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><blockquote><p>字符输入流-读取</p></blockquote><p>常用方法 : </p><ul><li><code>new FileReader(File/String)</code></li><li><code>read</code> : 每次读取单个字符, 返回该字符, 如果到文件末尾返回-1</li><li><code>read(char[])</code> : 批量读取多个字符到数组, 返回读取到的字符数, 如果到文件末尾返回-1</li></ul><p>相关API</p><p>​    String类</p><ul><li><code>new String(char[])</code> : 将char[]转换成String</li><li><code>new String(char[],off,len)</code> : 将char[]的指定部分转换成String</li></ul><h3 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h3><blockquote><p>字符输出流</p></blockquote><p>常用方法 : </p><ul><li><code>new FileWriter(File/String)</code> : 覆盖模式, 相当于流的指针在首端</li><li><code>new FileWriter(File/String, true)</code> : 追加模式, 相当于流的指针在尾端</li><li><code>write(int)</code> : 写入单个字符</li><li><code>write(char[])</code> : 写入指定数组</li><li><code>write(char[],off,len)</code>  : 写入指定数组的指定部分</li><li><code>write(string)</code> : 写入整个字符串</li><li><code>write(string,off,len)</code> : 写入字符串的指定部分</li></ul><p>相关API</p><p>​    String类</p><ul><li><code>toCharArray</code> : 将String转换成char[]</li></ul><h3 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h3><blockquote><p>缓冲字符输入流, 属于处理流</p><ol><li>节点流可以从一个特定的数据源读写数据, 也就是专门操作文件的</li><li>处理流(也叫包装流)  在已存在的流(节点流或处理流) 之上, 为程序提供更为强大的读写功能. 既可以消除不同节点流的实现差异, 也可以提供更方便的方法来完成输入输出</li><li>关闭处理流时, 只需关闭外层流就行了, 因为底层真正在操作的, 还是节点流</li></ol></blockquote><p>BufferedReader类中, 有属性Reader, 即可以封装一个节点流, 该节点流可以是任意的. 只要是Reader子类</p><p>让我们来实现一个小案例, 使用BufferedReader读取文本文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedReader_01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String filePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\a.java"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建BufferedReader</span>        BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取</span>        String line<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按行读取</span>        <span class="token comment" spellcheck="true">//当返回一个null时, 表示读取完毕</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭流, 只需要关闭外层的处理流就行, java底层会自动去关闭节点流</span>        bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h3><blockquote><p>缓冲字符输出流, 属于处理流</p></blockquote><p>让我们来实现一个小案例, 把上一个案例读取到的数据写入到b.java中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedWriter_01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//源文件</span>        String srcFilePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\a.java"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//目标文件</span>        String destFilePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\b.java"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按行读取</span>        String line<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建BufferedReader</span>        BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>srcFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建BufferedWriter</span>        BufferedWriter bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>destFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边读边写</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//插入一个换行</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭流</span>        bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意 : BufferedReader 和 BufferedWriter 是按照字符操作的, 不要去操作二进制文件, 可能造成文件损坏</p><h3 id="BufferedInputStream与BufferedOutputStream"><a href="#BufferedInputStream与BufferedOutputStream" class="headerlink" title="BufferedInputStream与BufferedOutputStream"></a>BufferedInputStream与BufferedOutputStream</h3><blockquote><p>字节处理流</p></blockquote><p>让我们来实现一个小案例, 通过字节处理流完成图片的拷贝</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> pc<span class="token punctuation">.</span>B<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedOutputStream_01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//源文件</span>        String srcFilePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\demo1\\drb.png"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//目标文件</span>        String destFilePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\drb1.png"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//每次读取1024个字节</span>        <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实际读取的字节</span>        <span class="token comment" spellcheck="true">//创建BufferedInputStream</span>        BufferedInputStream bufferedInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建BufferedOutputStream</span>        BufferedOutputStream bufferedOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边读边写</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bufferedInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            bufferedOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭流</span>        bufferedInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><h3 id="什么是对象流"><a href="#什么是对象流" class="headerlink" title="什么是对象流?"></a>什么是对象流?</h3><p>让我们首先看两个需求 : </p><ol><li>将<code>int num = 100;</code> 这个int数据保存到文件中, 注意不是100数字, 而是<code>int 100</code>, 并且, 能够从文件中直接恢复<code>int 100</code></li><li>将<code>Dog dog = new Dog("小黄",3);</code> 这个dog对象保存到文件中, 并且能够从文件恢复</li></ol><p>上面的要求就是在进行序列化和反序列化操作.</p><p>那么什么是序列化和反序列化呢? 序列化就是在保存数据时, 保存数据的值和数据类型. 反序列化就是在恢复数据时, 恢复数据的值和数据类型.</p><p>为了让某个对象支持序列化机制, 必须实现两个接口之一(<strong>Serializable/Externalizable</strong>), 使其类是可序列化的. </p><h3 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h3><blockquote><p>对象字节输出流</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span>String filePath <span class="token operator">=</span> <span class="token string">"e:\\data.dat"</span><span class="token punctuation">;</span>ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//序列化数据到 e:\data.dat</span>oos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// int -> Integer(实现了 Serializable)</span>oos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// boolean -> Boolean(实现了 Serializable)</span>oos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// char -> Character(实现了 Serializable)</span>oos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String</span><span class="token comment" spellcheck="true">//保存一个Dog对象</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据保存完毕(序列化形式)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果需要序列化某个类,需要接口Serializable(标记接口,没有方法)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h3><blockquote><p>对象字节输入流</p></blockquote><p>读取指定文件, 并进行反序列化恢复数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指定反序列化的文件</span>String filePath <span class="token operator">=</span> <span class="token string">"e:\\data.dat"</span><span class="token punctuation">;</span>ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取</span><span class="token comment" spellcheck="true">//读取的顺序需要和保存数据的顺序一致, 否则会出现异常</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readIne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object dog <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行类型="</span> <span class="token operator">+</span> dog<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dog信息="</span> <span class="token operator">+</span> dog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层 Object->Dog</span><span class="token comment" spellcheck="true">//关闭流</span>ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="对象处理流使用细节"><a href="#对象处理流使用细节" class="headerlink" title="对象处理流使用细节"></a>对象处理流使用细节</h3><ul><li>要求实现Serializable或者Externalizable接口, 一般而言, 我们使用的是Serializable. 因为它是一个标记接口, 而Externalizable需要我们实现其方法, 才能够使用.</li><li>读写顺序要一致</li><li>序列化对象时, 要求里面属性的类型也需要实现序列化接口</li><li>序列化具备可继承性, 也就是如果某类已经实现了序列化, 则它的所有子类也已经默认实现了序列化</li><li>序列化对象时, 默认将里面所有属性都进行序列化, 但除了static或transient修饰的成员</li></ul><h2 id="模拟修饰器设计模式"><a href="#模拟修饰器设计模式" class="headerlink" title="模拟修饰器设计模式"></a>模拟修饰器设计模式</h2><p>在前文我们提到的处理流就是使用修饰器设计模式, 不会直接与数据源相连.</p><p>下面让我们来模拟实现这种设计模式的源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Reader_</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//抽象类   模拟为Reader   </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReader_</span> <span class="token keyword">extends</span> <span class="token class-name">Reader_</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//节点流</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对文件进行读取..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringReader_</span> <span class="token keyword">extends</span> <span class="token class-name">Reader_</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//节点流</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取字符串..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedReader_</span> <span class="token keyword">extends</span> <span class="token class-name">Reader_</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//处理流</span>    <span class="token keyword">private</span> Reader_ reader_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">BufferedReader_</span><span class="token punctuation">(</span>Reader_ reader_<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reader_ <span class="token operator">=</span> reader_<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//扩展</span>    <span class="token comment" spellcheck="true">//让方法更加灵活,多次读取文件</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFiles</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            reader_<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//扩展 readString,批量处理字符串数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readStrings</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            reader_<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//main中</span>BufferedReader_ bufferedReader_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedReader_<span class="token punctuation">.</span><span class="token function">readFiles</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读十次文件</span>BufferedReader_ bufferedReader_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedReader_<span class="token punctuation">.</span><span class="token function">readStrings</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取5次字符串</span></code></pre><h2 id="如何解决乱码问题"><a href="#如何解决乱码问题" class="headerlink" title="如何解决乱码问题?"></a>如何解决乱码问题?</h2><p>默认情况下, 我们使用UTF-8编码, 但是如果编码出现了问题, 不是使用UTF-8而是其他编码, 例如ANsI, 我们会出现中文乱码的问题. 如何解决? 我们可以使用转换流来避免出现乱码问题.</p><p>转换流 : 可以把字节流转换成字符流. </p><p>当处理纯文本数据时, 如果使用字符流效率更高, 并且可以有效解决中文乱码问题, 所以建议将字节流转换成字符流, 可以在使用时指定编码格式</p><h3 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h3><blockquote><p>Reader的子类, 可以将InputStream(字节流)转换成Reader(字符流)</p></blockquote><p>将字节流 FileInputStream 转成字符流 InputStreamReader, 指定编码 UTF-8</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputStreamReader_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\a.txt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把FileInputStream 转成 InputStreamReader, 指定了utf-8码</span>        InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把InputStreamReader 传入 BufferedReader ,使用BufferedReader读取(效率高)</span>        BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取</span>        String s <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取的内容"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭流</span>        bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h3><blockquote><p>Writer的子类, 可以将OutputStream(字节流)转换成Writer(字符流)</p></blockquote><p>将FileOutputStream(字节流)  转换成 OutputStreamWriter(字符流)  指定编码形式gbk</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStreamWriter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutputStreamWriter_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\a.txt"</span><span class="token punctuation">;</span>        OutputStreamWriter outputStreamWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStreamWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hi,哒哒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStreamWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="配置文件properties"><a href="#配置文件properties" class="headerlink" title="配置文件properties"></a>配置文件properties</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//读取</span><span class="token comment" spellcheck="true">//使用Properties类来读取mysql.properties文件</span><span class="token comment" spellcheck="true">//1.创建Properties对象</span>Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.加载指定配置文件</span>properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src\\mysql.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.把k-v显示到控制台</span>properties<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.根据key获取对应的值</span>String user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改</span><span class="token comment" spellcheck="true">//使用Properties类添加key-val到新文件mysql.properties中</span><span class="token comment" spellcheck="true">//1.如果该文件没有key就是创建</span><span class="token comment" spellcheck="true">//2.如果该文件有key就是修改</span>Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"charset"</span><span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"汤姆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将 k-v存储到文件中</span>properties<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src:\\mysql2.properties"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注释这里为null</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程初级</title>
      <link href="/2020/03/02/java-note007/"/>
      <url>/2020/03/02/java-note007/</url>
      
        <content type="html"><![CDATA[<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><h4 id="继承Thread创建线程"><a href="#继承Thread创建线程" class="headerlink" title="继承Thread创建线程"></a>继承Thread创建线程</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span><span class="token comment" spellcheck="true">//创建Cat对象,可以当做线程使用</span>Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动线程</span><span class="token comment" spellcheck="true">//说明 : 当main线程启动一个子线程, 主线程不会阻塞,会继续执行</span><span class="token comment" spellcheck="true">//这时 主线程和子线程是交替执行的</span><span class="token comment" spellcheck="true">//1.当一个类继承了Thread类, 该类就可以当成线程使用</span><span class="token comment" spellcheck="true">//2.我们会重写 run 方法, 写上自己的业务代码</span><span class="token comment" spellcheck="true">//3. run Theread类 实现了 Runnable 接口的run方法</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//重写run方法,写上自己的业务逻辑</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//该线程每隔1秒,在控制台输出喵喵</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//休眠一秒</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实现Runnable接口创建线程"><a href="#实现Runnable接口创建线程" class="headerlink" title="实现Runnable接口创建线程"></a>实现Runnable接口创建线程</h4><ol><li>java是单继承的, 在某些情况下一个类可能已经继承了某个父类, 这时在用继承Thread类方法来创建线程显然不可能了</li><li>所以通过实现Runnable接口创建线程</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span>Dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不能直接调用start</span><span class="token comment" spellcheck="true">//创建了Thread对象, 把dog对象(实现Runnable),放入Thread</span><span class="token comment" spellcheck="true">//使用到了代理模式</span>Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//休眠一秒</span>             <span class="token keyword">try</span><span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>代理模式</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//模拟简单代理模式</span><span class="token keyword">class</span> <span class="token class-name">ThreadProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//你可以把ThreadProxy类当做   真正的Thread类</span>    <span class="token keyword">private</span> Runnable target <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性, 类型是 Runnable   </span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">ThreadProxy</span><span class="token punctuation">(</span>Runnable target<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//传进来一个实现了Runnable接口的对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个方法是真正实现多线程的方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态绑定</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="多线程机制"><a href="#多线程机制" class="headerlink" title="多线程机制"></a>多线程机制</h3><ol><li>在多线程之中, 不是主线程结束了就意味着进程结束, 而是要等所有的线程结束.</li><li>从Java的设计来看, 通过继承Thread或者实现Runnable接口来创建线程本质没有区别</li><li>实现Runnable接口方式更加适合多线程共享一个资源的情况, 并且避免了单继承的限制</li></ol><p><strong>为什么是start?</strong></p><p>如果直接调用<code>run()</code>方法的话, 就是一个普通的方法, 没有真正的启动一个线程, 就会把<code>run()</code>方法执行完毕, 才向下执行</p><p><strong>start()方法执行过程</strong></p><p><img src="https://img-blog.csdnimg.cn/fffa463262e744249978b42d803b584b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_10,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>注意:</strong></p><p><img src="https://img-blog.csdnimg.cn/57bc0d92d8f0433b9c2d77737de2eb5d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h3><ol><li><code>setName</code> //设置线程名称, 使它和参数name相同</li><li><code>getName</code> //返回该线程的名称</li><li><code>start</code> //使该线程开始执行, Java虚拟机底层调用该线程的 start0 方法</li><li><code>run</code>  //调用线程对象的 run 方法</li><li><code>setPriority</code> //更改线程的优先级</li><li><code>getPriority</code> //获取线程的优先级</li><li><code>sleep</code> //在指定毫秒数内休眠</li><li><code>interrupt</code> //中断线程(中断线程, 不是停止线程, 一般用于中断正在休眠的线程)</li></ol><p><strong>通知线程退出</strong></p><p>设置一个Boolean变量, 在线程外改变该变量. 使线程退出循环.</p><p><strong>线程插队</strong></p><ol><li><code>yield</code>  //线程的礼让. 让出cpu, 让其他线程执行, 但礼让的时间不确定, 所以也不一定礼让成功</li><li><code>join</code>  //线程的插队. 插队的线程一旦插队成功, 则肯定会先执行完插入的线程所以的任务</li></ol><p><strong>用户线程和守护线程</strong></p><ol><li><p>用户线程 : 也叫工作线程, 当线程的任务执行完成或通知方式结束</p></li><li><p>守护线程 : 一般是为工作线程服务的, 当所有的用户线程结束, 守护线程自动结束, 常见的守护线程是 : GC(垃圾回收机制)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//当我们希望当main线程结束后, 子线程自动结束, 将子线程设置为守护线程就可以</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p><strong>线程状态</strong></p><p><img src="https://img-blog.csdnimg.cn/34430a0a9fd94f13846e88f87abd81ff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_12,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h3><ol><li>在多线程编程, 一些敏感数据不允许被多个线程同时访问, 此时就使用同步访问技术, 保证数据在任何同一时刻, 最多有一个线程访问, 以保证数据的完整性</li><li>线程同步, 即当有一个线程在对内存进行操作时, 其他线程都不可以对这个内存地址进行操作, 直到该线程完成操作, 其他线程才能对该内存地址进行操作</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.同步代码块</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//得到对象的锁, 才能操作同步代码</span>    <span class="token comment" spellcheck="true">//需要被同步代码</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.同步方法</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">m</span> <span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//同步方法, 在同一时刻, 只能有一个线程来执行m方法</span>    <span class="token comment" spellcheck="true">//需要被同步的代码</span><span class="token punctuation">}</span></code></pre><p><strong>eg :</strong></p><p><img src="https://img-blog.csdnimg.cn/6cef8f4fc95b4a9795bc81ed8985926c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Synchronized细节"><a href="#Synchronized细节" class="headerlink" title="Synchronized细节"></a>Synchronized细节</h3><ol><li>同步的局限性 : 导致程序的执行效率降低</li><li>非静态的方法中同步代码块 的锁可以是this, 也可以是其他对象(<strong>要求多个线程的锁是同一个对象</strong>)</li><li>静态的方法中同步代码块 的锁为当前类本身</li></ol><h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h3><p><img src="https://img-blog.csdnimg.cn/885963e670564125a429ead1a42b93cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/3e1bcaf7860d49f58551ba03902d529d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合泛型</title>
      <link href="/2020/02/25/java-note006/"/>
      <url>/2020/02/25/java-note006/</url>
      
        <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="ArrayList类-单列集合-List接口"><a href="#ArrayList类-单列集合-List接口" class="headerlink" title="ArrayList类(单列集合)-List接口"></a>ArrayList类(单列集合)-List接口</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main</span>List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//add:添加单个元素</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//list.add( new Integer(10))</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//remove:删除指定元素</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除第一个元素</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定删除某个元素</span><span class="token comment" spellcheck="true">//contains:查找元素是否存在</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T</span><span class="token comment" spellcheck="true">//size:获取元素个数</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token comment" spellcheck="true">//isEmpty:判断是否为空</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//F</span><span class="token comment" spellcheck="true">//clear:清空</span>list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//addAll:添加多个元素(放一个集合进去)</span>ArrayList list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addALL</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//containsAll:查找多个元素是否都存在</span><span class="token comment" spellcheck="true">//remove:删除多个元素</span></code></pre><p><strong>细节</strong></p><ol><li>ArrayList可以加入null, 并且多个</li><li>ArrayList是由数组来实现数据存储的</li><li>ArrayList基本等同于Vector, 除了ArrayList是线程不安全的(执行效率高), 在多线程情况下, 不建议使用ArrayList</li></ol><h3 id="ArrayList扩容机制"><a href="#ArrayList扩容机制" class="headerlink" title="ArrayList扩容机制"></a>ArrayList扩容机制</h3><ol><li>ArrayList中维护了一个Object类型的数组elementData</li><li>当创建ArrayList对象时, 如果使用的是无参构造器, 则初始elementData容量为0, 第一次添加, 则扩容elementData为10, 如需要再次扩容, 则扩容elementData为1.5倍</li><li>如果使用的是指定大小的构造器, 则初始elementData容量为指定大小, 如果需要扩容, 则直接扩容elementData为1.5倍</li></ol><p>每次都要去检测要不要扩容, 所以效率不高</p><p><img src="https://img-blog.csdnimg.cn/b1213c57c7c045d3aece2b0a7937a901.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/705a3e3bfb02489f9ef5abc6ac14e0f6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Vector类"><a href="#Vector类" class="headerlink" title="Vector类"></a>Vector类</h3><ol><li>Vector底层也是一个对象数组</li><li>Vector是线程同步的, 即线程安全</li><li>在开发中, 需要线程同步安全时, 考虑使用Vector</li></ol><p><img src="https://img-blog.csdnimg.cn/1b53b56524b54e0a8fc31a49acfbd36b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h3><ol><li>LinkedList底层实现了双向链表和双端队列特点</li><li>可以添加任意元素(元素可以重复), 包括null</li><li>线程不安全, 没有实现同步</li></ol><p><strong>LinkedList底层机制</strong></p><ol><li>LinkedList底层维护了一个双向链表</li><li>LinkedList中维护了两个属性first和last分别指向 首节点和尾节点</li><li>每个节点(Node对象), 里面维护了prev, next, item三个属性, 其中通过prev指向前一个, 通过next指向后一个节点, 最终实现双向链表</li><li>LinkedList的元素的添加和删除, 不是通过数组完成的, 相对来说效率较高</li></ol><p><img src="https://img-blog.csdnimg.cn/2cffd646d5654b67941485defb8864b4.png" alt="img"></p><h3 id="List集合选择"><a href="#List集合选择" class="headerlink" title="List集合选择"></a>List集合选择</h3><p><img src="https://img-blog.csdnimg.cn/cb04e2e78efc46e4ab0b6bbaf5aa8867.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h3><p>Iterator对象称为迭代器, 主要用于遍历Collection集合中的元素. 所以实现了Collection接口的集合类都有一个Iterator()方法. Iterator仅用于遍历集合, Iterator本身并不存放对象</p><p><img src="https://img-blog.csdnimg.cn/c6549b33a6df4967bc573bdd441e641f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>细节</strong></p><ol><li>当退出while循环后, 这时iterator迭代器, 指向最后的元素</li><li>如果接着指向<code>iterator.next();</code> 会报错 : NoSuchElementException</li><li>如果希望再次遍历, 需要重置迭代器</li></ol><p><strong>增强for循环</strong></p><p><img src="https://img-blog.csdnimg.cn/c973cd66c5314f2d809e4d8ac423d4b7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>也是双列集合, 但是和Map不同的是, 他的 [K, V] 中的V是一个常量present</p><ol><li>set 接口的实现类的对象(Set接口对象), 不能存放重复的元素, 可以添加一个null</li><li>set 接口对象存放数据是无序的(即添加的顺序和取出的顺序不一致)</li><li>取出的顺序的顺序虽然不是添加的顺序, 但是它是固定的</li><li>遍历<ul><li>方式一 : 使用迭代器</li><li>方式二 : 增强for</li><li>不能通过索引的方式来获取, (不能用普通的for来遍历)</li></ul></li></ol><h3 id="HashSet类"><a href="#HashSet类" class="headerlink" title="HashSet类"></a>HashSet类</h3><ol><li>HashSet实际上是HashMap</li><li>可以存放null值, 但是只能有一个null</li><li>HashSet不保证元素是有序的, 取决于hash后, 再确定索引的结果</li><li>不能有重复元素/对象</li></ol><p><strong>经典面试题</strong></p><pre class=" language-java"><code class="language-java">set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HashSet 不能添加相同的元素/对象</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//OK</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//OK</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ok</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入不了</span><span class="token comment" spellcheck="true">//为什么添加不了,通过底层机制说明</span><span class="token comment" spellcheck="true">//hash() + equals()都相同的时候放弃加入</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="HashSet底层机制"><a href="#HashSet底层机制" class="headerlink" title="HashSet底层机制"></a>HashSet底层机制</h3><ul><li>HashSet底层是HashMap</li><li>添加一个元素时, 先得到hash值  - 转成 - 索引值</li><li>找到存储数据表table, 看这个索引位置是否已经存放元素了</li><li>如果没有, 直接加入</li><li>如果有, 调用equals比较, 如果相同, 就放弃添加, 如果不相同, 则添加到最后</li><li>在Java8中, 如果一条链表的元素大于等于 TREEIFY_THRESHOLD(默认是8) 并且table的大小 大于等于 MIN_TREEIFY_CAPACITY(默认是64), 就会进行树化(红黑树), 否则仍然采用数组扩容机制</li></ul><p><strong>HashSet扩容机制</strong></p><ol><li><p>HashSet底层是HashMap, 第一次添加时, table数组扩容到16, 临界值(threshold) 是 16*加载因子(loadFactor) 是0.75  = 12</p></li><li><p>如果table数组使用到了临界值12, 就会扩容到16 * 2 = 32, 新的临界值就是32 * 0.75 =24, 依次类推</p></li><li><p><strong>注意 :</strong></p><p>当我们向HashSet增加了一个元素, Node - 加入table, 就算是增加了一个 size++</p></li></ol><h3 id="LinkedHashSet类"><a href="#LinkedHashSet类" class="headerlink" title="LinkedHashSet类"></a>LinkedHashSet类</h3><ol><li><p>LinkedHashSet 是 HashSet的子类</p></li><li><p>LinkedHashSet 底层是一个LinkedHashMap, 底层维护了一个数组 + 双向链表</p></li><li><p>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置, <strong>同时使用链表维护元素的次序, 这使得元素看起来是以插入顺序保存的</strong></p><p><img src="https://img-blog.csdnimg.cn/75db6dd19fbb4d9398dfd5141a8ef2f9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>LinkedHashSet 不允许添加重复的元素</p></li></ol><h3 id="Map接口-双列集合"><a href="#Map接口-双列集合" class="headerlink" title="Map接口(双列集合)"></a>Map接口(双列集合)</h3><ol><li>Map 与 Collection 并列存在. Map 用于保存具有映射关系的数据 : Key - Value(双列元素)</li><li>Map中的key 和 value 可以是任何引用类型的数据, 会封装到HashMap$Node对象中</li><li>Map中的 key 不允许重复, 原因和HashSet一样, 如果重复了, 会进行替换原有的值</li><li>Map中的 value 可以重复</li><li>Map的 key 可以为null, value 也可以为null, 但是注意 key 只能有一个null, value 可以有多个null</li><li>常用String类作为Map的 key</li><li>key 和 value 之间存在单向一对一关系, 即通过指定的 key 总能找到对应的 value</li><li><img src="https://img-blog.csdnimg.cn/2c56daa3fafb4b0b8ae3606ee4826597.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></li></ol><pre class=" language-Java"><code class="language-Java">//main中Map map = new HashMap();//添加元素map.put("no1","张无忌");map.put("no2","jack");//无序的//获取key对应的valuemap.get("no2");//删除map.remove("no1");//获取元素个数map.size();//判断个数是否为0map.isEmpty();//清除map.clear();//查找key是否存在containsKey("no2");</code></pre><h3 id="Map接口遍历"><a href="#Map接口遍历" class="headerlink" title="Map接口遍历"></a>Map接口遍历</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*1.containsKey : 查找键是否存在2.keySet : 获取所有的键3.entrySet : 获取所有关系k-v4.values : 获取所有的值**/</span>Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"qwe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"asd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"zxc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式一 先取出所有的key, 通过key取出对应的value</span>Set keyset <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.增强for</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object key <span class="token operator">:</span> keyset<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.迭代器</span>Iterator iterator <span class="token operator">=</span> keyset<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式二 把所有的values取出</span>Collection values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.增强for</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object value <span class="token operator">:</span> values<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.迭代器</span>Iterator iterator2 <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object value <span class="token operator">=</span> iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式三 通过EntrySet 来获取k-v</span>Set entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//EntrySet&lt;Entry&lt;K,V>></span><span class="token comment" spellcheck="true">//1.增强for</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将entry转成 Map.Entry</span>    Map<span class="token punctuation">.</span>Entry m <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.迭代器</span>Iterator iterator3 <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator3<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object next <span class="token operator">=</span> iterator3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HashMap$Node -实现-> Map.Entry (getKey, getValue)</span>    <span class="token comment" spellcheck="true">//向下转型 Map.Entry</span>    Map<span class="token punctuation">.</span>Entry m <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> entry<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a>HashMap类</h3><ul><li>小结<ul><li>HashMap是Map接口使用频率最高的实现类</li><li>HashMap是以 key - val 对的方式来存储数据(HashMap$Node类型)</li><li>key不能重复, 但是val可以重复, 允许使用null键和null值</li><li>如果添加相同的key, 则会覆盖原来的key - val, 等同于修改(key不会替换, val会替换)</li><li>与HashSet一样, 不能保证映射的顺序, 因为底层是以hash表的方式来存储</li><li>HashMap没有实现同步, 因此是线程不安全的</li><li>jdk8底层是 数组+链表+红黑树</li><li>扩容机制和 HashSet 相同</li></ul></li></ul><h3 id="HashTable类"><a href="#HashTable类" class="headerlink" title="HashTable类"></a>HashTable类</h3><ol><li>存放的元素是键值对 : 即 K-V</li><li>hashtable的键和值都不能为null, 否则会抛出NullPointerException</li><li>hashtable使用方法基本和HashMap一样</li><li>hashtable是线程安全的, HashMap是线程不安全的</li></ol><p><strong>底层 : 扩容机制</strong></p><p><img src="https://img-blog.csdnimg.cn/d6bd5a41cc834134a38518d49a87a845.png" alt="img"></p><h3 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h3><ol><li>Properties类继承自HashTable类, 并且实现了Map接口, 也是使用一种键值对的形式来保存数据</li><li>使用特点和HashTable类似</li><li>Properties <strong>还可以用于</strong>从 xxx.properties 文件中, 加载数据到Properties类对象, 并进行读取和修改</li><li>xxx.properties 文件通常作为配置文件</li></ol><h3 id="集合的选择"><a href="#集合的选择" class="headerlink" title="集合的选择"></a>集合的选择</h3><p><img src="https://img-blog.csdnimg.cn/c99efddc001740178d79ad1fcc2bf58e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="比较器Comparator"><a href="#比较器Comparator" class="headerlink" title="比较器Comparator"></a>比较器Comparator</h3><pre class=" language-java"><code class="language-java">TreeSet treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//下面调用String的comparaTo方法进行字符串大小比较</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加数据</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层机制</span><span class="token comment" spellcheck="true">//1.构造器把传入的比较器对象, 赋给了TreeSet的底层 TreeMap的属性this.comparator</span><span class="token comment" spellcheck="true">//2.在调用 treeSet.add("tom"), 在底层会执行到</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> cpr <span class="token operator">=</span> comparator<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cpr <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//cpr 就是我们的匿名内部类(对象)</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        parent <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态绑定到我们的匿名内部类(对象)compare</span>        cmp <span class="token operator">=</span> cpr<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> t<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> t<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//如果相等,即返回0,这个key就没有加入</span>            <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p> 泛型的理解和好处</p></blockquote><p>使用传统方法的问题分析</p><ol><li>不能对加入到集合ArrayList中的数据类型进行约束(不安全)</li><li>遍历的时候, 需要进行类型转换, 如果集合中的数据量较大, 对效率有影响</li></ol><h3 id="泛型的细节"><a href="#泛型的细节" class="headerlink" title="泛型的细节"></a>泛型的细节</h3><ol><li><p>泛型的作用是 : 可以在类声明时通过一个标识表示类中某个属性的类型, 或者是某个方法的返回值的类型, 或者是参数类型</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span>Person<span class="token operator">&lt;</span>String<span class="token operator">></span> stringPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    E s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//E表示 s的数据类型, 该数据类型在定义Person对象的时候指定,即在编译期间,就确定E是什么类型</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>E s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//E也可以是参数类型</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回类型使用E</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><code>interface List&lt;T&gt;{}</code>, <code>public class HashSet&lt;E&gt;{}</code></p><p>T, E 只能是引用类型</p></li><li><p>在给泛型指定具体类型后, 可以传入该类型或者子类类型</p></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如果是这样写, 泛型默认是 Object</span>ArrayList arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于ArrayList&lt;Object> arrayList = new ArrayList&lt;Object>();</span></code></pre></li></ol><h3 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h3><ol><li>A后面泛型, 我们就把 A 称为自定义泛型类</li><li>T,R,M泛型的标识符, 一般是单个大写字母</li><li>泛型标识符可以有多个</li><li>普通成员可以使用泛型 (属性, 方法)</li><li>使用泛型的数组, 不能初始化 (因为数组在 new 不能确定类型, 就无法在内存开空间)</li><li>静态方法中不能使用类的泛型(因为静态方法需要类加载, 类加载的时候不能确定类型)</li></ol><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><ol><li>接口中, 静态成员也不能使用泛型</li><li>泛型接口的类型, 在继承接口或者实现接口时确定</li><li>没有指定类型, 默认为Object</li></ol><h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><ol><li>泛型方法, 可以定义在普通类, 也可以定义在泛型类</li><li>泛型方法被调用的时候类型就会确定, 当调用方法时, 传入参数, 编译器就会确定类型</li><li><code>public void eat(E e){}</code>不是一个泛型方法, 儿是eat方法使用了类声明的泛型</li><li>泛型方法, 可以使用类声明的泛型, 也可以使用自己声明的泛型</li></ol><h3 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h3><ol><li> 泛型没有继承性</li></ol><p>   <code>List&lt;Object&gt; list = new ArrayList&lt;String&gt; ()</code>    //错误的</p><ol start="2"><li><p><code>&lt;?&gt;</code> 表示支持任意类型</p></li><li><p><code>&lt;? extends A&gt;</code>  表示支持A类及A类的子类, 规定了泛型的上限</p></li><li><p><code>&lt;? super A&gt;</code>  表示支持A类以及A类的父类, 不限于直接父类, 规定了泛型的下限</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举与异常</title>
      <link href="/2020/02/22/java-note005/"/>
      <url>/2020/02/22/java-note005/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举和注解"><a href="#枚举和注解" class="headerlink" title="枚举和注解"></a>枚举和注解</h2><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>创建Season对象有如下特点</p><ol><li>季节的值是有限的几个值(spring , summer , fall , winter)</li><li>只读, 不需要修改</li></ol><p>引出枚举类</p><h3 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//描述</span>    <span class="token comment" spellcheck="true">//1.将构造器私有化, 目的防止 直接new</span>    <span class="token comment" spellcheck="true">//2.去掉setXxx方法, 防止属性被修改</span>    <span class="token comment" spellcheck="true">//3.在Season内部, 直接创建固定的对象</span>    <span class="token comment" spellcheck="true">//4.对外暴露对象(通过为对象添加public final static修饰符)</span>        <span class="token comment" spellcheck="true">//定义四个固定的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season SPRING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"温暖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season WINTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"寒冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season FALL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"凉爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season SUMMER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"炎热"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通常对枚举对象/属性使用final + static共同修饰,实现底层优化</span></code></pre><ol><li>枚举对象名通常使用全部大写</li><li>枚举对象根据需要, 可以有多个属性</li></ol><h3 id="enum关键字"><a href="#enum关键字" class="headerlink" title="enum关键字"></a>enum关键字</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Season<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.使用关键 enum 替代 class</span>    <span class="token comment" spellcheck="true">//2. public static Season SPRING = new Season("春天","温暖"); 直接使用 SPRING("春天","温暖");   </span>    <span class="token comment" spellcheck="true">//常量名(实参列表)</span>    <span class="token comment" spellcheck="true">//3.如果有多个常量(对象), 使用 , 号间隔即可</span>    <span class="token comment" spellcheck="true">//4.如果使用enum来实现枚举, 要求将定义的常量对象,写在最前面</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"温暖"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"寒冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//描述</span><span class="token punctuation">}</span></code></pre><h3 id="enum类常用方法"><a href="#enum类常用方法" class="headerlink" title="enum类常用方法"></a>enum类常用方法</h3><p><img src="https://img-blog.csdnimg.cn/1be4aca2e9b341218477d3045a3dddca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_14,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="enum细节"><a href="#enum细节" class="headerlink" title="enum细节"></a>enum细节</h3><ol><li><p>使用enum关键字开放一个枚举类时, 默认会继承Enum类, 而且是一个final类 (使用javap 可以证明)</p></li><li><p>如果使用无参构造器 创建 枚举对象, 则实参列表和小括号都可以省略’</p></li><li><p>枚举对象必须放在枚举类的首行</p></li><li><p>使用enum关键字后, 就不能再继承其他类了, 因为enum会隐式继承Enum, 而Java是单继承机制</p></li><li><p>枚举类和普通类一样, 可以实现接口</p><p><code>enum 类名 implements 接口1, 接口2{}</code></p></li></ol><h3 id="foreach语句-for循环补充"><a href="#foreach语句-for循环补充" class="headerlink" title="foreach语句 - for循环补充"></a>foreach语句 - for循环补充</h3><p><img src="https://img-blog.csdnimg.cn/adbb1060bc58442b91665f30fe124e89.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>foreach执行流程是 : 依次从nums数组中取出数据, 赋给i, 如果取出完毕, 则退出for</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="异常体系图-体现继承和实现的关系"><a href="#异常体系图-体现继承和实现的关系" class="headerlink" title="异常体系图 (体现继承和实现的关系)"></a>异常体系图 (体现继承和实现的关系)</h3><p><img src="https://img-blog.csdnimg.cn/4a8d5f05101044ba93d54499088f03d4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><ol><li>异常分为两大类, 运行时异常和编译时异常</li><li>运行时异常, 编译器检查不出来. 一般是指编译时的逻辑错误, 是程序员应该避免其出现的异常. java.lang.RuntimeException类及它的子类都是运行时异常</li><li>对于运行时异常, 可以不作处理, 因为这类异常很普遍, 若全处理可能会对程序的可读性和运行效率产生影响</li><li>编译时异常, 是编译器要求必须处置的异常</li></ol><h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><p><strong>运行时异常</strong></p><ol><li>NullPointException空指针异常</li><li>ArithmeticException数学运算异常</li><li>ArraylndexOutBoundsException数组下标越界异常</li><li>ClassCastException类型转换异常</li><li>NumberFormatException数字格式不正确异常</li></ol><p><strong>编译时异常</strong></p><ol><li>SQLException操作数据库时, 查询表可能发生异常</li><li>IOException操作文件时, 发生异常</li><li>FileNotFoundException当操作一个不存在的文件时, 发生异常</li><li>ClassNotFoundException加载类, 而该类不存在, 异常</li><li>EOFException操作文件, 到文件末尾, 发生异常</li><li>IIIegaalArguementException参数异常</li></ol><h3 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h3><ol><li><p><code>try - catch - finally</code></p><p>程序员在代码中捕获发生的异常, 自行处理</p><p><img src="https://img-blog.csdnimg.cn/318f201f173e4c20b81ea34ba40bcf75.png" alt="img"></p></li><li><p><code>throws</code></p><p>将发生的异常抛出, 交给调用者(方法)来处理, 最顶级的处理者就是JVM      </p><p>如果程序员没有显示处理异常, 默认throws</p><p><img src="https://img-blog.csdnimg.cn/ce4605fa9c694365a8a9165966e6306c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol><h3 id="try-catch细节"><a href="#try-catch细节" class="headerlink" title="try - catch细节"></a>try - catch细节</h3><ol><li><p>如果异常发生了, 则异常发生后面的代码不会执行, 直接进入到catch块</p></li><li><p>如果异常没有发生, 则顺序执行try的代码块, 不会进入到catch</p></li><li><p>注意如果在catch中有return, 需观察finally有没有return, 如果有, 则返回的是finally语句中的值(因为finally必须执行)</p></li><li><p>可以有多个catch语句, 捕获不同的异常(进行不同的业务处理), 要求父类异常在后, 子类异常在前, 比如(Exception 在后, NullPointException在前), 如果发生异常, 只会匹配一个catch</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span><span class="token keyword">try</span><span class="token punctuation">{</span>    Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    person <span class="token operator">=</span> null<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NullPointException</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> n1 <span class="token operator">/</span> n2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ArithmeticException</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空指针异常="</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"算术异常="</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="throws细节"><a href="#throws细节" class="headerlink" title="throws细节"></a>throws细节</h3><ol><li><p>对于编译异常, 程序中必须处理, 比如<code>try - catch</code>或者<code>throws</code></p></li><li><p>对于运行时异常, 程序中如果没有处理, 默认就是<code>throws</code>的方式处理</p></li><li><p><code>throws</code>与<code>throw</code>的区别</p><ul><li><code>throws</code> 异常处理的一种方式, 位置是 : 方法声明处, 后面跟 异常类型</li><li><code>throw</code>手动生成异常对象的关键字, 位置是 : 方法体中, 后面跟 异常对象</li></ul></li><li><p>子类重写父类的方法时, 对抛出异常的规定 : 子类重写的方法, 所抛出的异常类型要么和父类抛出的异常一样, 要么为父类抛出的异常类型的子类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RuntimeException<span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NullPointException<span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//必须为父类异常的子类或者和父类异常相同</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><ul><li>定义类 : 自定义异常类名(程序员直接写) 继承Exception 或 RuntimeException</li><li>如果继承Exception, 属于编译异常</li><li>如果继承RuntimeException, 属于运行异常</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要求范围在 18~120之间, 否则抛出一个自定义异常</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里可以通过构造器,设置信息</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token string">"年龄需要在18-120之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的年龄范围正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自定义一个异常类</span><span class="token comment" spellcheck="true">//1.一般情况下,我们自定义异常是继承 RuntimeException</span><span class="token comment" spellcheck="true">//2.因为如果是运行时异常的话, 系统会自动使用默认的处理机制</span><span class="token keyword">class</span> <span class="token class-name">AgeException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">AgeException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象高级</title>
      <link href="/2020/02/20/java-note004/"/>
      <url>/2020/02/20/java-note004/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象-高级"><a href="#面向对象-高级" class="headerlink" title="面向对象(高级)"></a>面向对象(高级)</h2><h3 id="类变量-静态变量-和类方法-静态方法"><a href="#类变量-静态变量-和类方法-静态方法" class="headerlink" title="类变量(静态变量)和类方法(静态方法)"></a>类变量(静态变量)和类方法(静态方法)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个静态变量count</span>    <span class="token comment" spellcheck="true">//该变量最大的特点就是会被Child类所有的对象实例共享</span>    <span class="token comment" spellcheck="true">//类变量,可以通过类名来访问</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="类变量内存布局"><a href="#类变量内存布局" class="headerlink" title="类变量内存布局"></a>类变量内存布局</h3><p>jdk-8:</p><p><img src="https://img-blog.csdnimg.cn/17fda7ed343f40f9a1c668f1d70e6fc1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="类变量细节"><a href="#类变量细节" class="headerlink" title="类变量细节"></a>类变量细节</h3><ol><li><p>静态变量的访问修饰符的访问权限和范围和普通属性是一样的</p></li><li><p>类变量是随着类的加载而创建, 所以即使没有创建对象实例也可以访问</p></li><li><p>什么时候需要用类变量</p><p>当我们需要让某个类的所有对象都共享一个变量时, 就可以考虑使用类变量(静态变量) : 比如 : 定义学生类, 统计所有学生共交多少钱</p></li><li><p>类变量与实例变量(普通属性)区别</p><p>类变量是该类的所有对象共享的, 而实例变量是每个对象独享的</p></li><li><p>类变量的生命周期是随着类的加载开始, 随着类消亡而销毁</p></li></ol><h3 id="类方法细节"><a href="#类方法细节" class="headerlink" title="类方法细节"></a>类方法细节</h3><ol><li><p>静态方法可以访问静态属性</p></li><li><p>什么时候需要类方法</p><p>当方法中不涉及到任何和对象相关的成员, 则可以将方法设计成静态方法, 提高开发效率</p><p>比如: 工具类中的方法utils        Math类\Arrays类等等</p><p>在实际开发中, 往往会将一些通用的方法, 设计成静态方法, 这样我们不需要创建对象就可以使用, 比如打印一维数组, 冒泡排序, 完成某个计算任务等等</p></li><li><p>类方法和普通方法都是随着类的加载而加载, 将结构信息存储在方法区: 类方法中无this的参数</p></li><li><p>普通方法和对象有关, 需要通过对象名调用, 类方法可以通过类名调用, 也可以通过对象名调用</p></li><li><p>类方法中不允许使用和对象有关的关键字, 比如this和super. 普通方法可以</p></li><li><p>类方法中只能访问静态变量或静态方法</p></li><li><p>普通成员方法, 既可以访问普通变量(方法), 也可以访问静态变量(方法)    (必须遵守访问权限)</p></li></ol><h3 id="深入理解main方法"><a href="#深入理解main方法" class="headerlink" title="深入理解main方法"></a>深入理解main方法</h3><ol><li><p>main方法是虚拟机调用</p></li><li><p>java虚拟机需要调用类的main()方法, 所以该方法的访问权限必须是public</p></li><li><p>java虚拟机在执行main()方法时不必创建对象, 所以该方法必须是static</p></li><li><p>该方法接收String类型的数组参数, 该数组中保存执行java命令时传递给所运行的类的参数</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//args 是如何传入</span>        <span class="token comment" spellcheck="true">//遍历显示</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个参数="</span> <span class="token operator">+</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/944b61344229491f9de7e0dd064d77ae.png" alt="img"></p></li><li><p>java 执行的程序 参数1 参数2 参数3</p><p><img src="https://img-blog.csdnimg.cn/0b44bbf615da4983bea76d26ccad64b5.png" alt="img"></p></li><li><p>在main()方法中, 我们可以直接调用main方法所在类的静态方法或静态属性</p></li><li><p>但是不能直接访问该类中的非静态成员, 必须创建该类的一个实例对象后, 才能通过这个对象去访问类中的非静态成员</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main01</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//非静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可以直接使用name</span>        <span class="token comment" spellcheck="true">//1.静态方法可以访问本类的静态成员</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.静态方法不可以访问本类的非静态成员</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误</span>        Main01 main01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先创建一个本类的对象, 再调用n1</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> main01<span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ol><h3 id="代码块使用细节"><a href="#代码块使用细节" class="headerlink" title="代码块使用细节"></a>代码块使用细节</h3><ol><li><p>static代码块也叫静态代码块, 作用就是对类进行初始化, 而且它随着<strong>类的加载</strong>而执行, 并且<strong>只会执行一次</strong>(因为类加载只会一次). 如果是普通代码块, 每创建一次对象, 就执行</p></li><li><p>类什么时候被加载</p><ol><li>创建对象实例时(new)</li><li>创建子类对象实例时, 父类也会被加载</li><li>使用类的静态成员时(静态属性, 静态方法)</li></ol></li><li><p>普通的代码块, 在创建对象实例时, 会被隐式的调用. 被创建一次, 就会被调用一次. <strong>如果只是使用类的静态成员时, 普通代码块并不会执行</strong>(类加载与普通代码块没有关系)</p></li><li><p>创建一个对象时, 在一个类 调用顺序是 :</p><ol><li><p>调用静态代码块和静态属性初始化(注意 : 静态代码块和静态属性初始调用的优先级一样, 如果有多个静态代码块和多个静态变量初始化, 则按他们定义的顺序调用)</p><p><img src="https://img-blog.csdnimg.cn/865d90eff701405a93c4cff9430a258c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_16,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>调用普通代码块和普通属性的初始化(注意 : 普通代码块和普通属性初始化调用的优先级一样, 如果有多个普通代码块和多个普通属性初始化, 则按定义顺序调用)</p></li><li><p>调用构造器(优先级最低)</p></li></ol></li><li><p>构造器的最前面其实隐含了 super() 和 调用普通代码块,  静态相关的代码块, 属性初始化, 在类加载时, 就执行完毕了, 因此是优先于构造器和普通代码块执行的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//构造器</span>        <span class="token comment" spellcheck="true">//这里有隐藏的执行要求</span>        <span class="token comment" spellcheck="true">//1.super();//默认调用父类无参构造器</span>        <span class="token comment" spellcheck="true">//2.调用普通代码块</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>我们看一下创建一个子类时(继承关系), 他们的静态代码块, 静态属性初始化, 普通代码块, 普通属性初始化, 构造方法调用顺序如下 : </p><ol><li><p>父类的静态代码块和静态属性(优先级一样, 按定义顺序执行)</p></li><li><p>子类的静态代码块和静态属性(优先级一样, 按定义顺序执行)</p></li><li><p>父类的普通代码块和普通属性初始化(优先级一样, 按定义顺序执行)</p></li><li><p>父类的构造器</p></li><li><p>子类的普通代码块和普通属性初始化(优先级一样, 按定义顺序执行)</p></li><li><p>子类的构造器</p><p>解读 :</p><p>(1)进行类的加载</p><p>1.1 先加载父类   1.2 再加载子类</p><p>(2)创建对象</p><p>2.1从子类的构造器开始   2.2进入父类的构造器   2.3调用父类的普通代码块   2.4执行父类的构造器   2.5返回子类执行普通代码块   2.6执行子类的构造器</p></li></ol></li><li><p>静态代码块只能直接调用静态成员(静态属性和静态方法), 普通代码块可以调用任意成员</p></li></ol><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><p><strong>饿汉式</strong></p><ol><li>构造器私有化    -  防止直接 new</li><li>类的内部创建对象(该对象是static)</li><li>向外暴露一个静态的公共方法, 返回对象</li><li>代码实现</li></ol><p><strong>懒汉式</strong></p><ol><li>构造器私有化    -  防止直接 new</li><li>定义一个静态属性, 不直接new</li><li>向外暴露一个静态的公共方法, 返回对象</li><li>在静态公共方法里面进行判断此时是否创建对象, 如果没有创建对象, 那么就创建一个对象</li></ol><p><strong>饿汉式与懒汉式的区别</strong></p><ol><li>二者最主要的区别在于创建对象的时机不同 : 饿汉式是在类加载就创建了对象实例, 而懒汉式是在使用时才创建</li><li>饿汉式不存在线程安全问题, 懒汉式存在线程安全问题</li><li>饿汉式存在浪费资源的可能. 因为如果程序员一个对象都没有使用, 那么饿汉式创建的对象就浪费了, 懒汉式是使用时才创建, 就不存在这个问题.</li></ol><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>使用场景</p><ol><li>当不希望类被继承时</li><li>当不希望父类的某个方法被子类覆盖/重写</li><li>当不希望类的某个属性的值被修改(常量)</li><li>当不希望某个局部变量被修改(局部常量)</li></ol><h3 id="final细节"><a href="#final细节" class="headerlink" title="final细节"></a>final细节</h3><ol><li><p>final修饰的属性又叫常量, 一般用XX_XX_XX来命名</p></li><li><p>final修饰的属性在定义时, 必须赋初值, 并且以后不能再修改, 赋值可以在如下位置之一选择一个位置赋初值 :</p><ol><li>定义时 : <code>public final double TAX_RATE = 0.08;</code></li><li>在构造器中</li><li>在代码块中</li></ol><p><img src="https://img-blog.csdnimg.cn/bb9e3f349e234d1798bb71f9700fc7cc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>如果final修饰的属性是静态的, 则初始化的位置只能是 :</p><ol><li>定义时</li><li>静态代码块 (不能在构造器中赋值)</li></ol></li><li><p>final类不能继承, 但是可以实例化对象</p></li><li><p>如果类不是final类, 但是含有final方法, 则该方法虽然不能重写, 但是可以被继承</p></li><li><p>一般来说, 如果一个类已经是final类了, 就没有必要再将方法修饰成final方法</p></li><li><p>final不能修饰构造器</p></li><li><p>包装类, String都是final类</p></li><li><p>final 和 static 往往搭配使用, 效率更高, 不会导致类加载, 底层编译器做了优化处理</p><p><img src="https://img-blog.csdnimg.cn/4a880c11131d426d8234c9450c24aaf8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Something</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//final可以修饰形参</span>        <span class="token operator">++</span>x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,不能修改final x 的值</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以,没有改变x的值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>当父类的某些方法, 需要声明, 但是又不确定如何实现时, 可以将其声明为抽象方法, 那么这个类就是抽象类</p><p><strong>抽象类细节</strong></p><ol><li>抽象类不能被实例化</li><li>抽象类不一定要包含abstract方法. 也就是说, 抽象类可以没有abstract方法</li><li>一旦类包含了abstract方法, 则这个类必须声明为abstract</li><li>abstract只能修饰类和方法, 不能修饰属性和其他的</li><li>抽象类可以有任意成员(<strong>因为抽象类还是类</strong>), 比如 : 非抽象方法, 构造器, 静态属性等等</li><li>抽象方法不能有主体, 即不能实现</li><li>如果一个类继承了抽象类, 则它必须实现抽象类的所有抽象方法, 除非它自己也声明为abstract类</li><li>抽象方法不能使用private, final, static来修饰, 因为这些关键字都是和重写相违背的</li></ol><h3 id="模板设计模式-抽象类最佳实践"><a href="#模板设计模式-抽象类最佳实践" class="headerlink" title="模板设计模式-抽象类最佳实践"></a>模板设计模式-抽象类最佳实践</h3><p>抽象类体现的就是一种模板模式的设计, 抽象类作为多个子类的通用模板, 子类在抽象类的基础上进行扩展, 但子类总体上会保留抽象类的行为方式</p><ol><li>当功能内部一部分实现是确定的, 一部分实现是不确定的. 这时可以把不确定的部分暴露出去, 让子类去实现</li><li>编写一个抽象父类, 父类提供了多个子类的通用方法, 并把一个或多个方法留给其子类实现, 就是一种模板模式</li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><img src="https://img-blog.csdnimg.cn/74bae1f267994b6f95b010a268782f7a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="接口细节"><a href="#接口细节" class="headerlink" title="接口细节"></a>接口细节</h3><ol><li><p>接口不能实例化</p></li><li><p>接口中所有的方法是public方法, 接口中的抽象方法, 可以不用abstract修饰</p></li><li><p>一个普通类实现接口, 就必须将该接口的所有方法都实现</p></li><li><p>抽象类实现接口, 可以不用实现接口的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不会报错</span><span class="token punctuation">}</span></code></pre></li><li><p>一个类同时可以实现多个接口</p></li><li><p>接口中的属性, 只能是final的, 而且是 public static final 修饰符</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价 public static final int n1 = 10;</span><span class="token punctuation">}</span></code></pre></li><li><p>接口中属性的访问形式 : 接口名.属性名</p></li><li><p>接口不能继承其他类, 但是可以继承多个别的接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">,</span>C<span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li><li><p>接口的修饰符只能是public 和默认, 这点和类的修饰符是一样的</p></li></ol><h3 id="接口与继承的区别"><a href="#接口与继承的区别" class="headerlink" title="接口与继承的区别"></a>接口与继承的区别</h3><p>接口实现机制是对单继承机制的补充.</p><ol><li>当子类继承了父类, 就自动的拥有父类的功能</li><li>如果子类需要扩展功能, 可以通过实现接口的方式扩展</li></ol><p>接口和继承解决的问题不同</p><ol><li>继承的价值主要在于 : 解决代码的复用性和可维护性</li><li>接口的价值主要在于 : 设计, 设计好各种规范(方法),  让其他类去实现这些方法</li></ol><p>接口比继承更加灵活</p><ol><li>继承是满足 is - a 的关系, 而接口只需满足 like - a 的关系</li></ol><h3 id="接口多态特性"><a href="#接口多态特性" class="headerlink" title="接口多态特性"></a>接口多态特性</h3><ol><li><h5 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h5><p><img src="https://img-blog.csdnimg.cn/b054fa0d0bb24fa8ae76a5a63cf69b92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><h5 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span>Usb<span class="token punctuation">[</span><span class="token punctuation">]</span> usbs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Usb</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>usbs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>usbs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Camera_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*给Usb数组中, 存放Phone 和 Camera 对象, Phone类还有一个特有的方法call(),请遍历Usb数组, 如果是Phone对象, 除了调用Usb 接口定义的方法外, 还需要调用Phone特有方法Call()*/</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> usbs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态绑定..</span>    <span class="token comment" spellcheck="true">//进行类型判断, 然后进行类型的向下转型</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Phone_</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>Phone_<span class="token punctuation">)</span>usbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//接口</span><span class="token keyword">interface</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone_</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机可以打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机工作中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Camera_</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相机工作中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><h5 id="接口的多态传递现象"><a href="#接口的多态传递现象" class="headerlink" title="接口的多态传递现象"></a>接口的多态传递现象</h5><p><img src="https://img-blog.csdnimg.cn/92027b5d5cdd4126be9060f752336045.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p><strong>类的五大成员: 属性, 方法, 构造器, 代码块, 内部类</strong></p><p><img src="https://img-blog.csdnimg.cn/bf103c84540c4015b0a08d8708422064.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>内部类的分类</strong></p><p>定义在外部类局部位置上 (比如方法内)</p><ol><li>局部内部类 (有类名)</li><li>匿名内部类 (没有类名)</li></ol><p>定义在外部类的成员位置(属性或者方法)上</p><ol><li>成员内部类 (没用static修饰)</li><li>静态内部类 (使用static修饰)</li></ol><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外部类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//方法</span>        <span class="token comment" spellcheck="true">//1.局部内部类是定义在外部类的局部位置, 通常在方法</span>        <span class="token comment" spellcheck="true">//3.不能添加访问修饰符, 因为它的地位就是一个局部变量. 局部变量不能使用修饰符, 但是可以使用final修饰, 因为局部变量也可以使用final</span>        <span class="token comment" spellcheck="true">//4.作用域 : 仅仅在定义他的方法或代码块中</span>        <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//局部内部类</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员重名</span>            <span class="token comment" spellcheck="true">//2.可以直接访问外部类的所有成员, 包含私有的</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//解读: Outer01.this 本质就是外部类的对象, 即哪个对象调用了m1, Outer01.this就是哪个对象</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部类的n1="</span> <span class="token operator">+</span> Outer01<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5.外部类在方法中, 可以创建内部类的对象,然后调用方法(注意: 必须在作用域内)</span>        <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token function">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//6.外部其他类, 不能访问局部内部类</span><span class="token comment" spellcheck="true">//7.如果外部类和局部内部类的成员重名时, 默认遵循就近原则, 如果想访问外部类的成员, 则可以使用(外部类名.this.成员)去访问</span></code></pre><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类是定义在外部类的局部位置, 比如方法中, 并且没有类名</p><ol><li>本质是类</li><li>是一个内部类</li><li>该类没有名字</li><li>同时还是一个对象</li></ol><p>//基于接口的匿名内部类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//需求: 想使用IA接口, 并创建对象</span><span class="token comment" spellcheck="true">//传统方式: 是写一个类(Dog类), 实现该接口, 并创建对象</span><span class="token comment" spellcheck="true">//但是如果我们 Dog只是使用一次, 后面不再使用</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//使用匿名内部类</span><span class="token comment" spellcheck="true">//此时 Dog的编译类型是 IA, 运行类型是匿名内部类</span>IA Dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗狗叫唤..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意分号</span></code></pre><p>//基于类的匿名内部类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//father 编译类型 Father, 运行类型是匿名内部类</span><span class="token comment" spellcheck="true">//注意("jack")参数列表会传递给 构造器</span>Father father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fatehr</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类重写了test方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>father<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果此时father是一个抽象类</span><span class="token comment" spellcheck="true">//那么必须要是实现抽象类中的抽象方法</span></code></pre><h3 id="匿名内部类的细节"><a href="#匿名内部类的细节" class="headerlink" title="匿名内部类的细节"></a>匿名内部类的细节</h3><ol><li><p>两种调用方法, 匿名内部类既是一个类的定义, 同时它本身也是一个对象</p><p><img src="https://img-blog.csdnimg.cn/e24e58a0c759419fb520697ce18431a5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>可以直接访问外部类的所有成员, 包含私有的</p></li><li><p>不能添加访问修饰符, 因为它的地位就是一个局部变量</p></li><li><p>作用域 : 仅仅在定义它的方法或代码块中</p></li><li><p><strong>外部其他类不能访问匿名内部类</strong></p></li><li><p>如果外部类和匿名内部类的成员重名时,  默认遵循就近原则,  如果想访问外部类的成员,  则可以使用(外部类名.this.成员)去访问</p></li></ol><h3 id="匿名内部类实践-当作实参直接传递"><a href="#匿名内部类实践-当作实参直接传递" class="headerlink" title="匿名内部类实践-当作实参直接传递"></a>匿名内部类实践-当作实参直接传递</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span>IL il<span class="token punctuation">)</span><span class="token punctuation">{</span>    il<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//当作实参直接传递  </span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IL</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外部类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//成员内部类, 是定义在外部内的成员位置上</span>    <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//成员内部类</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可以直接访问外部类的所有成员, 包含私有的</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1 ="</span> <span class="token operator">+</span> n1 <span class="token operator">+</span> <span class="token string">"name ="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//写方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用成员内部类</span>        Inner01 inner01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner01<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.可以添加任意访问修饰符(public, protected, 默认, private) 因为它的地位就是一个成员</span><span class="token comment" spellcheck="true">//2.成员内部类 - 访问 - 外部类成员</span><span class="token comment" spellcheck="true">//    访问方式 : 直接访问</span><span class="token comment" spellcheck="true">//3.外部类 - 访问 - 成员内部类</span><span class="token comment" spellcheck="true">//  访问方式 : 创建对象,再访问</span><span class="token comment" spellcheck="true">//4.如果外部类和内部类的成员重名时, 默认遵循就近原则, 如果想访问外部类的成员, 则可以使用(外部类名.this.成员)去访问</span></code></pre><p><strong>外部其他类 - 访问 - 成员内部类  //看别人博客</strong></p><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>使用static修饰, 定义在外部类的成员位置</p><ol><li><p>可以直接访问外部类的所有静态成员, 包含私有的, 但不能直接访问非静态成员</p></li><li><p>可以添加任意访问修饰符 (public, protected, 默认, private), 因为它的地位就是一个成员</p></li><li><p>静态内部类 - 访问 - 外部类</p><p>访问方式 : 直接访问所有静态成员</p></li><li><p>外部类 - 访问 - 静态内部类 </p><p>访问方式 : 创建对象, 再访问</p></li><li><h5 id="外部其他类-访问-静态内部类-看别人博客"><a href="#外部其他类-访问-静态内部类-看别人博客" class="headerlink" title="外部其他类 -  访问 - 静态内部类 // 看别人博客"></a>外部其他类 -  访问 - 静态内部类 // 看别人博客</h5></li><li><p>如果外部类和静态内部类的成员重名时,   默认遵循就近原则,   如果想访问外部类的成员,   则可以使用(外部类名.成员)去访问</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象中级</title>
      <link href="/2020/02/17/java-note003/"/>
      <url>/2020/02/17/java-note003/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象-中级"><a href="#面向对象-中级" class="headerlink" title="面向对象(中级)"></a>面向对象(中级)</h2><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><table><thead><tr><th align="center">作用域</th><th align="center">当前类</th><th align="center">同一包</th><th align="center">其他包的子孙类</th><th align="center">其他包的类</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">friendly</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><p><strong>访问修饰符细节</strong></p><p>只有默认的(没有修饰符)和public才能修饰类</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ol><li><p>将属性进行私有化private</p></li><li><p>提供一个公共的(public)set的方法, 用于对属性判断并赋值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setXxx</span><span class="token punctuation">(</span>类型 参数名<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Xxx表示某个属性</span>    <span class="token comment" spellcheck="true">//加入数据验证的业务逻辑</span>    属性 <span class="token operator">=</span> 参数名<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>提供一个公共的(public)get的方法, 用于获取属性的值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> 数据类型 <span class="token function">getXxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//权限判断, Xxx某个属性</span>    <span class="token keyword">return</span> xx<span class="token punctuation">}</span></code></pre></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><img src="https://img-blog.csdnimg.cn/6700f4add1374946b28884f99c05fe48.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="继承细节"><a href="#继承细节" class="headerlink" title="继承细节"></a>继承细节</h3><ol><li><p>子类继承了所有的属性和方法, 但是<strong>私有属性和方法不能在子类直接访问</strong>, 要通过父类提供公共的方法去访问</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//父类Base</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> n1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过父类提供一个public的方法, 返回了n2</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getN2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> n2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//通过父类提供的public的方法来调用test200()</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callTest200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//子类Sub</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//要通过父类提供公共的方法去访问n2</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n4="</span> <span class="token operator">+</span> <span class="token function">getN2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callTest200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>子类必须调用父类的构造器</strong>, 完成父类的初始化</p></li><li><p>当创建子类对象时, 不管使用子类的哪个构造器, 默认情况下总会去调用父类的无参构造器, 如果父类没有提供无参构造器, 则必须在子类的构造器中用super去指定使用父类的哪个构造器完成对父类的初始化工作</p></li><li><p>如果希望指定去调用父类的某个构造器, 则显式的调用一下 : <code>super(参数列表)</code></p><p>1.调用父类的无参构造器, 如下 或者 什么都不写, <strong>默认就是调用<code>super()</code></strong></p><p><code>super();</code>//父类的无参构造器</p><p>2.调用父类的 <code>Base(Sting name)</code>构造器</p><p><code>super("jack");</code></p></li><li><p>super在使用时, 必须放在构造器的第一行(super只能在构造器中使用)</p></li><li><p><code>super()</code>和<code>this()</code>都只能放在构造器的第一行,因此这两个方法不能共存在一个构造器中</p></li><li><p>父类构造器的调用不限于直接父类! 将一直往上追溯直到Object类</p></li></ol><h3 id="继承的本质"><a href="#继承的本质" class="headerlink" title="继承的本质"></a>继承的本质</h3><p>创建子类的过程中    <code>Son son = new Son();</code></p><p>是先加载类,  <code>1.Object  - 2.GrandPa - 3.Father - 4.Son</code></p><p><img src="https://img-blog.csdnimg.cn/7e2cc51f5a484dffac5b326f6849a651.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>注意此时name与父类和爷爷类的属性名字相同, 出现这种情况下时,按以下规则 :</p><p><img src="https://img-blog.csdnimg.cn/d73b7db3004e4a9ab361ff13ffc337d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>如果父类属性为私有属性, 那么还是需要通过公共的方法去访问</p><p><img src="https://img-blog.csdnimg.cn/db4dfdc47f9b4f12bd8a75ae90a54228.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>如果此时父类的age属性是私有的, 而爷爷类的age属性是public的话, 可以直接用 <code>son.age</code>来访问吗?</p><p>答案是<strong>不可以</strong>!!!    它是一层一层往上找的, 如果在父类遇到私有的age属性, 就会直接报错, 无法绕过父类去访问爷爷类的age属性(可以通过爷爷类的public方法访问)</p><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>super代表父类的引用, 用于访问父类的属性, 方法, 构造器</p><ol><li><p>访问父类的属性, 但不能访问父类的private属性</p><p><code>super.属性名</code></p></li><li><p>访问父类的方法, 不能访问父类的private方法</p><p><code>super.方法名</code></p></li><li><p>访问父类的构造器</p><p><code>super(参数列表)</code></p></li></ol><h3 id="super细节"><a href="#super细节" class="headerlink" title="super细节"></a>super细节</h3><ol><li><p>当子类中有和父类中的成员(属性和方法)重名时, 为了访问父类的成员, 必须通过super. 如果没有重名, 使用super, this, 直接访问是一样的效果</p><p><img src="https://img-blog.csdnimg.cn/38ead28502f74f99b7bacbdfb2e4903c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/d293677a9d814a258576acb7588f5419.png" alt="img"></p></li><li><p>super的访问不限于直接父类, 如果爷爷类和本类中有同名的成员, 也可以使用super去访问爷爷类的成员, 如果多个基类中都有同名的成员, 使用super访问遵循就近原则</p></li><li><p>调用父类构造器的好处 :父类的属性由父类初始化, 子类的属性由子类初始化</p></li></ol><p><strong>super和this的比较</strong></p><p><img src="https://img-blog.csdnimg.cn/2bae6f49712d444494fadb83cb49c08a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>方法重写也叫方法覆盖</p><p><img src="https://img-blog.csdnimg.cn/c5749e8c90694a76adfb2a4fbb67198f.png" alt="img"></p><h3 id="方法重写细节"><a href="#方法重写细节" class="headerlink" title="方法重写细节"></a>方法重写细节</h3><ol><li>子类的方法的<strong>形参列表</strong>, <strong>方法名称</strong>, 要和父类方法的<strong>形参列表</strong>, <strong>方法名称</strong>完全一样</li><li>子类的返回类型和父类方法返回类型一样, 或者是父类返回类型的子类   比如 : 父类 返回类型是 Object, 子类方法返回类型是 String</li><li>子类方法不能缩小父类方法的访问权限</li></ol><p>重写与重载的区别</p><p><img src="https://img-blog.csdnimg.cn/bfcb9378b98a41cf99924e6d5f8151e8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li><p>方法重载和方法的重写体现多态</p></li><li><p>对象的多态</p><ol><li><p>一句话的编译类型和运行类型可以不一致</p><pre class=" language-java"><code class="language-java">Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译类型(名义上)是Animal,运行类型(实际上)是Dog</span></code></pre></li><li><p>编译类型在定义对象时, 就确定了, 不能改变</p></li><li><p>运行类型是可以变化的</p></li><li><p>编译类型看定义时 =号 的左边, 运行类型看 =号 的右边</p></li></ol></li></ol><h3 id="多态的细节"><a href="#多态的细节" class="headerlink" title="多态的细节"></a>多态的细节</h3><ol><li><p>向上转型</p><p>多态的前提是 : 两个对象(类)存在继承关系</p><p>多态的向上转型</p><ol><li><p>本质: 父类的引用指向了子类的对象</p></li><li><p>语法: 父类类型 引用名 = new 子类类型();</p></li><li><p>特点: 编译类型看左边, 运行类型看右边.</p><p>可以调用父类中的所有成员(需遵守访问权限)</p><p>不能调用子类中特有成员</p><p>最终运行效果看子类的具体实现</p><p>(<strong>编译类型是编译器javac执行的, 运行类型是java执行的</strong>)</p></li></ol><p><img src="https://img-blog.csdnimg.cn/c8b22ff263214e1292b39104b164ed0a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>向下转型</p><ol><li><p>语法: 子类类型 引用名 = (子类类型) 父类引用</p></li><li><p>只能强转父类的引用, 不能强转父类的对象</p></li><li><p>要求父类的引用必须指向的是当前目标类型的对象</p></li><li><p>当向下转型后, 可以调用子类类型中所有 的成员</p><p><img src="https://img-blog.csdnimg.cn/80dc64531fb94e63b178b4bb3b5a28e1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol></li></ol><h3 id="属性重写问题"><a href="#属性重写问题" class="headerlink" title="属性重写问题"></a>属性重写问题</h3><ol><li>属性没有重写之说!!! 属性的值看<strong>编译类型</strong></li><li><code>instanceOf</code>比较操作符, 用于判断对象的<strong>运行类型</strong>是否为XX类型或者XX类型的子类型</li></ol><h3 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h3><ol><li>当<strong>调用对象方法</strong>的时候, 该方法会和该对象的内存地址/<strong>运行类型绑定</strong></li><li>当<strong>调用对象属性</strong>时, 没有动态绑定机制, 哪里声明, 哪里使用</li></ol><h3 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h3><p>//创建一个Person类, Student和Teacher继承于它</p><p>//2个Student 对象和2个Teacher 对象, 统一放在数组中, 并调用每个say方法</p><p><img src="https://img-blog.csdnimg.cn/58606885ca38402487315f7710090902.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>//如何调用子类特有的方法, 比如Teacher有一个teach, Student有一个study , 怎么调用</p><p><img src="https://img-blog.csdnimg.cn/056a97c6bca74ac88a7cd59779d69b28.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h3><p>方法定义的形参类型为父类类型, 实参类型允许为子类类型</p><h3 id="Object类详解"><a href="#Object类详解" class="headerlink" title="Object类详解"></a>Object类详解</h3><h5 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h5><p>== 与 equals的对比</p><ol><li>== 是一个比较运算符, 既可以判断基本类型, 又可以判断引用类型</li><li>如果判断基本类型, 判断的是值是否相等</li><li>如果判断引用类型, 判断的是地址是否相等, 即判定是不是同一个对象</li></ol><p>equals方法 : 是Object类中的方法, 只能判断引用类型</p><p>默认判断的是地址是否相等, 子类中往往重写该方法, 用于判断内容是否相等. 比如 Integer, String…</p><h5 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h5><pre class=" language-java"><code class="language-java">AA aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AA aa2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AA aa3 <span class="token operator">=</span> aa<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa.hashCode = "</span> <span class="token operator">+</span> aa<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa2.hashCode = "</span> <span class="token operator">+</span> aa2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa3.hashCode = "</span> <span class="token operator">+</span> aa3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>提高具有哈希结构的容器的效率</li><li>两个引用, 如果指向的是同一个对象, 则哈希值肯定是一样的</li><li>两个引用, 如果指向的是不同对象, 则哈希值是不一样的</li><li>哈希值主要根据地址号来的,  但是不能完全将哈希值等价于地址</li></ol><h5 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h5><ol><li>默认返回 : 全类名 + @ + 哈希值的十六进制</li><li>子类往往重写toString方法, 用于返回对象的属性信息</li><li>重写toString方法, 打印对象或拼接对象, 都会自动调用该对象的toString形式(快捷键)</li><li>当直接输出一个对象时, toString方法会被默认的调用</li></ol><h5 id="Finalize方法"><a href="#Finalize方法" class="headerlink" title="Finalize方法"></a>Finalize方法</h5><ol><li>当对象被回收时, 系统自动调用该对象的finalize方法. 子类可以重写该方法, 做一些释放资源的操作</li><li>什么时候被回收 : 当某个对象没有任何引用时, 则jvm就认为这个对象是一个垃圾对象, 就会使用垃圾回收机制来销毁该对象, 在销毁该对象前, 会先调用finalize方法</li><li>垃圾回收机制的调用, 是由系统来决定, 也可以通过<code>System.gc()</code>来主动触发垃圾回收机制</li></ol><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>在断点调试过程中, 是运行状态, 是以对象的运行类型来执行的.</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象初级</title>
      <link href="/2020/01/20/java-note002/"/>
      <url>/2020/01/20/java-note002/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="对象在内存中的存在形式"><a href="#对象在内存中的存在形式" class="headerlink" title="对象在内存中的存在形式"></a>对象在内存中的存在形式</h3><p>对象也是一个引用数据类型.</p><p><img src="https://img-blog.csdnimg.cn/47cbef86fd4446b0ae1ddcf16721d22f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="对象创建的流程分析"><a href="#对象创建的流程分析" class="headerlink" title="对象创建的流程分析"></a>对象创建的流程分析</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//main中</span>Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>在方法区中加载Person类信息(Person.class), 只会加载一次</li><li>在堆中分配空间(地址)</li><li>完成对象的初始化[3.1 默认初始化 age = 0 name = null  3.2 显式初始化 age = 90 name = null  3.3 构造器的初始化 age = 20 name = jack(字符串,堆中的对象的name地址指向在常量池中jack)]</li><li>对象在堆中的地址, 返回给p(p是对象名, 也可以理解成是对象的引用)</li></ol><h3 id="对象分配机制"><a href="#对象分配机制" class="headerlink" title="对象分配机制"></a>对象分配机制</h3><pre class=" language-java"><code class="language-java">Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>Person p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把p1赋给了p2 , 让p2指向p1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p2,age是什么?</span></code></pre><p><img src="https://img-blog.csdnimg.cn/0b6566b84499482f85e0f2918b12f2c2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//公有类</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Test类的成员方法</span>        count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个count就是属性 改成10</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count1="</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Test类的成员方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count2="</span> <span class="token operator">+</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这是Test类的main方法, 任何一个类,都可以有main</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. new Test() 是匿名对象, 匿名对象使用后, 就不能再使用(一次性)</span>        <span class="token comment" spellcheck="true">//2. new Test().count1() 创建好匿名对象后, 就调用count1()</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Java内存的结构分析"><a href="#Java内存的结构分析" class="headerlink" title="Java内存的结构分析:"></a>Java内存的结构分析:</h3><ol><li>栈: 一般存放基本数据类型(局部类型)</li><li>堆: 存放对象</li><li>方法区: 常量池(常量, 比如字符串), 类加载信息</li></ol><p><img src="https://img-blog.csdnimg.cn/b8de488856e447fdbad03ed281b2f2d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="属性-成员变量-字段-细节"><a href="#属性-成员变量-字段-细节" class="headerlink" title="属性(成员变量\字段)细节"></a>属性(成员变量\字段)细节</h3><ol><li>属性的定义语法变量, 示例 : 访问修饰符 属性类型 属性名;</li><li>属性的定义类型可以为任意类型, 可以是基本类型或引用类型.</li><li>属性如果不赋值, 有默认值. 和数组一样.  String null / int 0 / short 0 / byte 0 / long 0 / float 0.0 double 0.0 / char \u0000 / boolean false</li></ol><h3 id="方法调用机制"><a href="#方法调用机制" class="headerlink" title="方法调用机制"></a>方法调用机制</h3><p>当返回后, <code>getSum</code>栈就被释放(销毁)了</p><p><img src="https://img-blog.csdnimg.cn/a56f21648e8a43f788f22769c046b846.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><ol><li>当程序执行到方法时, 就会开辟一个独立的空间(栈空间)</li><li>当方法执行完毕, 或者执行到return语句时, 就会返回</li><li>返回到调用方法的地方</li><li>返回后, 继续执行方法后面的代码</li><li>当main方法(栈)执行完毕, 整个程序退出</li><li><strong>基本数据类型, 传递的是值(值拷贝), 形参的任何改变不影响实参</strong>(方法传参机制)</li><li><strong>引用数据类型, 传递的是地址(传递也是值, 但是值是地址), 形参的改变会影响到实参</strong>(方法传参机制)</li></ol><h3 id="方法使用细节"><a href="#方法使用细节" class="headerlink" title="方法使用细节"></a>方法使用细节</h3><ol><li><p>一个方法<strong>最多有一个</strong>返回值, [ 如果要返回多个结果 , 返回数组 ]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span><span class="token keyword">int</span> n2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    resArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>    resArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">;</span>    <span class="token keyword">return</span> resArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>返回类型可以是任意类型, 包括基本类型或引用类型</p></li><li><p>如果方法要求有<strong>返回数据类型</strong>, 则方法体中最后的执行语句必须为 return 值, 而且要求返回值类型必须和 return 值类型一致或兼容(自动转换)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                               <span class="token comment" spellcheck="true">//错误,缺少返回语句</span><span class="token punctuation">}</span></code></pre></li><li><p>如果方法是void, 则方法体中可以没有return语句, 或者 只写return(不能有返回值)</p></li><li><p>同一个类中的方法, 直接调用</p></li><li><p>跨类中方法A类调用B类方法, 需要通过对象名调用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类中的 m1()被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建对象</span>        b<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类中的 m1()继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类中的 hi()被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="形参列表的细节"><a href="#形参列表的细节" class="headerlink" title="形参列表的细节"></a>形参列表的细节</h3><ol><li>一个方法可以有0个参数, 也可以有多个参数, 中间用逗号隔开</li><li>参数类型可以是任意类型, 包括基本类型或引用类型</li><li>调用带参数的方法时, 一定对应着参数列表相同类型或者兼容类型(低精度向高精度) 的参数</li><li>方法定义时的参数称为形式参数, 方法调用时的传入参数称为实际参数</li><li>实参和形参的类型要一致或者兼容, 个数, 顺序必须一致</li></ol><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>java允许方法名相同, 但是要求<strong>形参列表不同</strong></p><p>返回类型没有要求</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>java允许将同一个类中<strong>多个同名同功能</strong>但参数个数不同的方法, 封装成一个方法, 通过可变参数实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HspMethod</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//计算2个数的和, 3个数的和, 4.....</span>    <span class="token comment" spellcheck="true">//可以使用方法的重载(但是繁琐)</span>        <span class="token comment" spellcheck="true">//使用可变参数封装成方法</span>    <span class="token comment" spellcheck="true">//1.   int...表示接收的是可变参数, 类型是int, 即可以接收多个int(0 - 多)</span>    <span class="token comment" spellcheck="true">//2. 使用可变参数时, 可以当作数组来使用 即nums可以当作数组</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收的参数的个数:"</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//遍历求和</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="可变参数的细节"><a href="#可变参数的细节" class="headerlink" title="可变参数的细节"></a>可变参数的细节</h6><ol><li><p>可变参数的实参可以是数组</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>T t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ti<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度="</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>可变参数的本质是数组</p></li><li><p>可变参数可以和普通类型的参数一起放在形参列表, 但必须保证可变参数放在最后</p></li><li><p>一个形参列表只能出现一个可变参数</p></li></ol><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>局部变量与全局变量(属性变量)</p><p>全局变量可以不赋值, 直接使用, 因为有默认值, 局部变量必须赋值后才能使用, 因为没有默认值</p><h6 id="作用域细节"><a href="#作用域细节" class="headerlink" title="作用域细节"></a>作用域细节</h6><ol><li><p>属性和局部变量可以重名, 访问时遵循就近原则</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//就近原则</span>        String name <span class="token operator">=</span> <span class="token string">"king"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出的是king</span></code></pre></li><li><p>属性生命周期较长, 伴随着对象的创建而创建,伴随着对象的销毁而销毁. 局部变量,生命周期较短, 伴随着它的代码块的执行而创建, 伴随着代码块的结束而销毁. 即在一次方法调用过程中.</p></li><li><p>作用域范围不一样</p><p>全局变量 : 被本类使用或者其他类使用(需要通过对象的调用)</p><p>局部变量 : 只能被本类中对应的方法中使用</p></li><li><p>修饰符的不同</p><p>全局变量 : 可以加修饰符</p><p>局部变量 : 不能加修饰符</p></li></ol><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 方法名<span class="token punctuation">(</span>和类名保持一致<span class="token punctuation">)</span> <span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    方法体<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//构造器没有返回值</span><span class="token comment" spellcheck="true">//主要作用是初始化</span></code></pre><h6 id="构造器细节"><a href="#构造器细节" class="headerlink" title="构造器细节"></a>构造器细节</h6><ol><li><p>一个类可以定义多个构造器, 即构造器的重载</p></li><li><p>如果程序员没有定义构造器, 系统会自动给类生成一个默认无参构造器(也叫默认构造器), 比如 <code>Dog(){}</code></p></li><li><p>一旦定义了自己的构造器, 默认的构造器就覆盖了, 就不能再使用默认的无参构造器, 除非显式的定义一下, 即<code>Dog(){}</code></p><pre class=" language-java"><code class="language-java">Dog dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用的是默认的无参构造器</span></code></pre></li></ol><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//this.name 就是当前对象的属性name</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//this.age 就是当前对象的属性age</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="深入理解this"><a href="#深入理解this" class="headerlink" title="深入理解this"></a>深入理解this</h6><p><img src="https://img-blog.csdnimg.cn/7f8ed585f0384da88a736e8c191a247a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>虚拟机会给每个对象分配this, 代表当前对象</p><p>哪个对象调用, this就代表哪个对象</p><h3 id="this细节"><a href="#this细节" class="headerlink" title="this细节"></a>this细节</h3><ol><li><p>this关键字可以用来访问本类的属性, 方法, 构造器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//传统方式(按照的是就近原则访问属性,但是如果在方法中有局部变量,那么这个name就是局部变量,不是属性)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"num="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//也可以使用this访问属性(准确定位到属性)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"num="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>this用于区分当前类的属性和局部变量</p></li><li><p>访问成员方法的语法 : this.方法名(参数列表)</p></li><li><p>访问构造器语法 : this(参数列表)    <strong>只能在构造器中使用(即只能在构造器中访问本类另外一个构造器)</strong>   如果有访问构造器语法 : this(参数列表); <em><strong>必须放在第一条语句</strong></em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里去访问 T(String name, int age) 构造器</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"T() 构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">T</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"T(String name, int age) 构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>this不能在类定义的外部使用, 只能在类定义的方法中使用</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2020/01/15/java-note001/"/>
      <url>/2020/01/15/java-note001/</url>
      
        <content type="html"><![CDATA[<h2 id="数组-排序"><a href="#数组-排序" class="headerlink" title="数组\排序"></a>数组\排序</h2><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>数据类型[] 数组名 = {元素值, 元素值, …}</p><p><code>int[] a = {1,2,3,4...};</code> </p><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>数据类型[] 数组名 = new 数据类型[大小]</p><p><code>int[] a = new int[3];</code></p><hr><p><code>double[] a;</code>先声明数组</p><p><code>a = new double[5];</code>再分配内存空间</p><h3 id="数组细节"><a href="#数组细节" class="headerlink" title="数组细节"></a>数组细节</h3><ol><li><p>数组是多个相同类型数据的组合, 实现对这些数据的统一管理.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//double -> int 错误  需要满足自动转换</span></code></pre></li><li><p>数组中的元素可以是任何数据类型, 包括基本类型和引用类型, 但是不能混用</p></li><li><p>数组创建后, 如果没有赋值, 有默认的值. String null / int 0 / short 0 / byte 0 / long 0 / float 0.0 double 0.0 / char \u0000 / boolean false</p></li><li><p>数组的下标是从0开始的.</p></li><li><p>注意越界</p></li><li><p>数组属于引用类型, 数组型数据是对象</p></li></ol><h3 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h3><ol><li><p>基本数据类型赋值, 赋值方式为值拷贝(值传递), 不会相互影响.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//n2的变化, 不会影响到n1的值</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> n1<span class="token punctuation">;</span>n2 <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出n1的值为 10</span></code></pre></li><li><p>数组在默认情况下是引用传递, 赋的值是地址, 赋值方式为引用赋值(地址拷贝)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//是一个地址, arr2变化会影响到arr1</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出arr1的值为 10, 2, 3</span></code></pre></li></ol><h3 id="值传递-值拷贝-和-引用传递-地址拷贝-的区别"><a href="#值传递-值拷贝-和-引用传递-地址拷贝-的区别" class="headerlink" title="值传递(值拷贝) 和 引用传递(地址拷贝)的区别"></a><strong><u>值传递(值拷贝) 和 引用传递(地址拷贝)的区别</u></strong></h3><p><img src="https://img-blog.csdnimg.cn/50310e663fa54f9c865451b2d132cdaf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>在内存里面只要分配了一个数据空间, 一定会对应一个地址.</p><p><img src="https://img-blog.csdnimg.cn/65cec621a9144fcca7e184b8b854ddc5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>⬇</p><p><img src="https://img-blog.csdnimg.cn/40586b7e294f41ae8ec65f51d7b431d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="数组拷贝-内容复制"><a href="#数组拷贝-内容复制" class="headerlink" title="数组拷贝(内容复制)"></a>数组拷贝(内容复制)</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将 int[] arr1 = {10,20,30}; 拷贝到 arr2数组, 要求数据空间是独立的.</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个新的数组arr2, 开辟新的空间, 大小和arr1一样</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历 arr1 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式一:</span><span class="token comment" spellcheck="true">//1.把arr[0] 和 arr[5] 进行交换</span><span class="token comment" spellcheck="true">//2.把arr[1] 和 arr[4] 进行交换</span><span class="token comment" spellcheck="true">//3.把arr[2] 和 arr[3] 进行交换</span><span class="token comment" spellcheck="true">//4.一共要交换 3 次 = arr.length / 2</span><span class="token comment" spellcheck="true">//5.每次交换时, 对应的下标是arr[i] 和 arr[arr.length - 1 - i]</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式二</span><span class="token comment" spellcheck="true">//逆序赋值法</span><span class="token comment" spellcheck="true">//1.创建一个新的数组 arr2</span><span class="token comment" spellcheck="true">//2.逆序遍历arr, 将每个元素拷贝到 arr2的元素中</span><span class="token comment" spellcheck="true">//3.将arr 指向 arr2</span><span class="token comment" spellcheck="true">//注意 : 让 arr 指向 arr2数据空间, 此时 arr原来的数据空间就没有变量引用, 会被当成垃圾, 销毁</span></code></pre><h3 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h3><p>数组不能扩容, 必须新定义一个新的数组, 把原先的数组内容遍历给新的数组中, 再赋新的元素.</p><h3 id="冒泡排序-从小到大"><a href="#冒泡排序-从小到大" class="headerlink" title="冒泡排序(从小到大)"></a>冒泡排序(从小到大)</h3><ol><li>每一轮排序可以确定一个数的位置, 比如第一轮排序确定最大数, 第二轮排序确定第二大的数的位置, 以此类推</li><li>当进行比较时, 如果前面的数大于后面的数, 就交换</li><li>每轮比较在减少 例如: 4-&gt;3-&gt;2-&gt;1</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于辅助交换的变量</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==第一轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n==第二轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n==第三轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n==第四轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>合并代码<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//外层循环是4次</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//4次比较-3次-2次-1次</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p><code>int[] [] arr = {{0,0,0},{1,1,1},{2,2,2}};</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二维数组的每个元素是一维数组,所以要得到每个一维数组的值,还需要再次遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遍历二维数组的每个元素</span>    <span class="token comment" spellcheck="true">//1.arr[i] 表示 二维数组的i+1个元素  比如arr[0] : 二维数组的第一个元素</span>    <span class="token comment" spellcheck="true">//2.arr[i].length 得到对应的每个一维数组的长度</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>int[] [] arr = new int [2][3]</code>      二维数组内存形式 :</p><p><img src="https://img-blog.csdnimg.cn/53d52bacc1534fc89f01570fe32ab5a9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="动态初始化-列数不确定"><a href="#动态初始化-列数不确定" class="headerlink" title="动态初始化-列数不确定"></a>动态初始化-列数不确定</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*i = 0: 1i = 1: 2 2i = 2: 3 3 3一个有三个一维数组, 每一个一维数组的元素是不一样的*/</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建二维数组,但是只是确定一维数组的个数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遍历arr每个一维数组</span>    <span class="token comment" spellcheck="true">//给每个一维数组开空间</span>    <span class="token comment" spellcheck="true">//如果没有给一维数组 new, 那么arr[i]就是null</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历一维数组, 并给一维数组的每个元素赋值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本数据类型与运算符</title>
      <link href="/2019/12/22/java-note-000/"/>
      <url>/2019/12/22/java-note-000/</url>
      
        <content type="html"><![CDATA[<h2 id="开发细节"><a href="#开发细节" class="headerlink" title="开发细节"></a>开发细节</h2><ol><li><p>一个源文件最多只能有一个public类,但其他类不受限制.</p></li><li><p>如果源文件包含一个public类,则文件名必须按该类名命名.</p></li><li><p>一个源文件中最多只能有一个public类.其他类的个数不限,也可以将main方法写在非public类中,然后指定运行非public类,这样入口方法就是非public的main方法.</p></li><li><p>文档注释：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//javadoc标签</span><span class="token comment" spellcheck="true">/**     * @author    * @version*/</span><span class="token comment" spellcheck="true">//命令行        </span><span class="token comment" spellcheck="true">//javadoc -d 文件夹名 -xx -yy Demo.java</span>javadoc <span class="token operator">-</span>d d<span class="token operator">:</span>\\temp <span class="token operator">-</span>author <span class="token operator">-</span>version Demo<span class="token punctuation">.</span>java</code></pre></li><li><p>代码规范：</p><ol><li>类、方法的注释，要以javadoc的方式来写。</li><li>非Java Doc的注释，往往是给代码的维护者看的，着重告诉读者为什么这样写，如何修改，注意什么问题等。</li><li>运用tab操作，实现缩进，默认整体向右边移动，用shift+tab整体向左移</li><li>运算符和 = 两边习惯性各加一个空格。</li><li>源文件使用utf-8编码。</li></ol></li></ol><p><img src="https://img-blog.csdnimg.cn/2086b3b4f96943cfb4f88817f8852d92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h2 id="DOS原理"><a href="#DOS原理" class="headerlink" title="DOS原理"></a>DOS原理</h2><p>Dos系统：</p><ol><li>接受指令</li><li>解析指令</li><li>执行指令</li></ol><p>相对路径：从当前目录开始定位，形成的一个路径</p><p>绝对路径：就是完整路径，从顶级目录例如D:\开始定位，形成的路径</p><p>常用dos命令：</p><ol><li><p>查看当前目录是有什么内容：dir</p><p><code>dir </code>       <code> dir d:\abc\test100</code></p></li><li><p>切换到其他盘下：cd</p><p><code>cd /D d:</code>切换到D盘</p></li><li><p>切换到当前盘的其他目录下（使用绝对路径和相对路径演示）</p><p><code>cd d:\abc2\test200</code>   <code>cd ..\..\abc2\test200</code></p></li><li><p>切换到上一级：<code>cd ..</code></p></li><li><p>切换到根目录：<code>cd\</code></p></li><li><p>查看指定的目录下所有的子级目录：<code>tree</code></p></li><li><p>清屏：<code>cls</code></p></li><li><p>退出：<code>exit</code></p></li><li><pre class=" language-java"><code class="language-java">md<span class="token punctuation">[</span>创建目录<span class="token punctuation">]</span>，rd<span class="token punctuation">[</span>删除目录<span class="token punctuation">]</span><span class="token punctuation">,</span>copy<span class="token punctuation">[</span>拷贝文件<span class="token punctuation">]</span><span class="token punctuation">,</span>del<span class="token punctuation">[</span>删除文件<span class="token punctuation">]</span><span class="token punctuation">,</span>echo<span class="token punctuation">[</span>输入内容到文件<span class="token punctuation">]</span><span class="token punctuation">,</span>move<span class="token punctuation">[</span>剪切<span class="token punctuation">]</span></code></pre></li></ol><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li>变量必须先声明，后使用，即有顺序。</li><li>该区区域的数据/值可以在同一类型范围内不断变化。</li><li>变量在同一个区域内不能重名。</li><li>变量三要素：变量名，值，数据类型。</li></ol><p><strong>＋号的使用</strong></p><ol><li>当左右两边都是数值型，则做加法运算。</li><li>当左右两边有一方为字符型，则做拼接运算。</li><li>运算顺序是从左到右的。</li></ol><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//198</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token operator">+</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10098</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//103hello</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token operator">+</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hello1003</span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p>基本数据类型：数值型：整数类型：</p><p>byte[1] \ short[2] \ int[4] \ long[8]</p></li><li><p>基本数据类型：数值型：浮点类型：</p><p>float[4] \ double[8]</p></li><li><p>基本数据类型：字符型：</p><p>char[2]，存放单个字符’a’</p></li><li><p>基本数据类型：布尔型：</p><p>boolean[1]</p></li><li><p>引用数据类型：类（class）、接口（interface）、数组（[ ]）</p></li></ol><p>注：【2】表示存放两个字节</p><h3 id="整型细节"><a href="#整型细节" class="headerlink" title="整型细节"></a>整型细节</h3><ol><li><p>Java的整型常量默认为int，声明long型常量须后加”l“或者”L“</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4个字节</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> 1L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不对的</span><span class="token keyword">long</span> n3 <span class="token operator">=</span> 1L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对的</span></code></pre></li><li><p>Java程序中变量常声明为int。</p></li><li><p>计算机中最小存储单位：bit。计算机中基本存储单元：byte。一个byte=8个bit。</p></li></ol><h3 id="浮点数细节"><a href="#浮点数细节" class="headerlink" title="浮点数细节"></a>浮点数细节</h3><ol><li><p>浮点数 = 符号位+指数位+尾数位</p></li><li><p>Java的浮点型常量默认为double，声明float型常量须后加”f”或者“F”</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">float</span> n1 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不对的</span><span class="token keyword">float</span> n2 <span class="token operator">=</span> <span class="token number">1.1f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对的</span></code></pre></li><li><p>通常使用double。</p></li><li><p>浮点型使用陷阱：2.7和8.1 / 3 比较</p><p>​    后者结果是2.6999999997，是以精度显示的。</p><p><strong>所以当我们对运算结果是小数的进行相等判断时，要小心</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> num11 <span class="token operator">=</span> <span class="token number">2.7</span><span class="token punctuation">;</span><span class="token keyword">double</span> num12 <span class="token operator">=</span> <span class="token number">8.1</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2.7</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num11<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.7</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接近2.7的小数，而不是2.7</span><span class="token comment" spellcheck="true">//错误写法</span><span class="token keyword">if</span><span class="token punctuation">(</span> num11 <span class="token operator">==</span> num12<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//正确的写法：</span><span class="token keyword">if</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num11 <span class="token operator">-</span> num12<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.000001</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"差值非常小,到我的规定精度,可以认为相等."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//细节:如果是直接查询得到的小数或者直接赋值,是可以判断相等</span></code></pre></li></ol><h3 id="字符型细节"><a href="#字符型细节" class="headerlink" title="字符型细节"></a>字符型细节</h3><ol><li><p>字符常量是用单引号括起来的单个字符.</p></li><li><p>Java允许使用转义字符’\‘来将其后的字符转变为特殊字符型常量.  例如: char c3 = ‘\n’;   表示换行符</p></li><li><p>在java中,char的本质是一个整数,在默认输出时,是Unicode码对应的字符.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出'a' 对应的 数字</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//107</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token string">'b'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//98+1 == 99</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//99</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//99对应的字符 c</span></code></pre></li><li><p>字符类型本质:</p><p>字符型存储到计算机中,需要将字符型对应的码值(整数)找出来,比如’a’ 存储 ==&gt; 码值97 ==&gt; 0110 0001</p></li><li><p>ASCII编码表是一个字节表示,一个128个字符,实际上一个字节可以表示256个字符,只用128个.</p></li><li><p>Unicode编码表 固定大小的编码 使用两个字节来表示字符,字母和汉字统一都是占用两个字节.</p></li><li><p>utf - 8 编码表.大小可变的编码字母占一个字节,汉字使用3个字节.(表示的汉字更多)</p></li><li><p>gbk编码表,字母占一个字节,汉字占2个字节.</p></li></ol><h3 id="数据类型自动转换"><a href="#数据类型自动转换" class="headerlink" title="数据类型自动转换"></a>数据类型自动转换</h3><p><img src="https://img-blog.csdnimg.cn/eba5d610597941948e4993ceb4375f35.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><ol><li><p>有多种类型的数据混合运算时,系统首先自动将所有数据转换成容量最大的那种数据类型,然后再进行计算.</p></li><li><p>(byte , short)与char 之间不会相互自动转换.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//当把具体数赋给byte时,先判断该数是否在byte范围内,如果是就可以</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对,-128~127</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n2 是int</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> n2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,原因:如果是变量赋值,先判断类型</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> b1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,原因:byte不能自动转成char</span></code></pre></li><li><p>byte, short, char 他们三者可以计算,在计算时首先转换为int类型.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">short</span> s2 <span class="token operator">=</span> b2<span class="token operator">+</span>s1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,b2 + s1 => int</span><span class="token comment" spellcheck="true">//只要出现byte\short\char都会转换成先int再计算</span><span class="token keyword">byte</span> b4 <span class="token operator">=</span> b2 <span class="token operator">+</span> b3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误:b2 + b3 => int</span></code></pre></li><li><p>自动提升原则:表达式结果的类型自动提升为 操作数中最大的类型.</p></li></ol><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ol><li><p>使用时,要加上强制转换符(  ),但可能造成精度的损失!!!</p></li><li><p>强转符合只针对最近的操作数有效,往往使用小括号提升优先级</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">3.5</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译错误:double -> int</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">3.5</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//44</span></code></pre></li></ol><h3 id="基本数据类型和String类型的转换"><a href="#基本数据类型和String类型的转换" class="headerlink" title="基本数据类型和String类型的转换"></a>基本数据类型和String类型的转换</h3><ol><li><p>基本类型转String类型</p><p><img src="https://img-blog.csdnimg.cn/e7005cb9271e42b6ad6fe7a46fba356e.png" alt="img"></p></li><li><p>String类型转基本数据类型</p><p>通过基本类型的包装类调用parseXX方法</p><p><img src="https://img-blog.csdnimg.cn/4767ff73ad0b42e2a5e280fbcddd4b0d.png" alt="img"></p></li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//  / 除法的使用</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.5</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2.0</span><span class="token comment" spellcheck="true">//  % 取模,取余</span><span class="token comment" spellcheck="true">// 在 % 的本质 看一个公式 a % b = a - a / b * b</span><span class="token comment" spellcheck="true">//当a是小数时, 即公式 = a - (int)a / b * b</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -1</span><span class="token comment" spellcheck="true">//  ++的使用</span><span class="token comment" spellcheck="true">//  ++作为单独语句使用都是 i = i + 1;</span><span class="token comment" spellcheck="true">//  ++作为表达式使用:前++ : ++i先自增后赋值/后++ : i++先赋值后自增</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//java规则使用到了临时变量:(1)temp = i;(2)i=i+1;(3)i=temp;</span><span class="token number">1</span><span class="token punctuation">.</span>  result <span class="token operator">=</span> <span class="token number">59</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token comment" spellcheck="true">// 8</span>    result <span class="token operator">=</span> <span class="token number">59</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token comment" spellcheck="true">// 4   8个星期4天</span>    <span class="token number">2</span><span class="token punctuation">.</span>  <span class="token keyword">double</span> huas <span class="token operator">=</span> <span class="token number">234.5</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ss <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">/</span><span class="token number">9</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">234.5</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&amp;&amp; 和 &amp; 使用区别</p><ol><li>&amp;&amp;短路与: 如果第一个条件为false, 则第二个条件不会判断,最终结果为false, 效率高.</li><li>&amp; 逻辑与: 不管第一个条件判断是不是false,第二个条件还是会判断,效率低.</li><li>开发中,我们使用短路与&amp;&amp; ,效率高 </li></ol><p>|| 和 |使用区别</p><p><img src="https://img-blog.csdnimg.cn/7ce2e8c4e33c41eebbc9992c9137f2a0.png" alt="img"></p><p><strong>赋值运算符</strong></p><p>复合赋值运算符会进行类型转换.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>b <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b = b + 2;  实际上真正等价于 b = (byte)(b + 2);</span>b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等价于 b = (byte)(b + 1);</span><span class="token comment" spellcheck="true">//如果直接写</span>b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是错误的,类型是int型</span></code></pre><p><strong>三元运算符</strong></p><p>条件表达式 ? 表达式1 :  表达式2;</p><p>运算规则:</p><ol><li><p>如果条件表达式为true, 运算后的结果是表达式1;</p></li><li><p>如果条件表达式为false, 运算后的结果是表达式2;</p><p>口诀: 一真大师</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> a<span class="token operator">++</span><span class="token operator">:</span>b<span class="token operator">--</span>    <span class="token comment" spellcheck="true">//条件表达式为假/运行b--</span>    <span class="token comment" spellcheck="true">//结果为:先返回b的值,然后在 b-1</span>    <span class="token comment" spellcheck="true">//返回结果为99</span></code></pre><p>细节:</p><ol><li><p>表达式1和表达式2要为可以赋给接收变量的类型(或自动转换)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> <span class="token number">1.1</span> <span class="token operator">:</span> <span class="token number">2.3</span><span class="token comment" spellcheck="true">//语法错误</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1.1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">2.3</span><span class="token comment" spellcheck="true">//可以的</span><span class="token keyword">double</span> d <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> a <span class="token operator">:</span> b <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以的,满足int -> double</span></code></pre></li><li><p>三元运算符是一个整体</p><pre class=" language-java"><code class="language-java">Object obj1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出的是1.0,而不是1 </span><span class="token comment" spellcheck="true">//注意三元运算符是一个整体,会优先转换成最高精度的类型,再计算输出等</span></code></pre></li><li><p>三元运算符可以转换从if(…)else 语句</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实现三个数的最大值</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">553</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span><span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//思路</span><span class="token comment" spellcheck="true">//1.先得到 n1 和 n2 中最大数,保存到 max1</span><span class="token comment" spellcheck="true">//2.然后再 求出 max1 和 n3中的最大数,保存到 max2</span><span class="token keyword">int</span> max1 <span class="token operator">=</span> n1 <span class="token operator">></span> n2<span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">;</span><span class="token keyword">int</span> max2 <span class="token operator">=</span> max1 <span class="token operator">></span> n3<span class="token operator">?</span> max1 <span class="token operator">:</span> n3<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大数="</span> <span class="token operator">+</span> max2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p><strong>键盘输入语句</strong></p><p>Input.java///需要一个 扫描器(对象), 就是 Scanner</p><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收String类型的输入</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收Int类型的输入</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>等    <span class="token comment" spellcheck="true">//具体看java.util.Scanner</span></code></pre><h3 id="四种进制"><a href="#四种进制" class="headerlink" title="四种进制"></a>四种进制</h3><p>二进制, 满2进1. 以0b或0B开头.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二进制转换成八进制</span><span class="token comment" spellcheck="true">//从低位开始,将二进制数每三位一组,转成对应的八进制数即可</span><span class="token comment" spellcheck="true">//二进制转换成十六进制</span><span class="token comment" spellcheck="true">//从低位开始,将二进制数每四位一组,转成对应的十六进制数即可</span></code></pre><p>十进制, 满10进1.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//十进制转换成二进制</span><span class="token comment" spellcheck="true">//将该数不断除以2,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</span><span class="token comment" spellcheck="true">//十进制转换成八进制</span><span class="token comment" spellcheck="true">//将该数不断除以8,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</span><span class="token comment" spellcheck="true">//十进制转换成十六进制</span><span class="token comment" spellcheck="true">//将该数不断除以16,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</span></code></pre><p>八进制, 0-7, 满8进1. 以数字0开头表示.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//八进制转换成十进制</span><span class="token comment" spellcheck="true">//从最低位(右边)开始,将每个位上的数提取出来,乘以8的(位数-1)次方,求和</span>eg<span class="token operator">:</span><span class="token number">0234</span>转成十进制的数    <span class="token number">0234</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span>    <span class="token number">4</span> <span class="token operator">+</span><span class="token number">24</span> <span class="token operator">+</span><span class="token number">128</span> <span class="token operator">=</span><span class="token number">156</span><span class="token comment" spellcheck="true">//八进制转换成二进制</span><span class="token comment" spellcheck="true">//将八进制数每1位,转成对应的一个3位的二进制数</span></code></pre><p>十六进制, 0-9及A-F, 满16进1. 以0x或0X开头表示</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//十六进制转换成十进制</span><span class="token comment" spellcheck="true">//从最低位(右边)开始,将每个位上的数提取出来,乘以16的(位数-1)次方,求和</span>eg<span class="token operator">:</span><span class="token number">0x23A</span>转成十进制的数    <span class="token number">0x23A</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">570</span>     <span class="token comment" spellcheck="true">//十六进制转换成二进制</span><span class="token comment" spellcheck="true">//将十六进制数每1位,转成对应的一个4位的二进制数</span></code></pre><h3 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码\反码\补码"></a>原码\反码\补码</h3><ol><li>二进制的最高位(最左边)是符号位: 0表示正数, 1表示负数(老韩口诀:旋转90°   0 -&gt; 0   1 -&gt;  -)</li><li>正数的原码, 反码, 补码都一样(三码合一)</li><li>负数的反码 = 它的原码符号位不变, 其他位取反(0 -&gt; 1, 1 -&gt; 0)</li><li>负数的补码 = 负数的反码 + 1, 负数的反码 = 负数的补码 - 1</li><li>0的反码,补码都是0</li><li>java没有无符号数,换言之, Java中的数都是有符号的</li><li>在计算机运算的时候, 都是以<u><strong>补码的方式来运算</strong></u>的</li><li>当我们看运算结果的时候, 要看他的原码(!!!)</li></ol><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>7个位运算符(&amp; , | , ^ , ~ , &gt;&gt; , &lt;&lt; , &gt;&gt;&gt;)</p><p>按位与&amp;</p><p><img src="https://img-blog.csdnimg.cn/798c1e3d7bf947fb892f2cf854d2edce.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>按位或 | : 两位中有一个为1,结果为1</p><p>按位异或^ : 两位不同时为1, 相同为0</p><p>按位取反~</p><p><img src="https://img-blog.csdnimg.cn/79e789e308524249b2cf674974e2dc97.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/f8da8185083140019181160525db885d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>算术右移 &gt;&gt;  :低位溢出, 符号位不变, 并用符号位补溢出的高位 (如果是正数的话 本质是右移几位就除几次2)</p><p>算术左移 &lt;&lt; :符号位不变, 低位补0 (如果是正数的话 本质是左移几位就乘几次2)</p><p><img src="https://img-blog.csdnimg.cn/746bf9fef49e45a1aeeb333427ae33fb.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/089e1478260941f9839eaecdd11a55de.png" alt="img"></p><p>逻辑右移也叫无符号右移 &gt;&gt;&gt; : 低位溢出, 高位补0</p><h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//计算 -10.5%3 = ?</span><span class="token comment" spellcheck="true">//a % b 当a是小数时,公式 = a - (int)a/b*b</span><span class="token comment" spellcheck="true">//-10.5%3 = -10.5 - (-10)/3*3 = -10.5 + 9 = -1.5</span><span class="token comment" spellcheck="true">//注意: 有小数运算,得到结果是近似值</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10.5</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h2><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ol><li>switch 关键字, 表示switch分支</li><li>表达式 对应一个值</li><li>case 常量1: 当表达式的值等于常量1, 就执行 语句块1</li><li>break: 表示退出switch</li><li>如果和case 常量1匹配, 就执行语句块1, 如果没有匹配, 就继续匹配case 常量2</li><li>如果一个都没有匹配上, 执行default</li></ol><h3 id="switch细节"><a href="#switch细节" class="headerlink" title="switch细节"></a>switch细节</h3><ol><li><p>表达式数据类型, 应和case后的常量类型一致, 或者是可以自动转成可以相互比较的类型, 比如输入的是字符, 而常量是int</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">20</span> <span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>switch(表达式)中表达式的返回值必须是:(byte, short, int, char, enum[枚举], String)</p></li><li><p>case子句中的值必须是常量, 而不能是变量</p></li><li><p>default子句是可选的</p></li><li><p>break语句是用来在执行完一个case分支后使程序跳出switch语句块, 如果没有写break, 会出现<strong>穿透现象</strong>(程序会顺序执行到switch结尾)</p></li></ol><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>当return用在方法时, 表示跳出方法, 如果使用在main, 表示退出程序</p><p>谁调用(接收), 就返回给谁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> returnRes <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把方法 getSum 返回的值 ,赋给 变量 returnRes</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
