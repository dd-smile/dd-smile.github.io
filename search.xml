<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>简单的注册界面</title>
      <link href="/2021/10/19/two/"/>
      <url>/2021/10/19/two/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安卓开发"><a href="#安卓开发" class="headerlink" title="安卓开发"></a>安卓开发</h1><h4 id="实现一个仿QQ的注册界面"><a href="#实现一个仿QQ的注册界面" class="headerlink" title="实现一个仿QQ的注册界面"></a>实现一个仿QQ的注册界面</h4><ol><li>相对布局RelativeLayout</li><li>线性布局LinearLayout</li><li>drawable中selector标签的使用(用来实现Button的点击效果)</li><li>EditText的属性标签使用</li><li>TextView的属性标签使用</li><li>ImageView的属性标签的使用</li></ol><h3 id="1-设计分析"><a href="#1-设计分析" class="headerlink" title="1.设计分析"></a>1.设计分析</h3><ul><li><p>控件分析</p><table><thead><tr><th align="center">看到的控件</th><th align="center">业务功能</th><th align="center">实际控件</th></tr></thead><tbody><tr><td align="center">企鹅图标</td><td align="center">无</td><td align="center">ImageView</td></tr><tr><td align="center">“QQ”文本</td><td align="center">无</td><td align="center">TextView</td></tr><tr><td align="center">账号输入框</td><td align="center">编辑输入账号(只能输入数字)</td><td align="center">EditText</td></tr><tr><td align="center">密码输入框</td><td align="center">编辑输入密码(只能输入数字)</td><td align="center">EditText</td></tr><tr><td align="center">注册按钮</td><td align="center">执行注册</td><td align="center">Button</td></tr><tr><td align="center">“阅读并同意”文本</td><td align="center">无(颜色为白色)</td><td align="center">TextView</td></tr><tr><td align="center">“服务条款”</td><td align="center">无(颜色为黑色)</td><td align="center">TextView</td></tr></tbody></table></li><li><p>布局分析</p><p>使用相对布局大框架中嵌入线性布局</p><p>示意图如下:相对布局为红色,线性布局为黑色</p><p><img src="https://img-blog.csdnimg.cn/3f2456d0f14c418ba0e8684fbd662861.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="images"></p></li></ul><h3 id="2-编程中出现的问题"><a href="#2-编程中出现的问题" class="headerlink" title="2.编程中出现的问题"></a>2.编程中出现的问题</h3><ul><li>Button的点击效果颜色没有反应</li></ul><p>提示不兼容.(应该是版本问题)</p><p>解决办法如下:改为红色圈圈中的Bridge即可</p><p><img src="https://img-blog.csdnimg.cn/376d474cdff0460ba85526db74597c39.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="3-Button的点击效果实现"><a href="#3-Button的点击效果实现" class="headerlink" title="3.Button的点击效果实现"></a>3.Button的点击效果实现</h3><ol><li><p>在drawable下面创建一个xml文件:bt_bg.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>selector xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>按下时的图形 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"true"</span>   android<span class="token operator">:</span>drawable<span class="token operator">=</span><span class="token string">"@drawable/bg2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 松开时的图形 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"false"</span>   android<span class="token operator">:</span>drawable<span class="token operator">=</span><span class="token string">"@drawable/bg1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>selector<span class="token operator">></span></code></pre></li><li><p>在activity_main.xml文件中去实现</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>Button        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bt_bg"</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li><li><p>在颜色点击效果的基础上实现Button的圆角效果</p><pre class=" language-java"><code class="language-java">#在drawable下面创建一个xml文件<span class="token operator">:</span>bt_bg3<span class="token punctuation">.</span>xml    <span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>selector xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义当button 处于pressed 状态时的形态。<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>shape<span class="token operator">></span>            <span class="token operator">&lt;</span>solid android<span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"#FF00FF"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置按钮的四个角为弧形 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> android<span class="token operator">:</span>radius 弧形的半径 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>corners android<span class="token operator">:</span>radius<span class="token operator">=</span><span class="token string">"20dip"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> padding：Button里面的文字与Button边界的间隔 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>padding android<span class="token operator">:</span>bottom<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>left<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>right<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>top<span class="token operator">=</span><span class="token string">"10dp"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>shape<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义button默认时的形态<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>shape<span class="token operator">></span>            <span class="token operator">&lt;</span>solid android<span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"#000000"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置按钮的四个角为弧形 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> android<span class="token operator">:</span>radius 弧形的半径 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>corners android<span class="token operator">:</span>radius<span class="token operator">=</span><span class="token string">"20dip"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> padding：Button里面的文字与Button边界的间隔 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>padding android<span class="token operator">:</span>bottom<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>left<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>right<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>top<span class="token operator">=</span><span class="token string">"10dp"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>shape<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>selector<span class="token operator">></span>#xml文件中应用                    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bt_bg3"</span></code></pre></li></ol><h3 id="activity-main-xml源码如下"><a href="#activity-main-xml源码如下" class="headerlink" title="activity_main.xml源码如下"></a>activity_main.xml源码如下</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>RelativeLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span>    xmlns<span class="token operator">:</span>tools<span class="token operator">=</span><span class="token string">"http://schemas.android.com/tools"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    tools<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">".MainActivity"</span>    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/fengmian"</span><span class="token operator">></span>   #APP界面的背景图    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tubiao"</span>         android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span>        android<span class="token operator">:</span>layout_marginStart<span class="token operator">=</span><span class="token string">"25dp"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"80dp"</span>        android<span class="token operator">:</span>layout_marginLeft<span class="token operator">=</span><span class="token string">"25dp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ImageView  #左上角QQ图标            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/tubiao"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"QQ"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"36sp"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"43dp"</span>        android<span class="token operator">:</span>layout_below<span class="token operator">=</span><span class="token string">"@+id/tubiao"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>RelativeLayout            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ImageView                android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/mobile"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"20dp"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/ipone"</span><span class="token operator">></span>    #输入账号的手机图标            <span class="token operator">&lt;</span><span class="token operator">/</span>ImageView<span class="token operator">></span>            <span class="token operator">&lt;</span>EditText                android<span class="token operator">:</span>layout_toRightOf<span class="token operator">=</span><span class="token string">"@+id/mobile"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"@string/input_mobile"</span>                android<span class="token operator">:</span>inputType<span class="token operator">=</span><span class="token string">"number"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>EditText<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span>        <span class="token operator">&lt;</span>RelativeLayout            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ImageView                android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/mima"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"20dp"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/mima"</span><span class="token operator">></span>    #输入密码的密码矢量图            <span class="token operator">&lt;</span><span class="token operator">/</span>ImageView<span class="token operator">></span>            <span class="token operator">&lt;</span>EditText                android<span class="token operator">:</span>layout_toRightOf<span class="token operator">=</span><span class="token string">"@+id/mima"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"@string/input_password"</span>                android<span class="token operator">:</span>inputType<span class="token operator">=</span><span class="token string">"number"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>EditText<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span>        <span class="token operator">&lt;</span>Button            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"38dp"</span>            android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"22dp"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/login"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"20sp"</span>            android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bty_ys"</span><span class="token operator">></span>   实现Button的点击效果        <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span>        android<span class="token operator">:</span>layout_centerHorizontal<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>layout_alignParentBottom<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>layout_marginBottom<span class="token operator">=</span><span class="token string">"42dp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/login_message"</span>            android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@android:color/white"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/service"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span></code></pre><h3 id="strings-xml源码"><a href="#strings-xml源码" class="headerlink" title="strings.xml源码"></a>strings.xml源码</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>resources<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"app_name"</span><span class="token operator">></span>qq<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"input_mobile"</span><span class="token operator">></span>输入手机号<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"input_password"</span><span class="token operator">></span>输入密码<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"login"</span><span class="token operator">></span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"login_message"</span><span class="token operator">></span>阅读并同意<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"service"</span><span class="token operator">></span>服务条款<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>resources<span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五子棋项目</title>
      <link href="/2021/10/18/first/"/>
      <url>/2021/10/18/first/</url>
      
        <content type="html"><![CDATA[<h1 id="五子棋单机版"><a href="#五子棋单机版" class="headerlink" title="五子棋单机版"></a>五子棋单机版</h1><ol><li><h3 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h3><p>棋盘大小:15*15</p><p>空棋盘开局,黑棋先下,白棋后下,一次只能下一子.棋子下在交叉点上,棋子下在棋盘上之后,不能移动.</p><p>当相同颜色的五颗棋子连在一起的时候,就认为胜负已分.连在一起的方法有4个:水平,垂直,左上右下,左下右上;如果整个棋盘都摆满棋子之后,仍旧不分胜负,则认为和局.</p></li><li><h3 id="编程遇到的问题"><a href="#编程遇到的问题" class="headerlink" title="编程遇到的问题"></a>编程遇到的问题</h3><ol><li><h4 id="怎么样定义棋盘的坐标"><a href="#怎么样定义棋盘的坐标" class="headerlink" title="怎么样定义棋盘的坐标"></a>怎么样定义棋盘的坐标</h4><p>编程的时候数组或者列表的下标都是从0开始的,但是五子棋棋盘的坐标是从1开始的,如何解决两者之间的不协调?</p><p>第一种方法:把每个二维数组或列表的索引值全部加1,比如说五子棋棋盘第4行第6列,则对应的坐标是arr[3] [5].</p><p>第二种方法:直接忽略x=0和y=0这一行一列.分配内存时,直接分配16*16的内存空间做为棋盘即可.</p><ul><li>经过敲代码后发现,第一种方法需要来回切换,比较繁琐,代码量增加.因此采用第二种方法</li></ul></li><li><h4 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h4><p>对于计算机来说,一般会把左上角作为坐标系原点.从左往右是水平方向y,从上往下是垂直方向x</p><p>比如(4,6)表示第4行第6列,如下图:</p><p><img src="https://img-blog.csdnimg.cn/e1142dabff20449ba48dc5248ecde8f6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="images"></p><p>对于五子棋棋盘来说,4个角落的坐标点分别为:</p><ul><li>左上角:(1,1)</li><li>左下角:(15,1)</li><li>右上角:(1,15)</li><li>右下角:(15,15)</li></ul></li><li><h4 id="胜负判断"><a href="#胜负判断" class="headerlink" title="胜负判断"></a>胜负判断</h4><p>相同颜色的五颗棋子连在一起,则胜负已分.有以下几种极端情况:</p><ul><li>从左到右:判断(x,y-4)~(x,y+4)这9个坐标中是否有连续5颗棋子连在一起</li><li>从上到下:判断(x-4,y)~(x+4,y)这9个坐标中是否有连续5颗棋子连在一起</li><li>左上右下:判断(x-4,y-4)~(x+4,y+4)这9个坐标中是否有连续5颗棋子连在一起</li><li>左下右上:判断(x+4,y-4)~(x-4,y+4)这9个坐标中是否有连续5颗棋子连在一起</li></ul></li></ol></li><li><h3 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h3><p>使用面向对象的思维来建立模型</p><p>棋子类</p><ul><li> 属性:颜色color,坐标pos   </li><li>方法:setColor(),getColor(),setPos(),getPos()</li></ul><p>棋盘类</p><ul><li>属性:棋盘大小BOARD_SIZE,棋盘上的棋子board[] []</li><li>方法:setChess(),getChess(),initBoard(),printBoard()</li></ul><p>规则类(引擎类)</p><ul><li>属性:棋盘对象 board</li><li>方法:判断胜负isWon(),计算机下棋方法computerGo(),人工下棋userGo()</li></ul></li><li><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><p>创建一个棋盘类</p><p>chessboard.py</p><pre class=" language-py"><code class="language-py">#棋盘类class ChessBoard:    # 棋盘大小    BOARD_SIZE = 15    # 初始化    def __init__(self):        self.board = []        for i in range(ChessBoard.BOARD_SIZE+1):            tmp = []            for j in range(ChessBoard.BOARD_SIZE+1):                tmp.append(0)            self.board.append(tmp)    #清空棋盘    def initBoard(self):        for i in range(1,ChessBoard.BOARD_SIZE+1):            for j in range(1,ChessBoard.BOARD_SIZE+1):                self.board[i][j] = '+'  # 实现方法initBoard(),对棋盘进行初始化,把所有的空格都设置成'+'符号    # 打印棋盘    def printBoard(self):        # 打印列号        print('  ',end=' ')        for i in range(1,ChessBoard.BOARD_SIZE+1):            ch = chr(96+i)            print(ch,end=' ')        print()        # 打印行号和棋盘        for i in range(1,ChessBoard.BOARD_SIZE+1):            # 打印行号            print('%2d' % i,end=' ')            # 打印棋盘            for j in range(1,ChessBoard.BOARD_SIZE+1):                print(self.board[i][j],end=' ')            print()    # 放置棋子    # 参数1 pos位置坐标 类型是长度为2的列表或元组    # 参数2 color棋子颜色    def setChess(self,pos,color):        x = pos[0]        y = pos[1]        self.board[x][y] = color    # 放置棋子    def setChessMan(self,chessMan):            pos = chessMan.getPos()            color = chessMan.getColor()            self.setChess(pos,color)    # 根据位置读取棋子的颜色    def getChess(self,pos):        x,y = pos        return self.board[x][y]    # 判断某个坐标点是否为空    def isEmpty(self,pos):        chess = self.getChess(pos)        if chess == '+':            return True        #非空即黑或白        return False</code></pre><p>创建一个棋子类</p><p>chessman.py</p><pre class=" language-py"><code class="language-py">#棋子类class ChessMan:    # 初始化    def __init__(self):        self.color = 'x'        self.pos = (0,0)    # 设置颜色    def setColor(self,color):        self.color = color    # 获取颜色    def getColor(self):        return self.color    # 设置位置    def setPos(self,pos):        self.pos = pos    # 获取位置    def getPos(self):        return self.pos</code></pre><p>测试代码</p><p>main.py</p><pre class=" language-py"><code class="language-py"># from 文件名 import 类名from chessboard import *from chessman import *# 测试打印棋盘def test1():    board = ChessBoard()    board.initBoard()    board.printBoard()#测试摆放棋子def test2():    board = ChessBoard()    board.initBoard()    #测试setChess()摆放棋子    board.setChess((3,5),'x')    #测试setChessMan()摆放棋子    chessMan = ChessMan()    chessMan.setColor('o')    chessMan.setPos((4,6))    board.setChessMan(chessMan)    board.printBoard()    ret = board.isEmpty((3,6))    print(ret)if __name__ == '__main__':  # 相当于一个入口,当其他模块被调用的时候,先运行此模块    test2()</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记三</title>
      <link href="/2020/02/17/java-note03/"/>
      <url>/2020/02/17/java-note03/</url>
      
        <content type="html"><![CDATA[<h1 id="Java笔记"><a href="#Java笔记" class="headerlink" title="Java笔记"></a>Java笔记</h1><h2 id="第七章-面向对象-中级"><a href="#第七章-面向对象-中级" class="headerlink" title="第七章 面向对象(中级)"></a>第七章 面向对象(中级)</h2><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><table><thead><tr><th align="center">作用域</th><th align="center">当前类</th><th align="center">同一包</th><th align="center">其他包的子孙类</th><th align="center">其他包的类</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">friendly</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h6 id="访问修饰符细节"><a href="#访问修饰符细节" class="headerlink" title="访问修饰符细节"></a>访问修饰符细节</h6><p>只有默认的(没有修饰符)和public才能修饰类</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ol><li><p>将属性进行私有化private</p></li><li><p>提供一个公共的(public)set的方法, 用于对属性判断并赋值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setXxx</span><span class="token punctuation">(</span>类型 参数名<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Xxx表示某个属性</span>    <span class="token comment" spellcheck="true">//加入数据验证的业务逻辑</span>    属性 <span class="token operator">=</span> 参数名<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>提供一个公共的(public)get的方法, 用于获取属性的值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> 数据类型 <span class="token function">getXxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//权限判断, Xxx某个属性</span>    <span class="token keyword">return</span> xx<span class="token punctuation">}</span></code></pre></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><img src="https://img-blog.csdnimg.cn/6700f4add1374946b28884f99c05fe48.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="继承细节"><a href="#继承细节" class="headerlink" title="继承细节"></a>继承细节</h3><ol><li><p>子类继承了所有的属性和方法, 但是<strong>私有属性和方法不能在子类直接访问</strong>, 要通过父类提供公共的方法去访问</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//父类Base</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> n1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过父类提供一个public的方法, 返回了n2</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getN2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> n2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//通过父类提供的public的方法来调用test200()</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callTest200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//子类Sub</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//要通过父类提供公共的方法去访问n2</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n4="</span> <span class="token operator">+</span> <span class="token function">getN2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callTest200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>子类必须调用父类的构造器</strong>, 完成父类的初始化</p></li><li><p>当创建子类对象时, 不管使用子类的哪个构造器, 默认情况下总会去调用父类的无参构造器, 如果父类没有提供无参构造器, 则必须在子类的构造器中用super去指定使用父类的哪个构造器完成对父类的初始化工作</p></li><li><p>如果希望指定去调用父类的某个构造器, 则显式的调用一下 : <code>super(参数列表)</code></p><p>1.调用父类的无参构造器, 如下 或者 什么都不写, <strong>默认就是调用<code>super()</code></strong></p><p><code>super();</code>//父类的无参构造器</p><p>2.调用父类的 <code>Base(Sting name)</code>构造器</p><p><code>super("jack");</code></p></li><li><p>super在使用时, 必须放在构造器的第一行(super只能在构造器中使用)</p></li><li><p><code>super()</code>和<code>this()</code>都只能放在构造器的第一行,因此这两个方法不能共存在一个构造器中</p></li><li><p>父类构造器的调用不限于直接父类! 将一直往上追溯直到Object类</p></li></ol><h3 id="继承的本质"><a href="#继承的本质" class="headerlink" title="继承的本质"></a>继承的本质</h3><p>创建子类的过程中    <code>Son son = new Son();</code></p><p>是先加载类,  <code>1.Object  - 2.GrandPa - 3.Father - 4.Son</code></p><p><img src="https://img-blog.csdnimg.cn/7e2cc51f5a484dffac5b326f6849a651.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>注意此时name与父类和爷爷类的属性名字相同, 出现这种情况下时,按以下规则 :</p><p><img src="https://img-blog.csdnimg.cn/d73b7db3004e4a9ab361ff13ffc337d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>如果父类属性为私有属性, 那么还是需要通过公共的方法去访问</p><p><img src="https://img-blog.csdnimg.cn/db4dfdc47f9b4f12bd8a75ae90a54228.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>如果此时父类的age属性是私有的, 而爷爷类的age属性是public的话, 可以直接用 <code>son.age</code>来访问吗?</p><p>答案是<strong>不可以</strong>!!!    它是一层一层往上找的, 如果在父类遇到私有的age属性, 就会直接报错, 无法绕过父类去访问爷爷类的age属性(可以通过爷爷类的public方法访问)</p><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>super代表父类的引用, 用于访问父类的属性, 方法, 构造器</p><ol><li><p>访问父类的属性, 但不能访问父类的private属性</p><p><code>super.属性名</code></p></li><li><p>访问父类的方法, 不能访问父类的private方法</p><p><code>super.方法名</code></p></li><li><p>访问父类的构造器</p><p><code>super(参数列表)</code></p></li></ol><h3 id="super细节"><a href="#super细节" class="headerlink" title="super细节"></a>super细节</h3><ol><li><p>当子类中有和父类中的成员(属性和方法)重名时, 为了访问父类的成员, 必须通过super. 如果没有重名, 使用super, this, 直接访问是一样的效果</p><p><img src="https://img-blog.csdnimg.cn/38ead28502f74f99b7bacbdfb2e4903c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/d293677a9d814a258576acb7588f5419.png" alt="img"></p></li><li><p>super的访问不限于直接父类, 如果爷爷类和本类中有同名的成员, 也可以使用super去访问爷爷类的成员, 如果多个基类中都有同名的成员, 使用super访问遵循就近原则</p></li><li><p>调用父类构造器的好处 :父类的属性由父类初始化, 子类的属性由子类初始化</p></li></ol><h5 id="super和this的比较"><a href="#super和this的比较" class="headerlink" title="super和this的比较"></a>super和this的比较</h5><p><img src="https://img-blog.csdnimg.cn/2bae6f49712d444494fadb83cb49c08a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>方法重写也叫方法覆盖</p><p><img src="https://img-blog.csdnimg.cn/c5749e8c90694a76adfb2a4fbb67198f.png" alt="img"></p><h3 id="方法重写细节"><a href="#方法重写细节" class="headerlink" title="方法重写细节"></a>方法重写细节</h3><ol><li>子类的方法的<strong>形参列表</strong>, <strong>方法名称</strong>, 要和父类方法的<strong>形参列表</strong>, <strong>方法名称</strong>完全一样</li><li>子类的返回类型和父类方法返回类型一样, 或者是父类返回类型的子类   比如 : 父类 返回类型是 Object, 子类方法返回类型是 String</li><li>子类方法不能缩小父类方法的访问权限</li></ol><p>重写与重载的区别</p><p><img src="https://img-blog.csdnimg.cn/bfcb9378b98a41cf99924e6d5f8151e8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li><p>方法重载和方法的重写体现多态</p></li><li><p>对象的多态</p><ol><li><p>一句话的编译类型和运行类型可以不一致</p><pre class=" language-java"><code class="language-java">Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译类型(名义上)是Animal,运行类型(实际上)是Dog</span></code></pre></li><li><p>编译类型在定义对象时, 就确定了, 不能改变</p></li><li><p>运行类型是可以变化的</p></li><li><p>编译类型看定义时 =号 的左边, 运行类型看 =号 的右边</p></li></ol></li></ol><h3 id="多态的细节"><a href="#多态的细节" class="headerlink" title="多态的细节"></a>多态的细节</h3><ol><li><p>向上转型</p><p>多态的前提是 : 两个对象(类)存在继承关系</p><p>多态的向上转型</p><ol><li><p>本质: 父类的引用指向了子类的对象</p></li><li><p>语法: 父类类型 引用名 = new 子类类型();</p></li><li><p>特点: 编译类型看左边, 运行类型看右边.</p><p>可以调用父类中的所有成员(需遵守访问权限)</p><p>不能调用子类中特有成员</p><p>最终运行效果看子类的具体实现</p><p>(<strong>编译类型是编译器javac执行的, 运行类型是java执行的</strong>)</p></li></ol><p><img src="https://img-blog.csdnimg.cn/c8b22ff263214e1292b39104b164ed0a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>向下转型</p><ol><li><p>语法: 子类类型 引用名 = (子类类型) 父类引用</p></li><li><p>只能强转父类的引用, 不能强转父类的对象</p></li><li><p>要求父类的引用必须指向的是当前目标类型的对象</p></li><li><p>当向下转型后, 可以调用子类类型中所有 的成员</p><p><img src="https://img-blog.csdnimg.cn/80dc64531fb94e63b178b4bb3b5a28e1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol></li></ol><h3 id="属性重写问题"><a href="#属性重写问题" class="headerlink" title="属性重写问题"></a>属性重写问题</h3><ol><li>属性没有重写之说!!! 属性的值看<strong>编译类型</strong></li><li><code>instanceOf</code>比较操作符, 用于判断对象的<strong>运行类型</strong>是否为XX类型或者XX类型的子类型</li></ol><h3 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h3><ol><li>当<strong>调用对象方法</strong>的时候, 该方法会和该对象的内存地址/<strong>运行类型绑定</strong></li><li>当<strong>调用对象属性</strong>时, 没有动态绑定机制, 哪里声明, 哪里使用</li></ol><h3 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h3><p>//创建一个Person类, Student和Teacher继承于它</p><p>//2个Student 对象和2个Teacher 对象, 统一放在数组中, 并调用每个say方法</p><p><img src="https://img-blog.csdnimg.cn/58606885ca38402487315f7710090902.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>//如何调用子类特有的方法, 比如Teacher有一个teach, Student有一个study , 怎么调用</p><p><img src="https://img-blog.csdnimg.cn/056a97c6bca74ac88a7cd59779d69b28.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h3><p>方法定义的形参类型为父类类型, 实参类型允许为子类类型</p><h3 id="Object类详解"><a href="#Object类详解" class="headerlink" title="Object类详解"></a>Object类详解</h3><h5 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h5><p>== 与 equals的对比</p><ol><li>== 是一个比较运算符, 既可以判断基本类型, 又可以判断引用类型</li><li>如果判断基本类型, 判断的是值是否相等</li><li>如果判断引用类型, 判断的是地址是否相等, 即判定是不是同一个对象</li></ol><p>equals方法 : 是Object类中的方法, 只能判断引用类型</p><p>默认判断的是地址是否相等, 子类中往往重写该方法, 用于判断内容是否相等. 比如 Integer, String…</p><h5 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h5><pre class=" language-java"><code class="language-java">AA aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AA aa2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AA aa3 <span class="token operator">=</span> aa<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa.hashCode = "</span> <span class="token operator">+</span> aa<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa2.hashCode = "</span> <span class="token operator">+</span> aa2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa3.hashCode = "</span> <span class="token operator">+</span> aa3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>提高具有哈希结构的容器的效率</li><li>两个引用, 如果指向的是同一个对象, 则哈希值肯定是一样的</li><li>两个引用, 如果指向的是不同对象, 则哈希值是不一样的</li><li>哈希值主要根据地址号来的,  但是不能完全将哈希值等价于地址</li></ol><h5 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h5><ol><li>默认返回 : 全类名 + @ + 哈希值的十六进制</li><li>子类往往重写toString方法, 用于返回对象的属性信息</li><li>重写toString方法, 打印对象或拼接对象, 都会自动调用该对象的toString形式(快捷键)</li><li>当直接输出一个对象时, toString方法会被默认的调用</li></ol><h5 id="Finalize方法"><a href="#Finalize方法" class="headerlink" title="Finalize方法"></a>Finalize方法</h5><ol><li>当对象被回收时, 系统自动调用该对象的finalize方法. 子类可以重写该方法, 做一些释放资源的操作</li><li>什么时候被回收 : 当某个对象没有任何引用时, 则jvm就认为这个对象是一个垃圾对象, 就会使用垃圾回收机制来销毁该对象, 在销毁该对象前, 会先调用finalize方法</li><li>垃圾回收机制的调用, 是由系统来决定, 也可以通过<code>System.gc()</code>来主动触发垃圾回收机制</li></ol><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>在断点调试过程中, 是运行状态, 是以对象的运行类型来执行的.</p><h2 id="第八章-面向对象-高级"><a href="#第八章-面向对象-高级" class="headerlink" title="第八章 面向对象(高级)"></a>第八章 面向对象(高级)</h2><h3 id="类变量-静态变量-和类方法-静态方法"><a href="#类变量-静态变量-和类方法-静态方法" class="headerlink" title="类变量(静态变量)和类方法(静态方法)"></a>类变量(静态变量)和类方法(静态方法)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个静态变量count</span>    <span class="token comment" spellcheck="true">//该变量最大的特点就是会被Child类所有的对象实例共享</span>    <span class="token comment" spellcheck="true">//类变量,可以通过类名来访问</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="类变量内存布局"><a href="#类变量内存布局" class="headerlink" title="类变量内存布局"></a>类变量内存布局</h3><p>jdk-8:</p><p><img src="https://img-blog.csdnimg.cn/17fda7ed343f40f9a1c668f1d70e6fc1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="类变量细节"><a href="#类变量细节" class="headerlink" title="类变量细节"></a>类变量细节</h3><ol><li><p>静态变量的访问修饰符的访问权限和范围和普通属性是一样的</p></li><li><p>类变量是随着类的加载而创建, 所以即使没有创建对象实例也可以访问</p></li><li><p>什么时候需要用类变量</p><p>当我们需要让某个类的所有对象都共享一个变量时, 就可以考虑使用类变量(静态变量) : 比如 : 定义学生类, 统计所有学生共交多少钱</p></li><li><p>类变量与实例变量(普通属性)区别</p><p>类变量是该类的所有对象共享的, 而实例变量是每个对象独享的</p></li><li><p>类变量的生命周期是随着类的加载开始, 随着类消亡而销毁</p></li></ol><h3 id="类方法细节"><a href="#类方法细节" class="headerlink" title="类方法细节"></a>类方法细节</h3><ol><li><p>静态方法可以访问静态属性</p></li><li><p>什么时候需要类方法</p><p>当方法中不涉及到任何和对象相关的成员, 则可以将方法设计成静态方法, 提高开发效率</p><p>比如: 工具类中的方法utils        Math类\Arrays类等等</p><p>在实际开发中, 往往会将一些通用的方法, 设计成静态方法, 这样我们不需要创建对象就可以使用, 比如打印一维数组, 冒泡排序, 完成某个计算任务等等</p></li><li><p>类方法和普通方法都是随着类的加载而加载, 将结构信息存储在方法区: 类方法中无this的参数</p></li><li><p>普通方法和对象有关, 需要通过对象名调用, 类方法可以通过类名调用, 也可以通过对象名调用</p></li><li><p>类方法中不允许使用和对象有关的关键字, 比如this和super. 普通方法可以</p></li><li><p>类方法中只能访问静态变量或静态方法</p></li><li><p>普通成员方法, 既可以访问普通变量(方法), 也可以访问静态变量(方法)    (必须遵守访问权限)</p></li></ol><h3 id="深入理解main方法"><a href="#深入理解main方法" class="headerlink" title="深入理解main方法"></a>深入理解main方法</h3><ol><li><p>main方法是虚拟机调用</p></li><li><p>java虚拟机需要调用类的main()方法, 所以该方法的访问权限必须是public</p></li><li><p>java虚拟机在执行main()方法时不必创建对象, 所以该方法必须是static</p></li><li><p>该方法接收String类型的数组参数, 该数组中保存执行java命令时传递给所运行的类的参数</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//args 是如何传入</span>        <span class="token comment" spellcheck="true">//遍历显示</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个参数="</span> <span class="token operator">+</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/944b61344229491f9de7e0dd064d77ae.png" alt="img"></p></li><li><p>java 执行的程序 参数1 参数2 参数3</p><p><img src="https://img-blog.csdnimg.cn/0b44bbf615da4983bea76d26ccad64b5.png" alt="img"></p></li><li><p>在main()方法中, 我们可以直接调用main方法所在类的静态方法或静态属性</p></li><li><p>但是不能直接访问该类中的非静态成员, 必须创建该类的一个实例对象后, 才能通过这个对象去访问类中的非静态成员</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main01</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//非静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可以直接使用name</span>        <span class="token comment" spellcheck="true">//1.静态方法可以访问本类的静态成员</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.静态方法不可以访问本类的非静态成员</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误</span>        Main01 main01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先创建一个本类的对象, 再调用n1</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> main01<span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ol><h3 id="代码块使用细节"><a href="#代码块使用细节" class="headerlink" title="代码块使用细节"></a>代码块使用细节</h3><ol><li><p>static代码块也叫静态代码块, 作用就是对类进行初始化, 而且它随着<strong>类的加载</strong>而执行, 并且<strong>只会执行一次</strong>(因为类加载只会一次). 如果是普通代码块, 每创建一次对象, 就执行</p></li><li><p>类什么时候被加载</p><ol><li>创建对象实例时(new)</li><li>创建子类对象实例时, 父类也会被加载</li><li>使用类的静态成员时(静态属性, 静态方法)</li></ol></li><li><p>普通的代码块, 在创建对象实例时, 会被隐式的调用. 被创建一次, 就会被调用一次. <strong>如果只是使用类的静态成员时, 普通代码块并不会执行</strong>(类加载与普通代码块没有关系)</p></li><li><p>创建一个对象时, 在一个类 调用顺序是 :</p><ol><li><p>调用静态代码块和静态属性初始化(注意 : 静态代码块和静态属性初始调用的优先级一样, 如果有多个静态代码块和多个静态变量初始化, 则按他们定义的顺序调用)</p><p><img src="https://img-blog.csdnimg.cn/865d90eff701405a93c4cff9430a258c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_16,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>调用普通代码块和普通属性的初始化(注意 : 普通代码块和普通属性初始化调用的优先级一样, 如果有多个普通代码块和多个普通属性初始化, 则按定义顺序调用)</p></li><li><p>调用构造器(优先级最低)</p></li></ol></li><li><p>构造器的最前面其实隐含了 super() 和 调用普通代码块,  静态相关的代码块, 属性初始化, 在类加载时, 就执行完毕了, 因此是优先于构造器和普通代码块执行的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//构造器</span>        <span class="token comment" spellcheck="true">//这里有隐藏的执行要求</span>        <span class="token comment" spellcheck="true">//1.super();//默认调用父类无参构造器</span>        <span class="token comment" spellcheck="true">//2.调用普通代码块</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>我们看一下创建一个子类时(继承关系), 他们的静态代码块, 静态属性初始化, 普通代码块, 普通属性初始化, 构造方法调用顺序如下 : </p><ol><li><p>父类的静态代码块和静态属性(优先级一样, 按定义顺序执行)</p></li><li><p>子类的静态代码块和静态属性(优先级一样, 按定义顺序执行)</p></li><li><p>父类的普通代码块和普通属性初始化(优先级一样, 按定义顺序执行)</p></li><li><p>父类的构造器</p></li><li><p>子类的普通代码块和普通属性初始化(优先级一样, 按定义顺序执行)</p></li><li><p>子类的构造器</p><p>解读 :</p><p>(1)进行类的加载</p><p>1.1 先加载父类   1.2 再加载子类</p><p>(2)创建对象</p><p>2.1从子类的构造器开始   2.2进入父类的构造器   2.3调用父类的普通代码块   2.4执行父类的构造器   2.5返回子类执行普通代码块   2.6执行子类的构造器</p></li></ol></li><li><p>静态代码块只能直接调用静态成员(静态属性和静态方法), 普通代码块可以调用任意成员</p></li></ol><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><h5 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h5><ol><li>构造器私有化    -  防止直接 new</li><li>类的内部创建对象(该对象是static)</li><li>向外暴露一个静态的公共方法, 返回对象</li><li>代码实现</li></ol><h5 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h5><ol><li>构造器私有化    -  防止直接 new</li><li>定义一个静态属性, 不直接new</li><li>向外暴露一个静态的公共方法, 返回对象</li><li>在静态公共方法里面进行判断此时是否创建对象, 如果没有创建对象, 那么就创建一个对象</li></ol><h6 id="饿汉式与懒汉式的区别"><a href="#饿汉式与懒汉式的区别" class="headerlink" title="饿汉式与懒汉式的区别"></a>饿汉式与懒汉式的区别</h6><ol><li>二者最主要的区别在于创建对象的时机不同 : 饿汉式是在类加载就创建了对象实例, 而懒汉式是在使用时才创建</li><li>饿汉式不存在线程安全问题, 懒汉式存在线程安全问题</li><li>饿汉式存在浪费资源的可能. 因为如果程序员一个对象都没有使用, 那么饿汉式创建的对象就浪费了, 懒汉式是使用时才创建, 就不存在这个问题.</li></ol><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>使用场景</p><ol><li>当不希望类被继承时</li><li>当不希望父类的某个方法被子类覆盖/重写</li><li>当不希望类的某个属性的值被修改(常量)</li><li>当不希望某个局部变量被修改(局部常量)</li></ol><h3 id="final细节"><a href="#final细节" class="headerlink" title="final细节"></a>final细节</h3><ol><li><p>final修饰的属性又叫常量, 一般用XX_XX_XX来命名</p></li><li><p>final修饰的属性在定义时, 必须赋初值, 并且以后不能再修改, 赋值可以在如下位置之一选择一个位置赋初值 :</p><ol><li>定义时 : <code>public final double TAX_RATE = 0.08;</code></li><li>在构造器中</li><li>在代码块中</li></ol><p><img src="https://img-blog.csdnimg.cn/bb9e3f349e234d1798bb71f9700fc7cc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>如果final修饰的属性是静态的, 则初始化的位置只能是 :</p><ol><li>定义时</li><li>静态代码块 (不能在构造器中赋值)</li></ol></li><li><p>final类不能继承, 但是可以实例化对象</p></li><li><p>如果类不是final类, 但是含有final方法, 则该方法虽然不能重写, 但是可以被继承</p></li><li><p>一般来说, 如果一个类已经是final类了, 就没有必要再将方法修饰成final方法</p></li><li><p>final不能修饰构造器</p></li><li><p>包装类, String都是final类</p></li><li><p>final 和 static 往往搭配使用, 效率更高, 不会导致类加载, 底层编译器做了优化处理</p><p><img src="https://img-blog.csdnimg.cn/4a880c11131d426d8234c9450c24aaf8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Something</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//final可以修饰形参</span>        <span class="token operator">++</span>x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,不能修改final x 的值</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以,没有改变x的值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>当父类的某些方法, 需要声明, 但是又不确定如何实现时, 可以将其声明为抽象方法, 那么这个类就是抽象类</p><h5 id="抽象类细节"><a href="#抽象类细节" class="headerlink" title="抽象类细节"></a>抽象类细节</h5><ol><li>抽象类不能被实例化</li><li>抽象类不一定要包含abstract方法. 也就是说, 抽象类可以没有abstract方法</li><li>一旦类包含了abstract方法, 则这个类必须声明为abstract</li><li>abstract只能修饰类和方法, 不能修饰属性和其他的</li><li>抽象类可以有任意成员(<strong>因为抽象类还是类</strong>), 比如 : 非抽象方法, 构造器, 静态属性等等</li><li>抽象方法不能有主体, 即不能实现</li><li>如果一个类继承了抽象类, 则它必须实现抽象类的所有抽象方法, 除非它自己也声明为abstract类</li><li>抽象方法不能使用private, final, static来修饰, 因为这些关键字都是和重写相违背的</li></ol><h3 id="模板设计模式-抽象类最佳实践"><a href="#模板设计模式-抽象类最佳实践" class="headerlink" title="模板设计模式-抽象类最佳实践"></a>模板设计模式-抽象类最佳实践</h3><p>抽象类体现的就是一种模板模式的设计, 抽象类作为多个子类的通用模板, 子类在抽象类的基础上进行扩展, 但子类总体上会保留抽象类的行为方式</p><ol><li>当功能内部一部分实现是确定的, 一部分实现是不确定的. 这时可以把不确定的部分暴露出去, 让子类去实现</li><li>编写一个抽象父类, 父类提供了多个子类的通用方法, 并把一个或多个方法留给其子类实现, 就是一种模板模式</li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><img src="https://img-blog.csdnimg.cn/74bae1f267994b6f95b010a268782f7a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="接口细节"><a href="#接口细节" class="headerlink" title="接口细节"></a>接口细节</h3><ol><li><p>接口不能实例化</p></li><li><p>接口中所有的方法是public方法, 接口中的抽象方法, 可以不用abstract修饰</p></li><li><p>一个普通类实现接口, 就必须将该接口的所有方法都实现</p></li><li><p>抽象类实现接口, 可以不用实现接口的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不会报错</span><span class="token punctuation">}</span></code></pre></li><li><p>一个类同时可以实现多个接口</p></li><li><p>接口中的属性, 只能是final的, 而且是 public static final 修饰符</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价 public static final int n1 = 10;</span><span class="token punctuation">}</span></code></pre></li><li><p>接口中属性的访问形式 : 接口名.属性名</p></li><li><p>接口不能继承其他类, 但是可以继承多个别的接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">,</span>C<span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li><li><p>接口的修饰符只能是public 和默认, 这点和类的修饰符是一样的</p></li></ol><h3 id="接口与继承的区别"><a href="#接口与继承的区别" class="headerlink" title="接口与继承的区别"></a>接口与继承的区别</h3><p>接口实现机制是对单继承机制的补充.</p><ol><li>当子类继承了父类, 就自动的拥有父类的功能</li><li>如果子类需要扩展功能, 可以通过实现接口的方式扩展</li></ol><p>接口和继承解决的问题不同</p><ol><li>继承的价值主要在于 : 解决代码的复用性和可维护性</li><li>接口的价值主要在于 : 设计, 设计好各种规范(方法),  让其他类去实现这些方法</li></ol><p>接口比继承更加灵活</p><ol><li>继承是满足 is - a 的关系, 而接口只需满足 like - a 的关系</li></ol><h3 id="接口多态特性"><a href="#接口多态特性" class="headerlink" title="接口多态特性"></a>接口多态特性</h3><ol><li><h5 id="多态参数-1"><a href="#多态参数-1" class="headerlink" title="多态参数"></a>多态参数</h5><p><img src="https://img-blog.csdnimg.cn/b054fa0d0bb24fa8ae76a5a63cf69b92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><h5 id="多态数组-1"><a href="#多态数组-1" class="headerlink" title="多态数组"></a>多态数组</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span>Usb<span class="token punctuation">[</span><span class="token punctuation">]</span> usbs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Usb</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>usbs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>usbs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Camera_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*给Usb数组中, 存放Phone 和 Camera 对象, Phone类还有一个特有的方法call(),请遍历Usb数组, 如果是Phone对象, 除了调用Usb 接口定义的方法外, 还需要调用Phone特有方法Call()*/</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> usbs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态绑定..</span>    <span class="token comment" spellcheck="true">//进行类型判断, 然后进行类型的向下转型</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Phone_</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>Phone_<span class="token punctuation">)</span>usbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//接口</span><span class="token keyword">interface</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone_</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机可以打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机工作中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Camera_</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相机工作中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><h5 id="接口的多态传递现象"><a href="#接口的多态传递现象" class="headerlink" title="接口的多态传递现象"></a>接口的多态传递现象</h5><p><img src="https://img-blog.csdnimg.cn/92027b5d5cdd4126be9060f752336045.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h5 id="类的五大成员-属性-方法-构造器-代码块-内部类"><a href="#类的五大成员-属性-方法-构造器-代码块-内部类" class="headerlink" title="类的五大成员: 属性, 方法, 构造器, 代码块, 内部类"></a>类的五大成员: 属性, 方法, 构造器, 代码块, 内部类</h5><p><img src="https://img-blog.csdnimg.cn/bf103c84540c4015b0a08d8708422064.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h5 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h5><p>定义在外部类局部位置上 (比如方法内)</p><ol><li>局部内部类 (有类名)</li><li>匿名内部类 (没有类名)</li></ol><p>定义在外部类的成员位置(属性或者方法)上</p><ol><li>成员内部类 (没用static修饰)</li><li>静态内部类 (使用static修饰)</li></ol><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外部类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//方法</span>        <span class="token comment" spellcheck="true">//1.局部内部类是定义在外部类的局部位置, 通常在方法</span>        <span class="token comment" spellcheck="true">//3.不能添加访问修饰符, 因为它的地位就是一个局部变量. 局部变量不能使用修饰符, 但是可以使用final修饰, 因为局部变量也可以使用final</span>        <span class="token comment" spellcheck="true">//4.作用域 : 仅仅在定义他的方法或代码块中</span>        <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//局部内部类</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员重名</span>            <span class="token comment" spellcheck="true">//2.可以直接访问外部类的所有成员, 包含私有的</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//解读: Outer01.this 本质就是外部类的对象, 即哪个对象调用了m1, Outer01.this就是哪个对象</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部类的n1="</span> <span class="token operator">+</span> Outer01<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5.外部类在方法中, 可以创建内部类的对象,然后调用方法(注意: 必须在作用域内)</span>        <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token function">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//6.外部其他类, 不能访问局部内部类</span><span class="token comment" spellcheck="true">//7.如果外部类和局部内部类的成员重名时, 默认遵循就近原则, 如果想访问外部类的成员, 则可以使用(外部类名.this.成员)去访问</span></code></pre><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类是定义在外部类的局部位置, 比如方法中, 并且没有类名</p><ol><li>本质是类</li><li>是一个内部类</li><li>该类没有名字</li><li>同时还是一个对象</li></ol><p>//基于接口的匿名内部类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//需求: 想使用IA接口, 并创建对象</span><span class="token comment" spellcheck="true">//传统方式: 是写一个类(Dog类), 实现该接口, 并创建对象</span><span class="token comment" spellcheck="true">//但是如果我们 Dog只是使用一次, 后面不再使用</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//使用匿名内部类</span><span class="token comment" spellcheck="true">//此时 Dog的编译类型是 IA, 运行类型是匿名内部类</span>IA Dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗狗叫唤..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意分号</span></code></pre><p>//基于类的匿名内部类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//father 编译类型 Father, 运行类型是匿名内部类</span><span class="token comment" spellcheck="true">//注意("jack")参数列表会传递给 构造器</span>Father father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fatehr</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类重写了test方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>father<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果此时father是一个抽象类</span><span class="token comment" spellcheck="true">//那么必须要是实现抽象类中的抽象方法</span></code></pre><h3 id="匿名内部类的细节"><a href="#匿名内部类的细节" class="headerlink" title="匿名内部类的细节"></a>匿名内部类的细节</h3><ol><li><p>两种调用方法, 匿名内部类既是一个类的定义, 同时它本身也是一个对象</p><p><img src="https://img-blog.csdnimg.cn/e24e58a0c759419fb520697ce18431a5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>可以直接访问外部类的所有成员, 包含私有的</p></li><li><p>不能添加访问修饰符, 因为它的地位就是一个局部变量</p></li><li><p>作用域 : 仅仅在定义它的方法或代码块中</p></li><li><p><strong>外部其他类不能访问匿名内部类</strong></p></li><li><p>如果外部类和匿名内部类的成员重名时,  默认遵循就近原则,  如果想访问外部类的成员,  则可以使用(外部类名.this.成员)去访问</p></li></ol><h3 id="匿名内部类实践-当作实参直接传递"><a href="#匿名内部类实践-当作实参直接传递" class="headerlink" title="匿名内部类实践-当作实参直接传递"></a>匿名内部类实践-当作实参直接传递</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span>IL il<span class="token punctuation">)</span><span class="token punctuation">{</span>    il<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//当作实参直接传递  </span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IL</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外部类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//成员内部类, 是定义在外部内的成员位置上</span>    <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//成员内部类</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可以直接访问外部类的所有成员, 包含私有的</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1 ="</span> <span class="token operator">+</span> n1 <span class="token operator">+</span> <span class="token string">"name ="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//写方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用成员内部类</span>        Inner01 inner01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner01<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.可以添加任意访问修饰符(public, protected, 默认, private) 因为它的地位就是一个成员</span><span class="token comment" spellcheck="true">//2.成员内部类 - 访问 - 外部类成员</span><span class="token comment" spellcheck="true">//    访问方式 : 直接访问</span><span class="token comment" spellcheck="true">//3.外部类 - 访问 - 成员内部类</span><span class="token comment" spellcheck="true">//  访问方式 : 创建对象,再访问</span><span class="token comment" spellcheck="true">//4.如果外部类和内部类的成员重名时, 默认遵循就近原则, 如果想访问外部类的成员, 则可以使用(外部类名.this.成员)去访问</span></code></pre><h5 id="外部其他类-访问-成员内部类-看别人博客"><a href="#外部其他类-访问-成员内部类-看别人博客" class="headerlink" title="外部其他类 - 访问 - 成员内部类  //看别人博客"></a>外部其他类 - 访问 - 成员内部类  //看别人博客</h5><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>使用static修饰, 定义在外部类的成员位置</p><ol><li><p>可以直接访问外部类的所有静态成员, 包含私有的, 但不能直接访问非静态成员</p></li><li><p>可以添加任意访问修饰符 (public, protected, 默认, private), 因为它的地位就是一个成员</p></li><li><p>静态内部类 - 访问 - 外部类</p><p>访问方式 : 直接访问所有静态成员</p></li><li><p>外部类 - 访问 - 静态内部类 </p><p>访问方式 : 创建对象, 再访问</p></li><li><h5 id="外部其他类-访问-静态内部类-看别人博客"><a href="#外部其他类-访问-静态内部类-看别人博客" class="headerlink" title="外部其他类 -  访问 - 静态内部类 // 看别人博客"></a>外部其他类 -  访问 - 静态内部类 // 看别人博客</h5></li><li><p>如果外部类和静态内部类的成员重名时,   默认遵循就近原则,   如果想访问外部类的成员,   则可以使用(外部类名.成员)去访问</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记二</title>
      <link href="/2020/01/15/java-note02/"/>
      <url>/2020/01/15/java-note02/</url>
      
        <content type="html"><![CDATA[<h1 id="Java笔记二"><a href="#Java笔记二" class="headerlink" title="Java笔记二"></a>Java笔记二</h1><h2 id="第四章-程序流程控制"><a href="#第四章-程序流程控制" class="headerlink" title="第四章 程序流程控制"></a>第四章 程序流程控制</h2><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ol><li>switch 关键字, 表示switch分支</li><li>表达式 对应一个值</li><li>case 常量1: 当表达式的值等于常量1, 就执行 语句块1</li><li>break: 表示退出switch</li><li>如果和case 常量1匹配, 就执行语句块1, 如果没有匹配, 就继续匹配case 常量2</li><li>如果一个都没有匹配上, 执行default</li></ol><h3 id="switch细节"><a href="#switch细节" class="headerlink" title="switch细节"></a>switch细节</h3><ol><li><p>表达式数据类型, 应和case后的常量类型一致, 或者是可以自动转成可以相互比较的类型, 比如输入的是字符, 而常量是int</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">20</span> <span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>switch(表达式)中表达式的返回值必须是:(byte, short, int, char, enum[枚举], String)</p></li><li><p>case子句中的值必须是常量, 而不能是变量</p></li><li><p>default子句是可选的</p></li><li><p>break语句是用来在执行完一个case分支后使程序跳出switch语句块, 如果没有写break, 会出现<strong>穿透现象</strong>(程序会顺序执行到switch结尾)</p></li></ol><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>当return用在方法时, 表示跳出方法, 如果使用在main, 表示退出程序</p><p>谁调用(接收), 就返回给谁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> returnRes <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把方法 getSum 返回的值 ,赋给 变量 returnRes</span></code></pre><h2 id="第五章-数组-排序"><a href="#第五章-数组-排序" class="headerlink" title="第五章 数组\排序"></a>第五章 数组\排序</h2><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>数据类型[] 数组名 = {元素值, 元素值, …}</p><p><code>int[] a = {1,2,3,4...};</code> </p><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>数据类型[] 数组名 = new 数据类型[大小]</p><p><code>int[] a = new int[3];</code></p><hr><p><code>double[] a;</code>先声明数组</p><p><code>a = new double[5];</code>再分配内存空间</p><h3 id="数组细节"><a href="#数组细节" class="headerlink" title="数组细节"></a>数组细节</h3><ol><li><p>数组是多个相同类型数据的组合, 实现对这些数据的统一管理.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//double -> int 错误  需要满足自动转换</span></code></pre></li><li><p>数组中的元素可以是任何数据类型, 包括基本类型和引用类型, 但是不能混用</p></li><li><p>数组创建后, 如果没有赋值, 有默认的值. String null / int 0 / short 0 / byte 0 / long 0 / float 0.0 double 0.0 / char \u0000 / boolean false</p></li><li><p>数组的下标是从0开始的.</p></li><li><p>注意越界</p></li><li><p>数组属于引用类型, 数组型数据是对象</p></li></ol><h3 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h3><ol><li><p>基本数据类型赋值, 赋值方式为值拷贝(值传递), 不会相互影响.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//n2的变化, 不会影响到n1的值</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> n1<span class="token punctuation">;</span>n2 <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出n1的值为 10</span></code></pre></li><li><p>数组在默认情况下是引用传递, 赋的值是地址, 赋值方式为引用赋值(地址拷贝)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//是一个地址, arr2变化会影响到arr1</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出arr1的值为 10, 2, 3</span></code></pre></li></ol><h3 id="值传递-值拷贝-和-引用传递-地址拷贝-的区别"><a href="#值传递-值拷贝-和-引用传递-地址拷贝-的区别" class="headerlink" title="值传递(值拷贝) 和 引用传递(地址拷贝)的区别"></a><strong><u>值传递(值拷贝) 和 引用传递(地址拷贝)的区别</u></strong></h3><p><img src="https://img-blog.csdnimg.cn/50310e663fa54f9c865451b2d132cdaf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>在内存里面只要分配了一个数据空间, 一定会对应一个地址.</p><p><img src="https://img-blog.csdnimg.cn/65cec621a9144fcca7e184b8b854ddc5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>⬇</p><p><img src="https://img-blog.csdnimg.cn/40586b7e294f41ae8ec65f51d7b431d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="数组拷贝-内容复制"><a href="#数组拷贝-内容复制" class="headerlink" title="数组拷贝(内容复制)"></a>数组拷贝(内容复制)</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将 int[] arr1 = {10,20,30}; 拷贝到 arr2数组, 要求数据空间是独立的.</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个新的数组arr2, 开辟新的空间, 大小和arr1一样</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历 arr1 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式一:</span><span class="token comment" spellcheck="true">//1.把arr[0] 和 arr[5] 进行交换</span><span class="token comment" spellcheck="true">//2.把arr[1] 和 arr[4] 进行交换</span><span class="token comment" spellcheck="true">//3.把arr[2] 和 arr[3] 进行交换</span><span class="token comment" spellcheck="true">//4.一共要交换 3 次 = arr.length / 2</span><span class="token comment" spellcheck="true">//5.每次交换时, 对应的下标是arr[i] 和 arr[arr.length - 1 - i]</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式二</span><span class="token comment" spellcheck="true">//逆序赋值法</span><span class="token comment" spellcheck="true">//1.创建一个新的数组 arr2</span><span class="token comment" spellcheck="true">//2.逆序遍历arr, 将每个元素拷贝到 arr2的元素中</span><span class="token comment" spellcheck="true">//3.将arr 指向 arr2</span><span class="token comment" spellcheck="true">//注意 : 让 arr 指向 arr2数据空间, 此时 arr原来的数据空间就没有变量引用, 会被当成垃圾, 销毁</span></code></pre><h3 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h3><p>数组不能扩容, 必须新定义一个新的数组, 把原先的数组内容遍历给新的数组中, 再赋新的元素.</p><h3 id="冒泡排序-从小到大"><a href="#冒泡排序-从小到大" class="headerlink" title="冒泡排序(从小到大)"></a>冒泡排序(从小到大)</h3><ol><li>每一轮排序可以确定一个数的位置, 比如第一轮排序确定最大数, 第二轮排序确定第二大的数的位置, 以此类推</li><li>当进行比较时, 如果前面的数大于后面的数, 就交换</li><li>每轮比较在减少 例如: 4-&gt;3-&gt;2-&gt;1</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于辅助交换的变量</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==第一轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n==第二轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n==第三轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n==第四轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>合并代码<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//外层循环是4次</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//4次比较-3次-2次-1次</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p><code>int[] [] arr = {{0,0,0},{1,1,1},{2,2,2}};</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二维数组的每个元素是一维数组,所以要得到每个一维数组的值,还需要再次遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遍历二维数组的每个元素</span>    <span class="token comment" spellcheck="true">//1.arr[i] 表示 二维数组的i+1个元素  比如arr[0] : 二维数组的第一个元素</span>    <span class="token comment" spellcheck="true">//2.arr[i].length 得到对应的每个一维数组的长度</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>int[] [] arr = new int [2][3]</code>      二维数组内存形式 :</p><p><img src="https://img-blog.csdnimg.cn/53d52bacc1534fc89f01570fe32ab5a9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="动态初始化-列数不确定"><a href="#动态初始化-列数不确定" class="headerlink" title="动态初始化-列数不确定"></a>动态初始化-列数不确定</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*i = 0: 1i = 1: 2 2i = 2: 3 3 3一个有三个一维数组, 每一个一维数组的元素是不一样的*/</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建二维数组,但是只是确定一维数组的个数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遍历arr每个一维数组</span>    <span class="token comment" spellcheck="true">//给每个一维数组开空间</span>    <span class="token comment" spellcheck="true">//如果没有给一维数组 new, 那么arr[i]就是null</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历一维数组, 并给一维数组的每个元素赋值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第六章-面向对象"><a href="#第六章-面向对象" class="headerlink" title="第六章 面向对象"></a>第六章 面向对象</h2><h3 id="对象在内存中的存在形式"><a href="#对象在内存中的存在形式" class="headerlink" title="对象在内存中的存在形式"></a>对象在内存中的存在形式</h3><p>对象也是一个引用数据类型.</p><p><img src="https://img-blog.csdnimg.cn/47cbef86fd4446b0ae1ddcf16721d22f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="对象创建的流程分析"><a href="#对象创建的流程分析" class="headerlink" title="对象创建的流程分析"></a>对象创建的流程分析</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//main中</span>Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>在方法区中加载Person类信息(Person.class), 只会加载一次</li><li>在堆中分配空间(地址)</li><li>完成对象的初始化[3.1 默认初始化 age = 0 name = null  3.2 显式初始化 age = 90 name = null  3.3 构造器的初始化 age = 20 name = jack(字符串,堆中的对象的name地址指向在常量池中jack)]</li><li>对象在堆中的地址, 返回给p(p是对象名, 也可以理解成是对象的引用)</li></ol><h3 id="对象分配机制"><a href="#对象分配机制" class="headerlink" title="对象分配机制"></a>对象分配机制</h3><pre class=" language-java"><code class="language-java">Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>Person p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把p1赋给了p2 , 让p2指向p1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p2,age是什么?</span></code></pre><p><img src="https://img-blog.csdnimg.cn/0b6566b84499482f85e0f2918b12f2c2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//公有类</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Test类的成员方法</span>        count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个count就是属性 改成10</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count1="</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Test类的成员方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count2="</span> <span class="token operator">+</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这是Test类的main方法, 任何一个类,都可以有main</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. new Test() 是匿名对象, 匿名对象使用后, 就不能再使用(一次性)</span>        <span class="token comment" spellcheck="true">//2. new Test().count1() 创建好匿名对象后, 就调用count1()</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Java内存的结构分析"><a href="#Java内存的结构分析" class="headerlink" title="Java内存的结构分析:"></a>Java内存的结构分析:</h3><ol><li>栈: 一般存放基本数据类型(局部类型)</li><li>堆: 存放对象</li><li>方法区: 常量池(常量, 比如字符串), 类加载信息</li></ol><p><img src="https://img-blog.csdnimg.cn/b8de488856e447fdbad03ed281b2f2d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="属性-成员变量-字段-细节"><a href="#属性-成员变量-字段-细节" class="headerlink" title="属性(成员变量\字段)细节"></a>属性(成员变量\字段)细节</h3><ol><li>属性的定义语法变量, 示例 : 访问修饰符 属性类型 属性名;</li><li>属性的定义类型可以为任意类型, 可以是基本类型或引用类型.</li><li>属性如果不赋值, 有默认值. 和数组一样.  String null / int 0 / short 0 / byte 0 / long 0 / float 0.0 double 0.0 / char \u0000 / boolean false</li></ol><h3 id="方法调用机制"><a href="#方法调用机制" class="headerlink" title="方法调用机制"></a>方法调用机制</h3><p>当返回后, <code>getSum</code>栈就被释放(销毁)了</p><p><img src="https://img-blog.csdnimg.cn/a56f21648e8a43f788f22769c046b846.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><ol><li>当程序执行到方法时, 就会开辟一个独立的空间(栈空间)</li><li>当方法执行完毕, 或者执行到return语句时, 就会返回</li><li>返回到调用方法的地方</li><li>返回后, 继续执行方法后面的代码</li><li>当main方法(栈)执行完毕, 整个程序退出</li><li><strong>基本数据类型, 传递的是值(值拷贝), 形参的任何改变不影响实参</strong>(方法传参机制)</li><li><strong>引用数据类型, 传递的是地址(传递也是值, 但是值是地址), 形参的改变会影响到实参</strong>(方法传参机制)</li></ol><h3 id="方法使用细节"><a href="#方法使用细节" class="headerlink" title="方法使用细节"></a>方法使用细节</h3><ol><li><p>一个方法<strong>最多有一个</strong>返回值, [ 如果要返回多个结果 , 返回数组 ]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span><span class="token keyword">int</span> n2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    resArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>    resArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">;</span>    <span class="token keyword">return</span> resArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>返回类型可以是任意类型, 包括基本类型或引用类型</p></li><li><p>如果方法要求有<strong>返回数据类型</strong>, 则方法体中最后的执行语句必须为 return 值, 而且要求返回值类型必须和 return 值类型一致或兼容(自动转换)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                               <span class="token comment" spellcheck="true">//错误,缺少返回语句</span><span class="token punctuation">}</span></code></pre></li><li><p>如果方法是void, 则方法体中可以没有return语句, 或者 只写return(不能有返回值)</p></li><li><p>同一个类中的方法, 直接调用</p></li><li><p>跨类中方法A类调用B类方法, 需要通过对象名调用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类中的 m1()被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建对象</span>        b<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类中的 m1()继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类中的 hi()被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="形参列表的细节"><a href="#形参列表的细节" class="headerlink" title="形参列表的细节"></a>形参列表的细节</h3><ol><li>一个方法可以有0个参数, 也可以有多个参数, 中间用逗号隔开</li><li>参数类型可以是任意类型, 包括基本类型或引用类型</li><li>调用带参数的方法时, 一定对应着参数列表相同类型或者兼容类型(低精度向高精度) 的参数</li><li>方法定义时的参数称为形式参数, 方法调用时的传入参数称为实际参数</li><li>实参和形参的类型要一致或者兼容, 个数, 顺序必须一致</li></ol><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>java允许方法名相同, 但是要求<strong>形参列表不同</strong></p><p>返回类型没有要求</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>java允许将同一个类中<strong>多个同名同功能</strong>但参数个数不同的方法, 封装成一个方法, 通过可变参数实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HspMethod</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//计算2个数的和, 3个数的和, 4.....</span>    <span class="token comment" spellcheck="true">//可以使用方法的重载(但是繁琐)</span>        <span class="token comment" spellcheck="true">//使用可变参数封装成方法</span>    <span class="token comment" spellcheck="true">//1.   int...表示接收的是可变参数, 类型是int, 即可以接收多个int(0 - 多)</span>    <span class="token comment" spellcheck="true">//2. 使用可变参数时, 可以当作数组来使用 即nums可以当作数组</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收的参数的个数:"</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//遍历求和</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="可变参数的细节"><a href="#可变参数的细节" class="headerlink" title="可变参数的细节"></a>可变参数的细节</h6><ol><li><p>可变参数的实参可以是数组</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>T t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ti<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度="</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>可变参数的本质是数组</p></li><li><p>可变参数可以和普通类型的参数一起放在形参列表, 但必须保证可变参数放在最后</p></li><li><p>一个形参列表只能出现一个可变参数</p></li></ol><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>局部变量与全局变量(属性变量)</p><p>全局变量可以不赋值, 直接使用, 因为有默认值, 局部变量必须赋值后才能使用, 因为没有默认值</p><h6 id="作用域细节"><a href="#作用域细节" class="headerlink" title="作用域细节"></a>作用域细节</h6><ol><li><p>属性和局部变量可以重名, 访问时遵循就近原则</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//就近原则</span>        String name <span class="token operator">=</span> <span class="token string">"king"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出的是king</span></code></pre></li><li><p>属性生命周期较长, 伴随着对象的创建而创建,伴随着对象的销毁而销毁. 局部变量,生命周期较短, 伴随着它的代码块的执行而创建, 伴随着代码块的结束而销毁. 即在一次方法调用过程中.</p></li><li><p>作用域范围不一样</p><p>全局变量 : 被本类使用或者其他类使用(需要通过对象的调用)</p><p>局部变量 : 只能被本类中对应的方法中使用</p></li><li><p>修饰符的不同</p><p>全局变量 : 可以加修饰符</p><p>局部变量 : 不能加修饰符</p></li></ol><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 方法名<span class="token punctuation">(</span>和类名保持一致<span class="token punctuation">)</span> <span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    方法体<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//构造器没有返回值</span><span class="token comment" spellcheck="true">//主要作用是初始化</span></code></pre><h6 id="构造器细节"><a href="#构造器细节" class="headerlink" title="构造器细节"></a>构造器细节</h6><ol><li><p>一个类可以定义多个构造器, 即构造器的重载</p></li><li><p>如果程序员没有定义构造器, 系统会自动给类生成一个默认无参构造器(也叫默认构造器), 比如 <code>Dog(){}</code></p></li><li><p>一旦定义了自己的构造器, 默认的构造器就覆盖了, 就不能再使用默认的无参构造器, 除非显式的定义一下, 即<code>Dog(){}</code></p><pre class=" language-java"><code class="language-java">Dog dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用的是默认的无参构造器</span></code></pre></li></ol><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//this.name 就是当前对象的属性name</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//this.age 就是当前对象的属性age</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="深入理解this"><a href="#深入理解this" class="headerlink" title="深入理解this"></a>深入理解this</h6><p><img src="https://img-blog.csdnimg.cn/7f8ed585f0384da88a736e8c191a247a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>虚拟机会给每个对象分配this, 代表当前对象</p><p>哪个对象调用, this就代表哪个对象</p><h3 id="this细节"><a href="#this细节" class="headerlink" title="this细节"></a>this细节</h3><ol><li><p>this关键字可以用来访问本类的属性, 方法, 构造器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//传统方式(按照的是就近原则访问属性,但是如果在方法中有局部变量,那么这个name就是局部变量,不是属性)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"num="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//也可以使用this访问属性(准确定位到属性)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"num="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>this用于区分当前类的属性和局部变量</p></li><li><p>访问成员方法的语法 : this.方法名(参数列表)</p></li><li><p>访问构造器语法 : this(参数列表)    <strong>只能在构造器中使用(即只能在构造器中访问本类另外一个构造器)</strong>   如果有访问构造器语法 : this(参数列表); <em><strong>必须放在第一条语句</strong></em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里去访问 T(String name, int age) 构造器</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"T() 构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">T</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"T(String name, int age) 构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>this不能在类定义的外部使用, 只能在类定义的方法中使用</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门语法</title>
      <link href="/2019/03/26/java-note-firstedition/"/>
      <url>/2019/03/26/java-note-firstedition/</url>
      
        <content type="html"><![CDATA[<h1 id="Java入门语法"><a href="#Java入门语法" class="headerlink" title="Java入门语法"></a>Java入门语法</h1><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ol><li><p>String(字符串)</p><p>类型   变量名 = 变量的值</p></li><li><p>int(整数)</p><p><code>int    a    =    10</code></p></li><li><p>double(小数)</p><p><code>double   a   =   12.34</code></p></li><li><p>boolean(布尔)</p><p>表示是/否     <code>boolean    a = true</code></p></li></ol><h3 id="表达式与操作符"><a href="#表达式与操作符" class="headerlink" title="表达式与操作符"></a>表达式与操作符</h3><ol><li><p>算术操作符</p><p>+,   -,   *,   /,  %(模运算)</p><p>模运算：两数相除，取余数</p></li><li><p>赋值操作符</p><p>a =  b+c</p><ol><li>计算右侧的表达式</li><li>把值赋给左边的变量</li></ol></li><li><p>关系操作符</p><p>&gt;,  &lt;,  &lt;=,  &gt;=,  ==, !=</p></li><li><p>逻辑操作符</p><p>&amp;&amp;  ，  ||  ，  ！</p><p>与          或       非</p></li><li><p>自增操作符</p><p>a  =  b++                           a  = ++b</p><p>​     👇                                      👇</p><p>a = b;                                   ++b;</p><p>b++;                                     a=b;</p></li></ol><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ol><li><p>break</p><p>中断当前循环，直接跳出循环</p></li><li><p>continue</p><p>跳出本轮循环，直接进入下一轮</p></li></ol><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>int[]                a     =     new    int[5];</p><p>数组类型       名字</p><p>int[]                 a    ={13,8,20,7,21};</p><h3 id="String-API"><a href="#String-API" class="headerlink" title="String API"></a>String API</h3><h5 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a><code>equals()</code>方法</h5><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"ddnihao"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"Ddnihao"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//区分大小写</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//制表位,实现对齐功能\t</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京\t天津\t上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个回车\r</span><span class="token comment" spellcheck="true">//解读</span><span class="token comment" spellcheck="true">//1.输出 韩顺平教育</span><span class="token comment" spellcheck="true">//2.\r表示回车</span><span class="token comment" spellcheck="true">//3.会把光标从最后面顶到前面:北京平教育</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"韩顺平教育\r北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双引号转义\"</span>String str <span class="token operator">=</span><span class="token string">"我的名字是\"哒哒\""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//换行符转义\n</span>String str <span class="token operator">=</span> <span class="token string">"哒哒\n你好\nddnihao.cn"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反斜杠转义\\</span>String str <span class="token operator">=</span> <span class="token string">"C:\\Windows\\notepad.exe"</span><span class="token punctuation">;</span></code></pre><h5 id="子串和查找"><a href="#子串和查找" class="headerlink" title="子串和查找"></a>子串和查找</h5><p>​    <code>substring(begin,end)</code>,用于获取子串</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"ddnihao"</span><span class="token punctuation">;</span>String s1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从[2]到[6],不包括[6]</span>String s2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从[2]到末尾</span></code></pre><p>​    <code>indexOf()</code>,用于查找子串</p><pre class=" language-java"><code class="language-java">String url <span class="token operator">=</span> <span class="token string">"http://dadanihao.cn/java/index.html"</span><span class="token punctuation">;</span><span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"da"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//url.indexOf("da")返回子串出现的位置.若未找到,则返回-1</span><span class="token comment" spellcheck="true">//indexOf()的几种用法,可以指定查找的范围</span><span class="token comment" spellcheck="true">//url.indexOf(a);从头开始找</span><span class="token comment" spellcheck="true">//url.indexOf(a,fromindex);从fromindex处开始查找</span><span class="token comment" spellcheck="true">//url.lastIndexOf(a);从后往前查找</span></code></pre><h5 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h5><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"名称:%s 数量:%d 价格:%f"</span><span class="token punctuation">,</span><span class="token string">"小龙虾"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//%s字符串,%04d整数(04表示补齐4位整数显示,不足则填零),%.2f浮点数(.2表示小数点后面保留两位)</span></code></pre><h5 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h5><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"dadanihao"</span><span class="token punctuation">;</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//转换成大写</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//转换成小写</span></code></pre><h5 id="去除空白字符"><a href="#去除空白字符" class="headerlink" title="去除空白字符"></a>去除空白字符</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//trim()用于去除字符串左右两边的空白字符</span>String s <span class="token operator">=</span> <span class="token string">"  哒哒 你好  "</span><span class="token punctuation">;</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="前缀和后缀的判断"><a href="#前缀和后缀的判断" class="headerlink" title="前缀和后缀的判断"></a>前缀和后缀的判断</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//str.startsWith(a);判断是否以a为前缀</span><span class="token comment" spellcheck="true">//str.endssWith(a);判断是否以a为后缀</span>String fileName <span class="token operator">=</span> <span class="token string">"Java_Primer_23_01 String.mp4"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是视频文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//比如一个字符串中以逗号分开,表示若干姓名.用split()分割得到String[]数组</span>String s <span class="token operator">=</span> <span class="token string">"小猪, 小王, 小李"</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//传入分割符</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>names<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Integer-API"><a href="#Integer-API" class="headerlink" title="Integer  API"></a>Integer  API</h3><pre class=" language-java"><code class="language-java">Integer a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//（对象）是一个类,提供了一些方法</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是一个基本类型</span><span class="token comment" spellcheck="true">//Integer与int的转换</span>Integer a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//int->Integer</span><span class="token keyword">int</span> value <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Integer->int</span><span class="token comment" spellcheck="true">//Integer与String的转换</span><span class="token comment" spellcheck="true">//String->Integer</span>Integer a <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//静态方法</span><span class="token comment" spellcheck="true">//Integer->String</span>String str1 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String str2 <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符串拼接时,自动toString()</span></code></pre><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><pre class=" language-java"><code class="language-java">Student<span class="token punctuation">[</span><span class="token punctuation">]</span> sss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//需要创建对象</span><span class="token comment" spellcheck="true">//错误写法</span>sss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确写法</span><span class="token comment" spellcheck="true">//Student s0 = new Student();</span><span class="token comment" spellcheck="true">//s0.id = 1000;</span><span class="token comment" spellcheck="true">//sss[0] = s0;</span><span class="token comment" spellcheck="true">//或者</span>sss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></code></pre><h3 id="Date-API"><a href="#Date-API" class="headerlink" title="Date API"></a>Date API</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查看当天的日期,使用Data.toString()</span>Data today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日期格式化,使用年月时分秒形式</span>SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String str = today.toString();</span>String str <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用一个整数表示时间</span><span class="token keyword">long</span> time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示自1970-1-1 00:00:00开始到现在</span><span class="token comment" spellcheck="true">//时间值可以和Date类型直接转换</span>Date now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">long</span> t <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Calendar日历"><a href="#Calendar日历" class="headerlink" title="Calendar日历"></a>Calendar日历</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个Calendar的对象</span>Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//必须通过其静态方法创建,默认的,cal为当前时间</span><span class="token comment" spellcheck="true">//获取年月日时分秒的值</span><span class="token comment" spellcheck="true">//年</span><span class="token keyword">int</span> year <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//月:从0开始计算,范围0,1,2,...,11</span><span class="token keyword">int</span> month <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//天:本月第几天,范围1,2,3,...,31</span><span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小时:24小时制,范围0,1,2,...,23</span><span class="token keyword">int</span> hour <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分钟:范围0,1,2,...,59</span><span class="token keyword">int</span> minute <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//秒:范围0,1,2,...,59</span><span class="token keyword">int</span> second <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//星期几:本周第几天,范围1,2,...,7,星期日为1</span><span class="token keyword">int</span> dayOfWeek <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//DAY_OF_YEAR:当年第几天,范围1,2,...,366</span><span class="token keyword">int</span> dayOfYear <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置年月日时分秒</span><span class="token comment" spellcheck="true">//设置年月日"2020-6-7",注意月份从0开始计数</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置年月日时分秒"2020-6-7 20:15:48"</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置年</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置月,注意月份从0计算</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置日</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置时</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置分</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置秒</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//往前或往后推算,也可以按小时,月等推算</span><span class="token comment" spellcheck="true">//前天</span>cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//30天后</span>cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//具体看JAVA的Calendar的文档</span></code></pre><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//字段（属性）Fields</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><pre class=" language-java"><code class="language-java">Student gao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用</span>Student lovely <span class="token operator">=</span> gao<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例ID(instance ID)： 指的是同一个对象。</span></code></pre><h3 id="对象的比较"><a href="#对象的比较" class="headerlink" title="对象的比较"></a>对象的比较</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对象的比较,有两种情况,须仔细分辨</span><span class="token comment" spellcheck="true">//equals()方法只能用在String类型</span><span class="token comment" spellcheck="true">//假设a,b为两个对象</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断a,b是否为同一对象(instance ID是否相同)</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断a,b内容是否相同,用于对象内容的比较</span></code></pre><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Fields</span>    <span class="token comment" spellcheck="true">//Methods:</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playmusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>创建对象</li><li>调用</li></ol><h5 id="方法的参数："><a href="#方法的参数：" class="headerlink" title="方法的参数："></a>方法的参数：</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playmusic</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        参数的类型和个数需要匹配。</p><h5 id="方法的返回值："><a href="#方法的返回值：" class="headerlink" title="方法的返回值："></a>方法的返回值：</h5><p>​    返回给调用他的方法</p><p>​    return</p><h5 id="方法的重载："><a href="#方法的重载：" class="headerlink" title="方法的重载："></a>方法的重载：</h5><p>​    可以重名，但参数需要不同</p><h3 id="权限修饰符："><a href="#权限修饰符：" class="headerlink" title="权限修饰符："></a>权限修饰符：</h3><p>​    public：公共的</p><p>​    protected：受保护的</p><p>​    default（friendly）：默认的就是友好的</p><p>​    private：私有的</p><table><thead><tr><th align="center">作用域</th><th align="center">当前类</th><th align="center">同一包</th><th align="center">其他包的子孙类</th><th align="center">其他包的类</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">friendly</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h3 id="使用JAR文件"><a href="#使用JAR文件" class="headerlink" title="使用JAR文件"></a>使用JAR文件</h3><ol><li>新建一个lib目录</li><li>拷贝*.jar文件到lib\下</li><li>右键Build Path | Add to Build Path…</li></ol><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>​    abstract</p><p>​    不能实例化：<code>PlanetKiller pk = new PlanetKiller();</code></p><h5 id="抽象类的实现"><a href="#抽象类的实现" class="headerlink" title="抽象类的实现"></a>抽象类的实现</h5><p>​    子类继承，填写父类遗留下来的方法</p><h3 id="接口类：表示一组要实现的功能，即技术规范"><a href="#接口类：表示一组要实现的功能，即技术规范" class="headerlink" title="接口类：表示一组要实现的功能，即技术规范"></a>接口类：表示一组要实现的功能，即技术规范</h3><p>​    接口的实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shoe</span> <span class="token keyword">implements</span> <span class="token class-name">HairDryer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    即只要实现了dry（）功能的设备，均可认为是一台吹风机。</p><h5 id="多接口继承"><a href="#多接口继承" class="headerlink" title="多接口继承"></a>多接口继承</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shoe</span> <span class="token keyword">implements</span> <span class="token class-name">HairDryer</span><span class="token punctuation">,</span>MusicPlayer<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用逗号分隔就可以了</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//完全形态：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">C</span><span class="token punctuation">,</span>D<span class="token punctuation">,</span>E<span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>​    是在内部中使用的</p><ol><li>关联了一个外部对象</li><li>可以自由访问，无视private限制</li></ol><h5 id="静态内部类（白眼狼）"><a href="#静态内部类（白眼狼）" class="headerlink" title="静态内部类（白眼狼）"></a>静态内部类（白眼狼）</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span></code></pre><ol><li><p>独立性，可以在外面使用</p><pre class=" language-java"><code class="language-java">Example<span class="token punctuation">.</span>XYZ x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example<span class="token punctuation">.</span>XYZ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>没有所谓的“当前外部对象”可用</p></li><li><p>体积较小</p></li></ol><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><pre class=" language-java"><code class="language-java">Arraylist<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li><p>添加一个元素</p><p><code>list.add(new Student(...));</code></p></li><li><p>删除一个元素</p><p><code>list.remove();</code></p></li><li><p>获取一个元素</p><p><code>Student  value = list.get();</code></p></li><li><p>列表长度</p><p><code>int   size   =  list.size();</code></p><p>​    多项删除时，从后往前，倒序遍历</p><p><e>应为引用类型，不能是值类型</e></p><p>//包装类</p><p>int→Integer</p><p>long→Long</p><p>shot→Shot</p><p>boolean→Boolean</p><p>….</p></li><li><p>排序</p><p><code>list.sort();</code></p></li></ol><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>​    key         →         value</p><p>数据项编号          数据项的类型</p><ol><li><p>创建一个哈希映射</p><pre class=" language-java"><code class="language-java">HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Student<span class="token operator">></span>  map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//其中Integer为编号类型，Student为值类型</span></code></pre></li><li><p>添加数据</p><p><code>map.put(key,value);</code></p></li><li><p>查找数据</p><p><code>value = map.get(key);</code></p></li><li><p>删除一次</p><p><code>map.remove(key);</code></p></li><li><p>清空所有项</p><p><code>map.clean();</code></p></li><li><p>检查是否存在</p><p><code>exsit  = map.containsKey(key);</code></p></li></ol><h3 id="静态对象"><a href="#静态对象" class="headerlink" title="静态对象"></a>静态对象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Config cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示全局对象</span></code></pre><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//静态方法是工具方法，可以直接调用</span><span class="token comment" spellcheck="true">//在静态方法中,不能访问this</span></code></pre><h3 id="重名"><a href="#重名" class="headerlink" title="重名"></a>重名</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学号</span>    <span class="token comment" spellcheck="true">//构造方法</span>    <span class="token keyword">public</span> <span class="token function">Studnet</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有this.*的代表当前属性</span>    <span class="token comment" spellcheck="true">//直接*的表示局部变量</span></code></pre><h3 id="Getter和Setter"><a href="#Getter和Setter" class="headerlink" title="Getter和Setter"></a>Getter和Setter</h3><p>​    当一个属性设为private的时候,外部如何访问它?</p><ol><li><p>Getter方法</p><p>例如,添加<code>public int getRadius()</code>来获取radius的值</p></li><li><p>Setter方法</p><p>例如,添加<code>public void setRadius(int radius)</code>设置radius的值</p></li><li><p>可以自动生成：右键/Source/  Generate Getters and Setters…</p></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Override重写</span>    <span class="token comment" spellcheck="true">//在子类里面,右键Source|Override Methods...</span>    <span class="token comment" spellcheck="true">//有两种选择:1.完全重写  2.部分重写:先调用父类super.*(),在此基础上再添加几句实现</span><span class="token comment" spellcheck="true">//构造方法的继承</span><span class="token keyword">public</span> <span class="token function">MyMp3File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//super()必须放在构造方法的第一行,super()可以省略不写,但是当父类的构造方法需要参数时</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在进行自己属性的初始化</span><span class="token punctuation">}</span></code></pre><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString() 方法"></a>toString() 方法</h3><p>Object.toString()，将一个对象以字符串表示，<u>一般用于辅助打印或者调试</u></p><p>每一个类都有toString()方法,继承自Object类</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li>重载：Overload</li><li>重写：Override</li><li>泛型：ArrayList/HashMap</li></ol><pre class=" language-java"><code class="language-java">Tree t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppleTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//前面是名义上的类型，后面是实际的类型</span><span class="token comment" spellcheck="true">//其中，AppleTree是Tree的子类：AppleTree也是一种Tree，具有Tree全部特征</span></code></pre><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ol><li><p>算术异常:ArithmeticException</p></li><li><p>越界异常:ArravIndexOutOfBoundsException</p></li><li><p>空指针异常:NullPointerException</p></li><li><p>非检查异常:Unchecked Exception</p><p>默认地,编译器会对异常做检查</p><p>-检查throws声明</p><p>-检查try{}catch{}匹配</p><p>​    但是RuntimeException类及其子类,编译器忽略对其检查</p></li><li></li></ol><h5 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//要监视的代码块</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这个参数表示可能出错的异常</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//若捕获到了异常,在此处理</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//异常机制</span><span class="token number">1</span><span class="token punctuation">.</span>立即从<span class="token keyword">try</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>退出<span class="token punctuation">,</span>类似<span class="token keyword">break</span>效果<span class="token number">2</span><span class="token punctuation">.</span>进入<span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token operator">-</span>Exception e<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//表示捕获到的异常对象</span><span class="token operator">-</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//异常类名</span><span class="token operator">-</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//异常描述</span><span class="token operator">-</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//打印函数栈找异常溯源</span><span class="token number">3</span><span class="token punctuation">.</span>在<span class="token keyword">try</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>捕获处理之后<span class="token punctuation">,</span>程序继续运行</code></pre><p>按类型捕获</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//监控代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//算术异常</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArravIndexOutOfBoundsException e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//越界异常</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>NullPointerException e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//空指针异常</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//最好可以添加一个默认Exception来防止漏捕</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认匹配,防止逃逸</span><span class="token punctuation">}</span></code></pre><h5 id="异常的抛出"><a href="#异常的抛出" class="headerlink" title="异常的抛出"></a>异常的抛出</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//一般形式为:</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Exception ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        thow ex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抛出异常,即向上报告一个异常</span>        <span class="token comment" spellcheck="true">//或者throw new Exception(...)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h5><p>finally,与try{…}联用,执行一些异常清理工作</p><p>一般形式为:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//要监视的代码块</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//若捕获到了异常,在此处理</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一些清理工作</span><span class="token punctuation">}</span>其中<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//1.若try{...}中有异常发生</span><span class="token comment" spellcheck="true">//则跳出try{}→执行catch{}→执行finally{}</span><span class="token comment" spellcheck="true">//2.若try{...}中没有异常发生</span><span class="token comment" spellcheck="true">//由执行try{}→执行finally{}</span>显然<span class="token punctuation">,</span><span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>总是会执行<span class="token punctuation">,</span>通常用于执行<span class="token operator">-</span>清理善后<span class="token operator">-</span>工作</code></pre><h3 id="文件与目录"><a href="#文件与目录" class="headerlink" title="文件与目录"></a>文件与目录</h3><p>File类是一个轻量级的类,不占资源.</p><p>file仅表示一个路径，并不会真的创建一个文件</p><p>显然,创建一个File对象不会包含文件中的数据,<u>和文件没啥关系</u></p><p>​    <code>java.io.File</code>,用于描述一个文件、目录的路径</p><p>​    eg：</p><pre class=" language-java"><code class="language-java">File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/example/123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/picture/"</span><span class="token punctuation">)</span></code></pre><h5 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h5><p>-<code>file.exists()</code>，判断它是否存在</p><p>-<code>file.isFile()/isDirectory()</code>，判断它是文件、还是目录</p><p>-<code>file.getName()</code>，返回文件名，含后缀</p><p>-<code>file.length()</code>，返回文件的长度，单位是字节</p><p>-<code>file.lastModified()</code>，返回文件的修改时间，时间值（ms）</p><p>-<code>file.getParentFile()</code>，返回上级目录</p><h5 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h5><p>-<code>dir.exists()</code>，判断它是否存在</p><p>-<code>dir.getName()</code>，返回目录名</p><p>-<code>dir.getParentFile()</code>，获取上级目录</p><p>-<code>dir.mkdir()</code>，创建单个目录</p><p>-<code>dir.mkdirs()</code>，创建多层目录</p><p>​    常使用这个</p><p>-<code>dir.listFiles()</code>，列出子文件/子目录</p><p>​    File[] files = dir.listFiles();</p><p>​    有可能返回为null，最好要判断一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span> files <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>File f <span class="token operator">:</span> files<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  "</span> <span class="token operator">+</span> f<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>File cd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cd<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//*.getAbsolutePath();获取完整路径</span><span class="token comment" spellcheck="true">//*.getCanonicalPath();获取简洁路径</span></code></pre><h5 id="文件读写，即IO"><a href="#文件读写，即IO" class="headerlink" title="文件读写，即IO"></a>文件读写，即IO</h5><p>在Java中，用byte[ ]表示数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写入数据</span><span class="token comment" spellcheck="true">//java.io.FileOutputStream，创建文件并写入数据</span><span class="token comment" spellcheck="true">//一个数组数据</span><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定文件路径，创建一个sample的文件</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.打开文件，准备写入</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.写入数据</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.关闭文件</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//读取数据</span><span class="token comment" spellcheck="true">//java.io.FileInputStream，用于读取数据</span><span class="token comment" spellcheck="true">//缓冲区，一次性读取1200个字节</span><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//1.打开文件、准许读取</span>    FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.读取文件</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回值表示实际读到的字节数</span>    <span class="token comment" spellcheck="true">//3.关闭文件 </span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果文件不存在的话，抛出异常FileNotFoundExeption</span></code></pre><h5 id="文本的写入和读取"><a href="#文本的写入和读取" class="headerlink" title="文本的写入和读取"></a>文本的写入和读取</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写入文本</span><span class="token comment" spellcheck="true">//当一个文件里存储文本数据时，称为文本文件</span><span class="token comment" spellcheck="true">//文件只能写入数据，只能存储字节数据，不能写入文本</span><span class="token comment" spellcheck="true">//首先要转换成字节数据</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先定义一个文本</span>    String text <span class="token operator">=</span> <span class="token string">"哒哒nihao"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//需要先转换成字节数据</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token operator">=</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sample.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//读取文本</span><span class="token comment" spellcheck="true">//读取文件sample.txt中的数据,转换成文本内容</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.读取字节数据</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sample.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.解码成文本</span>    String text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//指示起始位置0,和长度n(n个字节),字符编码"UTF-8"</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"GOT:"</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">catc</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
