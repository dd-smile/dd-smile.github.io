<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>简单的注册界面</title>
      <link href="/2021/10/19/two/"/>
      <url>/2021/10/19/two/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安卓开发"><a href="#安卓开发" class="headerlink" title="安卓开发"></a>安卓开发</h1><h4 id="实现一个仿QQ的注册界面"><a href="#实现一个仿QQ的注册界面" class="headerlink" title="实现一个仿QQ的注册界面"></a>实现一个仿QQ的注册界面</h4><ol><li>相对布局RelativeLayout</li><li>线性布局LinearLayout</li><li>drawable中selector标签的使用(用来实现Button的点击效果)</li><li>EditText的属性标签使用</li><li>TextView的属性标签使用</li><li>ImageView的属性标签的使用</li></ol><h3 id="1-设计分析"><a href="#1-设计分析" class="headerlink" title="1.设计分析"></a>1.设计分析</h3><ul><li><p>控件分析</p><table><thead><tr><th align="center">看到的控件</th><th align="center">业务功能</th><th align="center">实际控件</th></tr></thead><tbody><tr><td align="center">企鹅图标</td><td align="center">无</td><td align="center">ImageView</td></tr><tr><td align="center">“QQ”文本</td><td align="center">无</td><td align="center">TextView</td></tr><tr><td align="center">账号输入框</td><td align="center">编辑输入账号(只能输入数字)</td><td align="center">EditText</td></tr><tr><td align="center">密码输入框</td><td align="center">编辑输入密码(只能输入数字)</td><td align="center">EditText</td></tr><tr><td align="center">注册按钮</td><td align="center">执行注册</td><td align="center">Button</td></tr><tr><td align="center">“阅读并同意”文本</td><td align="center">无(颜色为白色)</td><td align="center">TextView</td></tr><tr><td align="center">“服务条款”</td><td align="center">无(颜色为黑色)</td><td align="center">TextView</td></tr></tbody></table></li><li><p>布局分析</p><p>使用相对布局大框架中嵌入线性布局</p><p>示意图如下:相对布局为红色,线性布局为黑色</p><p><img src="https://img-blog.csdnimg.cn/3f2456d0f14c418ba0e8684fbd662861.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="images"></p></li></ul><h3 id="2-编程中出现的问题"><a href="#2-编程中出现的问题" class="headerlink" title="2.编程中出现的问题"></a>2.编程中出现的问题</h3><ul><li>Button的点击效果颜色没有反应</li></ul><p>提示不兼容.(应该是版本问题)</p><p>解决办法如下:改为红色圈圈中的Bridge即可</p><p><img src="https://img-blog.csdnimg.cn/376d474cdff0460ba85526db74597c39.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="3-Button的点击效果实现"><a href="#3-Button的点击效果实现" class="headerlink" title="3.Button的点击效果实现"></a>3.Button的点击效果实现</h3><ol><li><p>在drawable下面创建一个xml文件:bt_bg.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>selector xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>按下时的图形 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"true"</span>   android<span class="token operator">:</span>drawable<span class="token operator">=</span><span class="token string">"@drawable/bg2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 松开时的图形 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"false"</span>   android<span class="token operator">:</span>drawable<span class="token operator">=</span><span class="token string">"@drawable/bg1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>selector<span class="token operator">></span></code></pre></li><li><p>在activity_main.xml文件中去实现</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>Button        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bt_bg"</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li><li><p>在颜色点击效果的基础上实现Button的圆角效果</p><pre class=" language-java"><code class="language-java">#在drawable下面创建一个xml文件<span class="token operator">:</span>bt_bg3<span class="token punctuation">.</span>xml    <span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>selector xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义当button 处于pressed 状态时的形态。<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>shape<span class="token operator">></span>            <span class="token operator">&lt;</span>solid android<span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"#FF00FF"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置按钮的四个角为弧形 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> android<span class="token operator">:</span>radius 弧形的半径 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>corners android<span class="token operator">:</span>radius<span class="token operator">=</span><span class="token string">"20dip"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> padding：Button里面的文字与Button边界的间隔 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>padding android<span class="token operator">:</span>bottom<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>left<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>right<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>top<span class="token operator">=</span><span class="token string">"10dp"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>shape<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义button默认时的形态<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>shape<span class="token operator">></span>            <span class="token operator">&lt;</span>solid android<span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"#000000"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置按钮的四个角为弧形 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> android<span class="token operator">:</span>radius 弧形的半径 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>corners android<span class="token operator">:</span>radius<span class="token operator">=</span><span class="token string">"20dip"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> padding：Button里面的文字与Button边界的间隔 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>padding android<span class="token operator">:</span>bottom<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>left<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>right<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>top<span class="token operator">=</span><span class="token string">"10dp"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>shape<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>selector<span class="token operator">></span>#xml文件中应用                    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bt_bg3"</span></code></pre></li></ol><h3 id="activity-main-xml源码如下"><a href="#activity-main-xml源码如下" class="headerlink" title="activity_main.xml源码如下"></a>activity_main.xml源码如下</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>RelativeLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span>    xmlns<span class="token operator">:</span>tools<span class="token operator">=</span><span class="token string">"http://schemas.android.com/tools"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    tools<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">".MainActivity"</span>    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/fengmian"</span><span class="token operator">></span>   #APP界面的背景图    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tubiao"</span>         android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span>        android<span class="token operator">:</span>layout_marginStart<span class="token operator">=</span><span class="token string">"25dp"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"80dp"</span>        android<span class="token operator">:</span>layout_marginLeft<span class="token operator">=</span><span class="token string">"25dp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ImageView  #左上角QQ图标            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/tubiao"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"QQ"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"36sp"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"43dp"</span>        android<span class="token operator">:</span>layout_below<span class="token operator">=</span><span class="token string">"@+id/tubiao"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>RelativeLayout            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ImageView                android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/mobile"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"20dp"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/ipone"</span><span class="token operator">></span>    #输入账号的手机图标            <span class="token operator">&lt;</span><span class="token operator">/</span>ImageView<span class="token operator">></span>            <span class="token operator">&lt;</span>EditText                android<span class="token operator">:</span>layout_toRightOf<span class="token operator">=</span><span class="token string">"@+id/mobile"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"@string/input_mobile"</span>                android<span class="token operator">:</span>inputType<span class="token operator">=</span><span class="token string">"number"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>EditText<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span>        <span class="token operator">&lt;</span>RelativeLayout            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ImageView                android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/mima"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"20dp"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/mima"</span><span class="token operator">></span>    #输入密码的密码矢量图            <span class="token operator">&lt;</span><span class="token operator">/</span>ImageView<span class="token operator">></span>            <span class="token operator">&lt;</span>EditText                android<span class="token operator">:</span>layout_toRightOf<span class="token operator">=</span><span class="token string">"@+id/mima"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"@string/input_password"</span>                android<span class="token operator">:</span>inputType<span class="token operator">=</span><span class="token string">"number"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>EditText<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span>        <span class="token operator">&lt;</span>Button            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"38dp"</span>            android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"22dp"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/login"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"20sp"</span>            android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bty_ys"</span><span class="token operator">></span>   实现Button的点击效果        <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span>        android<span class="token operator">:</span>layout_centerHorizontal<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>layout_alignParentBottom<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>layout_marginBottom<span class="token operator">=</span><span class="token string">"42dp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/login_message"</span>            android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@android:color/white"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/service"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span></code></pre><h3 id="strings-xml源码"><a href="#strings-xml源码" class="headerlink" title="strings.xml源码"></a>strings.xml源码</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>resources<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"app_name"</span><span class="token operator">></span>qq<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"input_mobile"</span><span class="token operator">></span>输入手机号<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"input_password"</span><span class="token operator">></span>输入密码<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"login"</span><span class="token operator">></span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"login_message"</span><span class="token operator">></span>阅读并同意<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"service"</span><span class="token operator">></span>服务条款<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>resources<span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五子棋项目</title>
      <link href="/2021/10/18/first/"/>
      <url>/2021/10/18/first/</url>
      
        <content type="html"><![CDATA[<h1 id="五子棋单机版"><a href="#五子棋单机版" class="headerlink" title="五子棋单机版"></a>五子棋单机版</h1><ol><li><h3 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h3><p>棋盘大小:15*15</p><p>空棋盘开局,黑棋先下,白棋后下,一次只能下一子.棋子下在交叉点上,棋子下在棋盘上之后,不能移动.</p><p>当相同颜色的五颗棋子连在一起的时候,就认为胜负已分.连在一起的方法有4个:水平,垂直,左上右下,左下右上;如果整个棋盘都摆满棋子之后,仍旧不分胜负,则认为和局.</p></li><li><h3 id="编程遇到的问题"><a href="#编程遇到的问题" class="headerlink" title="编程遇到的问题"></a>编程遇到的问题</h3><ol><li><h4 id="怎么样定义棋盘的坐标"><a href="#怎么样定义棋盘的坐标" class="headerlink" title="怎么样定义棋盘的坐标"></a>怎么样定义棋盘的坐标</h4><p>编程的时候数组或者列表的下标都是从0开始的,但是五子棋棋盘的坐标是从1开始的,如何解决两者之间的不协调?</p><p>第一种方法:把每个二维数组或列表的索引值全部加1,比如说五子棋棋盘第4行第6列,则对应的坐标是arr[3] [5].</p><p>第二种方法:直接忽略x=0和y=0这一行一列.分配内存时,直接分配16*16的内存空间做为棋盘即可.</p><ul><li>经过敲代码后发现,第一种方法需要来回切换,比较繁琐,代码量增加.因此采用第二种方法</li></ul></li><li><h4 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h4><p>对于计算机来说,一般会把左上角作为坐标系原点.从左往右是水平方向y,从上往下是垂直方向x</p><p>比如(4,6)表示第4行第6列,如下图:</p><p><img src="https://img-blog.csdnimg.cn/e1142dabff20449ba48dc5248ecde8f6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="images"></p><p>对于五子棋棋盘来说,4个角落的坐标点分别为:</p><ul><li>左上角:(1,1)</li><li>左下角:(15,1)</li><li>右上角:(1,15)</li><li>右下角:(15,15)</li></ul></li><li><h4 id="胜负判断"><a href="#胜负判断" class="headerlink" title="胜负判断"></a>胜负判断</h4><p>相同颜色的五颗棋子连在一起,则胜负已分.有以下几种极端情况:</p><ul><li>从左到右:判断(x,y-4)~(x,y+4)这9个坐标中是否有连续5颗棋子连在一起</li><li>从上到下:判断(x-4,y)~(x+4,y)这9个坐标中是否有连续5颗棋子连在一起</li><li>左上右下:判断(x-4,y-4)~(x+4,y+4)这9个坐标中是否有连续5颗棋子连在一起</li><li>左下右上:判断(x+4,y-4)~(x-4,y+4)这9个坐标中是否有连续5颗棋子连在一起</li></ul></li></ol></li><li><h3 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h3><p>使用面向对象的思维来建立模型</p><p>棋子类</p><ul><li> 属性:颜色color,坐标pos   </li><li>方法:setColor(),getColor(),setPos(),getPos()</li></ul><p>棋盘类</p><ul><li>属性:棋盘大小BOARD_SIZE,棋盘上的棋子board[] []</li><li>方法:setChess(),getChess(),initBoard(),printBoard()</li></ul><p>规则类(引擎类)</p><ul><li>属性:棋盘对象 board</li><li>方法:判断胜负isWon(),计算机下棋方法computerGo(),人工下棋userGo()</li></ul></li><li><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><p>创建一个棋盘类</p><p>chessboard.py</p><pre class=" language-py"><code class="language-py">#棋盘类class ChessBoard:    # 棋盘大小    BOARD_SIZE = 15    # 初始化    def __init__(self):        self.board = []        for i in range(ChessBoard.BOARD_SIZE+1):            tmp = []            for j in range(ChessBoard.BOARD_SIZE+1):                tmp.append(0)            self.board.append(tmp)    #清空棋盘    def initBoard(self):        for i in range(1,ChessBoard.BOARD_SIZE+1):            for j in range(1,ChessBoard.BOARD_SIZE+1):                self.board[i][j] = '+'  # 实现方法initBoard(),对棋盘进行初始化,把所有的空格都设置成'+'符号    # 打印棋盘    def printBoard(self):        # 打印列号        print('  ',end=' ')        for i in range(1,ChessBoard.BOARD_SIZE+1):            ch = chr(96+i)            print(ch,end=' ')        print()        # 打印行号和棋盘        for i in range(1,ChessBoard.BOARD_SIZE+1):            # 打印行号            print('%2d' % i,end=' ')            # 打印棋盘            for j in range(1,ChessBoard.BOARD_SIZE+1):                print(self.board[i][j],end=' ')            print()    # 放置棋子    # 参数1 pos位置坐标 类型是长度为2的列表或元组    # 参数2 color棋子颜色    def setChess(self,pos,color):        x = pos[0]        y = pos[1]        self.board[x][y] = color    # 放置棋子    def setChessMan(self,chessMan):            pos = chessMan.getPos()            color = chessMan.getColor()            self.setChess(pos,color)    # 根据位置读取棋子的颜色    def getChess(self,pos):        x,y = pos        return self.board[x][y]    # 判断某个坐标点是否为空    def isEmpty(self,pos):        chess = self.getChess(pos)        if chess == '+':            return True        #非空即黑或白        return False</code></pre><p>创建一个棋子类</p><p>chessman.py</p><pre class=" language-py"><code class="language-py">#棋子类class ChessMan:    # 初始化    def __init__(self):        self.color = 'x'        self.pos = (0,0)    # 设置颜色    def setColor(self,color):        self.color = color    # 获取颜色    def getColor(self):        return self.color    # 设置位置    def setPos(self,pos):        self.pos = pos    # 获取位置    def getPos(self):        return self.pos</code></pre><p>测试代码</p><p>main.py</p><pre class=" language-py"><code class="language-py"># from 文件名 import 类名from chessboard import *from chessman import *# 测试打印棋盘def test1():    board = ChessBoard()    board.initBoard()    board.printBoard()#测试摆放棋子def test2():    board = ChessBoard()    board.initBoard()    #测试setChess()摆放棋子    board.setChess((3,5),'x')    #测试setChessMan()摆放棋子    chessMan = ChessMan()    chessMan.setColor('o')    chessMan.setPos((4,6))    board.setChessMan(chessMan)    board.printBoard()    ret = board.isEmpty((3,6))    print(ret)if __name__ == '__main__':  # 相当于一个入口,当其他模块被调用的时候,先运行此模块    test2()</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记五</title>
      <link href="/2020/02/25/java-note05/"/>
      <url>/2020/02/25/java-note05/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-笔记五"><a href="#Java-笔记五" class="headerlink" title="Java 笔记五"></a>Java 笔记五</h1><h2 id="第十二章-集合"><a href="#第十二章-集合" class="headerlink" title="第十二章 集合"></a>第十二章 集合</h2><h3 id="ArrayList类-单列集合-List接口"><a href="#ArrayList类-单列集合-List接口" class="headerlink" title="ArrayList类(单列集合)-List接口"></a>ArrayList类(单列集合)-List接口</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main</span>List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//add:添加单个元素</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//list.add( new Integer(10))</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//remove:删除指定元素</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除第一个元素</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定删除某个元素</span><span class="token comment" spellcheck="true">//contains:查找元素是否存在</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T</span><span class="token comment" spellcheck="true">//size:获取元素个数</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token comment" spellcheck="true">//isEmpty:判断是否为空</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//F</span><span class="token comment" spellcheck="true">//clear:清空</span>list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//addAll:添加多个元素(放一个集合进去)</span>ArrayList list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addALL</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//containsAll:查找多个元素是否都存在</span><span class="token comment" spellcheck="true">//remove:删除多个元素</span></code></pre><h6 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h6><ol><li>ArrayList可以加入null, 并且多个</li><li>ArrayList是由数组来实现数据存储的</li><li>ArrayList基本等同于Vector, 除了ArrayList是线程不安全的(执行效率高), 在多线程情况下, 不建议使用ArrayList</li></ol><h3 id="ArrayList扩容机制"><a href="#ArrayList扩容机制" class="headerlink" title="ArrayList扩容机制"></a>ArrayList扩容机制</h3><ol><li>ArrayList中维护了一个Object类型的数组elementData</li><li>当创建ArrayList对象时, 如果使用的是无参构造器, 则初始elementData容量为0, 第一次添加, 则扩容elementData为10, 如需要再次扩容, 则扩容elementData为1.5倍</li><li>如果使用的是指定大小的构造器, 则初始elementData容量为指定大小, 如果需要扩容, 则直接扩容elementData为1.5倍</li></ol><p>每次都要去检测要不要扩容, 所以效率不高</p><p><img src="https://img-blog.csdnimg.cn/b1213c57c7c045d3aece2b0a7937a901.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/705a3e3bfb02489f9ef5abc6ac14e0f6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Vector类"><a href="#Vector类" class="headerlink" title="Vector类"></a>Vector类</h3><ol><li>Vector底层也是一个对象数组</li><li>Vector是线程同步的, 即线程安全</li><li>在开发中, 需要线程同步安全时, 考虑使用Vector</li></ol><p><img src="https://img-blog.csdnimg.cn/1b53b56524b54e0a8fc31a49acfbd36b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h3><ol><li>LinkedList底层实现了双向链表和双端队列特点</li><li>可以添加任意元素(元素可以重复), 包括null</li><li>线程不安全, 没有实现同步</li></ol><h5 id="LinkedList底层机制"><a href="#LinkedList底层机制" class="headerlink" title="LinkedList底层机制"></a>LinkedList底层机制</h5><ol><li>LinkedList底层维护了一个双向链表</li><li>LinkedList中维护了两个属性first和last分别指向 首节点和尾节点</li><li>每个节点(Node对象), 里面维护了prev, next, item三个属性, 其中通过prev指向前一个, 通过next指向后一个节点, 最终实现双向链表</li><li>LinkedList的元素的添加和删除, 不是通过数组完成的, 相对来说效率较高</li></ol><p><img src="https://img-blog.csdnimg.cn/2cffd646d5654b67941485defb8864b4.png" alt="img"></p><h3 id="List集合选择"><a href="#List集合选择" class="headerlink" title="List集合选择"></a>List集合选择</h3><p><img src="https://img-blog.csdnimg.cn/cb04e2e78efc46e4ab0b6bbaf5aa8867.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h3><p>Iterator对象称为迭代器, 主要用于遍历Collection集合中的元素. 所以实现了Collection接口的集合类都有一个Iterator()方法. Iterator仅用于遍历集合, Iterator本身并不存放对象</p><p><img src="https://img-blog.csdnimg.cn/c6549b33a6df4967bc573bdd441e641f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h6 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h6><ol><li>当退出while循环后, 这时iterator迭代器, 指向最后的元素</li><li>如果接着指向<code>iterator.next();</code> 会报错 : NoSuchElementException</li><li>如果希望再次遍历, 需要重置迭代器</li></ol><h5 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h5><p><img src="https://img-blog.csdnimg.cn/c973cd66c5314f2d809e4d8ac423d4b7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>也是双列集合, 但是和Map不同的是, 他的 [K, V] 中的V是一个常量present</p><ol><li>set 接口的实现类的对象(Set接口对象), 不能存放重复的元素, 可以添加一个null</li><li>set 接口对象存放数据是无序的(即添加的顺序和取出的顺序不一致)</li><li>取出的顺序的顺序虽然不是添加的顺序, 但是它是固定的</li><li>遍历<ul><li>方式一 : 使用迭代器</li><li>方式二 : 增强for</li><li>不能通过索引的方式来获取, (不能用普通的for来遍历)</li></ul></li></ol><h3 id="HashSet类"><a href="#HashSet类" class="headerlink" title="HashSet类"></a>HashSet类</h3><ol><li>HashSet实际上是HashMap</li><li>可以存放null值, 但是只能有一个null</li><li>HashSet不保证元素是有序的, 取决于hash后, 再确定索引的结果</li><li>不能有重复元素/对象</li></ol><h6 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h6><pre class=" language-java"><code class="language-java">set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HashSet 不能添加相同的元素/对象</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//OK</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//OK</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ok</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入不了</span><span class="token comment" spellcheck="true">//为什么添加不了,通过底层机制说明</span><span class="token comment" spellcheck="true">//hash() + equals()都相同的时候放弃加入</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="HashSet底层机制"><a href="#HashSet底层机制" class="headerlink" title="HashSet底层机制"></a>HashSet底层机制</h3><ul><li>HashSet底层是HashMap</li><li>添加一个元素时, 先得到hash值  - 转成 - 索引值</li><li>找到存储数据表table, 看这个索引位置是否已经存放元素了</li><li>如果没有, 直接加入</li><li>如果有, 调用equals比较, 如果相同, 就放弃添加, 如果不相同, 则添加到最后</li><li>在Java8中, 如果一条链表的元素大于等于 TREEIFY_THRESHOLD(默认是8) 并且table的大小 大于等于 MIN_TREEIFY_CAPACITY(默认是64), 就会进行树化(红黑树), 否则仍然采用数组扩容机制</li></ul><h5 id="HashSet扩容机制"><a href="#HashSet扩容机制" class="headerlink" title="HashSet扩容机制"></a>HashSet扩容机制</h5><ol><li><p>HashSet底层是HashMap, 第一次添加时, table数组扩容到16, 临界值(threshold) 是 16*加载因子(loadFactor) 是0.75  = 12</p></li><li><p>如果table数组使用到了临界值12, 就会扩容到16 * 2 = 32, 新的临界值就是32 * 0.75 =24, 依次类推</p></li><li><p><strong>注意 :</strong></p><p>当我们向HashSet增加了一个元素, Node - 加入table, 就算是增加了一个 size++</p></li></ol><h3 id="LinkedHashSet类"><a href="#LinkedHashSet类" class="headerlink" title="LinkedHashSet类"></a>LinkedHashSet类</h3><ol><li><p>LinkedHashSet 是 HashSet的子类</p></li><li><p>LinkedHashSet 底层是一个LinkedHashMap, 底层维护了一个数组 + 双向链表</p></li><li><p>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置, <strong>同时使用链表维护元素的次序, 这使得元素看起来是以插入顺序保存的</strong></p><p><img src="https://img-blog.csdnimg.cn/75db6dd19fbb4d9398dfd5141a8ef2f9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>LinkedHashSet 不允许添加重复的元素</p></li></ol><h3 id="Map接口-双列集合"><a href="#Map接口-双列集合" class="headerlink" title="Map接口(双列集合)"></a>Map接口(双列集合)</h3><ol><li>Map 与 Collection 并列存在. Map 用于保存具有映射关系的数据 : Key - Value(双列元素)</li><li>Map中的key 和 value 可以是任何引用类型的数据, 会封装到HashMap$Node对象中</li><li>Map中的 key 不允许重复, 原因和HashSet一样, 如果重复了, 会进行替换原有的值</li><li>Map中的 value 可以重复</li><li>Map的 key 可以为null, value 也可以为null, 但是注意 key 只能有一个null, value 可以有多个null</li><li>常用String类作为Map的 key</li><li>key 和 value 之间存在单向一对一关系, 即通过指定的 key 总能找到对应的 value</li><li><img src="https://img-blog.csdnimg.cn/2c56daa3fafb4b0b8ae3606ee4826597.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></li></ol><pre class=" language-Java"><code class="language-Java">//main中Map map = new HashMap();//添加元素map.put("no1","张无忌");map.put("no2","jack");//无序的//获取key对应的valuemap.get("no2");//删除map.remove("no1");//获取元素个数map.size();//判断个数是否为0map.isEmpty();//清除map.clear();//查找key是否存在containsKey("no2");</code></pre><h3 id="Map接口遍历"><a href="#Map接口遍历" class="headerlink" title="Map接口遍历"></a>Map接口遍历</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*1.containsKey : 查找键是否存在2.keySet : 获取所有的键3.entrySet : 获取所有关系k-v4.values : 获取所有的值**/</span>Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"qwe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"asd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"zxc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式一 先取出所有的key, 通过key取出对应的value</span>Set keyset <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.增强for</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object key <span class="token operator">:</span> keyset<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.迭代器</span>Iterator iterator <span class="token operator">=</span> keyset<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式二 把所有的values取出</span>Collection values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.增强for</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object value <span class="token operator">:</span> values<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.迭代器</span>Iterator iterator2 <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object value <span class="token operator">=</span> iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式三 通过EntrySet 来获取k-v</span>Set entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//EntrySet&lt;Entry&lt;K,V>></span><span class="token comment" spellcheck="true">//1.增强for</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将entry转成 Map.Entry</span>    Map<span class="token punctuation">.</span>Entry m <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.迭代器</span>Iterator iterator3 <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator3<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object next <span class="token operator">=</span> iterator3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HashMap$Node -实现-> Map.Entry (getKey, getValue)</span>    <span class="token comment" spellcheck="true">//向下转型 Map.Entry</span>    Map<span class="token punctuation">.</span>Entry m <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> entry<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a>HashMap类</h3><ul><li>小结<ul><li>HashMap是Map接口使用频率最高的实现类</li><li>HashMap是以 key - val 对的方式来存储数据(HashMap$Node类型)</li><li>key不能重复, 但是val可以重复, 允许使用null键和null值</li><li>如果添加相同的key, 则会覆盖原来的key - val, 等同于修改(key不会替换, val会替换)</li><li>与HashSet一样, 不能保证映射的顺序, 因为底层是以hash表的方式来存储</li><li>HashMap没有实现同步, 因此是线程不安全的</li><li>jdk8底层是 数组+链表+红黑树</li><li>扩容机制和 HashSet 相同</li></ul></li></ul><h3 id="HashTable类"><a href="#HashTable类" class="headerlink" title="HashTable类"></a>HashTable类</h3><ol><li>存放的元素是键值对 : 即 K-V</li><li>hashtable的键和值都不能为null, 否则会抛出NullPointerException</li><li>hashtable使用方法基本和HashMap一样</li><li>hashtable是线程安全的, HashMap是线程不安全的</li></ol><h6 id="底层-扩容机制"><a href="#底层-扩容机制" class="headerlink" title="底层 : 扩容机制"></a>底层 : 扩容机制</h6><p><img src="https://img-blog.csdnimg.cn/d6bd5a41cc834134a38518d49a87a845.png" alt="img"></p><h3 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h3><ol><li>Properties类继承自HashTable类, 并且实现了Map接口, 也是使用一种键值对的形式来保存数据</li><li>使用特点和HashTable类似</li><li>Properties <strong>还可以用于</strong>从 xxx.properties 文件中, 加载数据到Properties类对象, 并进行读取和修改</li><li>xxx.properties 文件通常作为配置文件</li></ol><h3 id="集合的选择"><a href="#集合的选择" class="headerlink" title="集合的选择"></a>集合的选择</h3><p><img src="https://img-blog.csdnimg.cn/c99efddc001740178d79ad1fcc2bf58e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="比较器Comparator"><a href="#比较器Comparator" class="headerlink" title="比较器Comparator"></a>比较器Comparator</h3><pre class=" language-java"><code class="language-java">TreeSet treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//下面调用String的comparaTo方法进行字符串大小比较</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加数据</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层机制</span><span class="token comment" spellcheck="true">//1.构造器把传入的比较器对象, 赋给了TreeSet的底层 TreeMap的属性this.comparator</span><span class="token comment" spellcheck="true">//2.在调用 treeSet.add("tom"), 在底层会执行到</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> cpr <span class="token operator">=</span> comparator<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cpr <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//cpr 就是我们的匿名内部类(对象)</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        parent <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态绑定到我们的匿名内部类(对象)compare</span>        cmp <span class="token operator">=</span> cpr<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> t<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> t<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//如果相等,即返回0,这个key就没有加入</span>            <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第十三章-泛型"><a href="#第十三章-泛型" class="headerlink" title="第十三章 泛型"></a>第十三章 泛型</h2><h6 id="泛型的理解和好处"><a href="#泛型的理解和好处" class="headerlink" title="泛型的理解和好处"></a>泛型的理解和好处</h6><p>使用传统方法的问题分析</p><ol><li>不能对加入到集合ArrayList中的数据类型进行约束(不安全)</li><li>遍历的时候, 需要进行类型转换, 如果集合中的数据量较大, 对效率有影响</li></ol><h3 id="泛型的细节"><a href="#泛型的细节" class="headerlink" title="泛型的细节"></a>泛型的细节</h3><ol><li><p>泛型的作用是 : 可以在类声明时通过一个标识表示类中某个属性的类型, 或者是某个方法的返回值的类型, 或者是参数类型</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span>Person<span class="token operator">&lt;</span>String<span class="token operator">></span> stringPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    E s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//E表示 s的数据类型, 该数据类型在定义Person对象的时候指定,即在编译期间,就确定E是什么类型</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>E s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//E也可以是参数类型</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回类型使用E</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><code>interface List&lt;T&gt;{}</code>, <code>public class HashSet&lt;E&gt;{}</code></p><p>T, E 只能是引用类型</p></li><li><p>在给泛型指定具体类型后, 可以传入该类型或者子类类型</p></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如果是这样写, 泛型默认是 Object</span>ArrayList arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于ArrayList&lt;Object> arrayList = new ArrayList&lt;Object>();</span></code></pre></li></ol><h3 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h3><ol><li>A后面泛型, 我们就把 A 称为自定义泛型类</li><li>T,R,M泛型的标识符, 一般是单个大写字母</li><li>泛型标识符可以有多个</li><li>普通成员可以使用泛型 (属性, 方法)</li><li>使用泛型的数组, 不能初始化 (因为数组在 new 不能确定类型, 就无法在内存开空间)</li><li>静态方法中不能使用类的泛型(因为静态方法需要类加载, 类加载的时候不能确定类型)</li></ol><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><ol><li>接口中, 静态成员也不能使用泛型</li><li>泛型接口的类型, 在继承接口或者实现接口时确定</li><li>没有指定类型, 默认为Object</li></ol><h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><ol><li>泛型方法, 可以定义在普通类, 也可以定义在泛型类</li><li>泛型方法被调用的时候类型就会确定, 当调用方法时, 传入参数, 编译器就会确定类型</li><li><code>public void eat(E e){}</code>不是一个泛型方法, 儿是eat方法使用了类声明的泛型</li><li>泛型方法, 可以使用类声明的泛型, 也可以使用自己声明的泛型</li></ol><h3 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h3><ol><li> 泛型没有继承性</li></ol><p>   <code>List&lt;Object&gt; list = new ArrayList&lt;String&gt; ()</code>    //错误的</p><ol start="2"><li><p><code>&lt;?&gt;</code> 表示支持任意类型</p></li><li><p><code>&lt;? extends A&gt;</code>  表示支持A类及A类的子类, 规定了泛型的上限</p></li><li><p><code>&lt;? super A&gt;</code>  表示支持A类以及A类的父类, 不限于直接父类, 规定了泛型的下限</p></li></ol><h2 id="第十四章-多线程"><a href="#第十四章-多线程" class="headerlink" title="第十四章 多线程"></a>第十四章 多线程</h2><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><h4 id="继承Thread创建线程"><a href="#继承Thread创建线程" class="headerlink" title="继承Thread创建线程"></a>继承Thread创建线程</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span><span class="token comment" spellcheck="true">//创建Cat对象,可以当做线程使用</span>Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动线程</span><span class="token comment" spellcheck="true">//说明 : 当main线程启动一个子线程, 主线程不会阻塞,会继续执行</span><span class="token comment" spellcheck="true">//这时 主线程和子线程是交替执行的</span><span class="token comment" spellcheck="true">//1.当一个类继承了Thread类, 该类就可以当成线程使用</span><span class="token comment" spellcheck="true">//2.我们会重写 run 方法, 写上自己的业务代码</span><span class="token comment" spellcheck="true">//3. run Theread类 实现了 Runnable 接口的run方法</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//重写run方法,写上自己的业务逻辑</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//该线程每隔1秒,在控制台输出喵喵</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//休眠一秒</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实现Runnable接口创建线程"><a href="#实现Runnable接口创建线程" class="headerlink" title="实现Runnable接口创建线程"></a>实现Runnable接口创建线程</h4><ol><li>java是单继承的, 在某些情况下一个类可能已经继承了某个父类, 这时在用继承Thread类方法来创建线程显然不可能了</li><li>所以通过实现Runnable接口创建线程</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span>Dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不能直接调用start</span><span class="token comment" spellcheck="true">//创建了Thread对象, 把dog对象(实现Runnable),放入Thread</span><span class="token comment" spellcheck="true">//使用到了代理模式</span>Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//休眠一秒</span>             <span class="token keyword">try</span><span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//模拟简单代理模式</span><span class="token keyword">class</span> <span class="token class-name">ThreadProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//你可以把ThreadProxy类当做   真正的Thread类</span>    <span class="token keyword">private</span> Runnable target <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性, 类型是 Runnable   </span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">ThreadProxy</span><span class="token punctuation">(</span>Runnable target<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//传进来一个实现了Runnable接口的对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个方法是真正实现多线程的方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态绑定</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="多线程机制"><a href="#多线程机制" class="headerlink" title="多线程机制"></a>多线程机制</h3><ol><li>在多线程之中, 不是主线程结束了就意味着进程结束, 而是要等所有的线程结束.</li><li>从Java的设计来看, 通过继承Thread或者实现Runnable接口来创建线程本质没有区别</li><li>实现Runnable接口方式更加适合多线程共享一个资源的情况, 并且避免了单继承的限制</li></ol><h5 id="为什么是start"><a href="#为什么是start" class="headerlink" title="为什么是start?"></a>为什么是start?</h5><p>如果直接调用<code>run()</code>方法的话, 就是一个普通的方法, 没有真正的启动一个线程, 就会把<code>run()</code>方法执行完毕, 才向下执行</p><h6 id="start-方法执行过程"><a href="#start-方法执行过程" class="headerlink" title="start()方法执行过程"></a>start()方法执行过程</h6><p><img src="https://img-blog.csdnimg.cn/fffa463262e744249978b42d803b584b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_10,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h6 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h6><p><img src="https://img-blog.csdnimg.cn/57bc0d92d8f0433b9c2d77737de2eb5d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h3><ol><li><code>setName</code> //设置线程名称, 使它和参数name相同</li><li><code>getName</code> //返回该线程的名称</li><li><code>start</code> //使该线程开始执行, Java虚拟机底层调用该线程的 start0 方法</li><li><code>run</code>  //调用线程对象的 run 方法</li><li><code>setPriority</code> //更改线程的优先级</li><li><code>getPriority</code> //获取线程的优先级</li><li><code>sleep</code> //在指定毫秒数内休眠</li><li><code>interrupt</code> //中断线程(中断线程, 不是停止线程, 一般用于中断正在休眠的线程)</li></ol><h5 id="通知线程退出"><a href="#通知线程退出" class="headerlink" title="通知线程退出"></a>通知线程退出</h5><p>设置一个Boolean变量, 在线程外改变该变量. 使线程退出循环.</p><h5 id="线程插队"><a href="#线程插队" class="headerlink" title="线程插队"></a>线程插队</h5><ol><li><code>yield</code>  //线程的礼让. 让出cpu, 让其他线程执行, 但礼让的时间不确定, 所以也不一定礼让成功</li><li><code>join</code>  //线程的插队. 插队的线程一旦插队成功, 则肯定会先执行完插入的线程所以的任务</li></ol><h5 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h5><ol><li><p>用户线程 : 也叫工作线程, 当线程的任务执行完成或通知方式结束</p></li><li><p>守护线程 : 一般是为工作线程服务的, 当所有的用户线程结束, 守护线程自动结束, 常见的守护线程是 : GC(垃圾回收机制)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//当我们希望当main线程结束后, 子线程自动结束, 将子线程设置为守护线程就可以</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h5 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h5><p><img src="https://img-blog.csdnimg.cn/34430a0a9fd94f13846e88f87abd81ff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_12,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h3><ol><li>在多线程编程, 一些敏感数据不允许被多个线程同时访问, 此时就使用同步访问技术, 保证数据在任何同一时刻, 最多有一个线程访问, 以保证数据的完整性</li><li>线程同步, 即当有一个线程在对内存进行操作时, 其他线程都不可以对这个内存地址进行操作, 直到该线程完成操作, 其他线程才能对该内存地址进行操作</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.同步代码块</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//得到对象的锁, 才能操作同步代码</span>    <span class="token comment" spellcheck="true">//需要被同步代码</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.同步方法</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">m</span> <span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//同步方法, 在同一时刻, 只能有一个线程来执行m方法</span>    <span class="token comment" spellcheck="true">//需要被同步的代码</span><span class="token punctuation">}</span></code></pre><h6 id="eg"><a href="#eg" class="headerlink" title="eg :"></a>eg :</h6><p><img src="https://img-blog.csdnimg.cn/6cef8f4fc95b4a9795bc81ed8985926c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Synchronized细节"><a href="#Synchronized细节" class="headerlink" title="Synchronized细节"></a>Synchronized细节</h3><ol><li>同步的局限性 : 导致程序的执行效率降低</li><li>非静态的方法中同步代码块 的锁可以是this, 也可以是其他对象(<strong>要求多个线程的锁是同一个对象</strong>)</li><li>静态的方法中同步代码块 的锁为当前类本身</li></ol><h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h3><p><img src="https://img-blog.csdnimg.cn/885963e670564125a429ead1a42b93cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/3e1bcaf7860d49f58551ba03902d529d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记四</title>
      <link href="/2020/02/22/java-note04/"/>
      <url>/2020/02/22/java-note04/</url>
      
        <content type="html"><![CDATA[<h1 id="java笔记四"><a href="#java笔记四" class="headerlink" title="java笔记四"></a>java笔记四</h1><h2 id="第九章-枚举和注解"><a href="#第九章-枚举和注解" class="headerlink" title="第九章 枚举和注解"></a>第九章 枚举和注解</h2><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>创建Season对象有如下特点</p><ol><li>季节的值是有限的几个值(spring , summer , fall , winter)</li><li>只读, 不需要修改</li></ol><p>引出枚举类</p><h3 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//描述</span>    <span class="token comment" spellcheck="true">//1.将构造器私有化, 目的防止 直接new</span>    <span class="token comment" spellcheck="true">//2.去掉setXxx方法, 防止属性被修改</span>    <span class="token comment" spellcheck="true">//3.在Season内部, 直接创建固定的对象</span>    <span class="token comment" spellcheck="true">//4.对外暴露对象(通过为对象添加public final static修饰符)</span>        <span class="token comment" spellcheck="true">//定义四个固定的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season SPRING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"温暖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season WINTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"寒冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season FALL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"凉爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season SUMMER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"炎热"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通常对枚举对象/属性使用final + static共同修饰,实现底层优化</span></code></pre><ol><li>枚举对象名通常使用全部大写</li><li>枚举对象根据需要, 可以有多个属性</li></ol><h3 id="enum关键字"><a href="#enum关键字" class="headerlink" title="enum关键字"></a>enum关键字</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Season<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.使用关键 enum 替代 class</span>    <span class="token comment" spellcheck="true">//2. public static Season SPRING = new Season("春天","温暖"); 直接使用 SPRING("春天","温暖");   </span>    <span class="token comment" spellcheck="true">//常量名(实参列表)</span>    <span class="token comment" spellcheck="true">//3.如果有多个常量(对象), 使用 , 号间隔即可</span>    <span class="token comment" spellcheck="true">//4.如果使用enum来实现枚举, 要求将定义的常量对象,写在最前面</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"温暖"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"寒冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//描述</span><span class="token punctuation">}</span></code></pre><h3 id="enum类常用方法"><a href="#enum类常用方法" class="headerlink" title="enum类常用方法"></a>enum类常用方法</h3><p><img src="https://img-blog.csdnimg.cn/1be4aca2e9b341218477d3045a3dddca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_14,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="enum细节"><a href="#enum细节" class="headerlink" title="enum细节"></a>enum细节</h3><ol><li><p>使用enum关键字开放一个枚举类时, 默认会继承Enum类, 而且是一个final类 (使用javap 可以证明)</p></li><li><p>如果使用无参构造器 创建 枚举对象, 则实参列表和小括号都可以省略’</p></li><li><p>枚举对象必须放在枚举类的首行</p></li><li><p>使用enum关键字后, 就不能再继承其他类了, 因为enum会隐式继承Enum, 而Java是单继承机制</p></li><li><p>枚举类和普通类一样, 可以实现接口</p><p><code>enum 类名 implements 接口1, 接口2{}</code></p></li></ol><h3 id="foreach语句-for循环补充"><a href="#foreach语句-for循环补充" class="headerlink" title="foreach语句 - for循环补充"></a>foreach语句 - for循环补充</h3><p><img src="https://img-blog.csdnimg.cn/adbb1060bc58442b91665f30fe124e89.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>foreach执行流程是 : 依次从nums数组中取出数据, 赋给i, 如果取出完毕, 则退出for</p><h2 id="第十章-异常"><a href="#第十章-异常" class="headerlink" title="第十章 异常"></a>第十章 异常</h2><h3 id="异常体系图-体现继承和实现的关系"><a href="#异常体系图-体现继承和实现的关系" class="headerlink" title="异常体系图 (体现继承和实现的关系)"></a>异常体系图 (体现继承和实现的关系)</h3><p><img src="https://img-blog.csdnimg.cn/4a8d5f05101044ba93d54499088f03d4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><ol><li>异常分为两大类, 运行时异常和编译时异常</li><li>运行时异常, 编译器检查不出来. 一般是指编译时的逻辑错误, 是程序员应该避免其出现的异常. java.lang.RuntimeException类及它的子类都是运行时异常</li><li>对于运行时异常, 可以不作处理, 因为这类异常很普遍, 若全处理可能会对程序的可读性和运行效率产生影响</li><li>编译时异常, 是编译器要求必须处置的异常</li></ol><h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><h5 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h5><ol><li>NullPointException空指针异常</li><li>ArithmeticException数学运算异常</li><li>ArraylndexOutBoundsException数组下标越界异常</li><li>ClassCastException类型转换异常</li><li>NumberFormatException数字格式不正确异常</li></ol><h5 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h5><ol><li>SQLException操作数据库时, 查询表可能发生异常</li><li>IOException操作文件时, 发生异常</li><li>FileNotFoundException当操作一个不存在的文件时, 发生异常</li><li>ClassNotFoundException加载类, 而该类不存在, 异常</li><li>EOFException操作文件, 到文件末尾, 发生异常</li><li>IIIegaalArguementException参数异常</li></ol><h3 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h3><ol><li><p><code>try - catch - finally</code></p><p>程序员在代码中捕获发生的异常, 自行处理</p><p><img src="https://img-blog.csdnimg.cn/318f201f173e4c20b81ea34ba40bcf75.png" alt="img"></p></li><li><p><code>throws</code></p><p>将发生的异常抛出, 交给调用者(方法)来处理, 最顶级的处理者就是JVM      </p><p>如果程序员没有显示处理异常, 默认throws</p><p><img src="https://img-blog.csdnimg.cn/ce4605fa9c694365a8a9165966e6306c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol><h3 id="try-catch细节"><a href="#try-catch细节" class="headerlink" title="try - catch细节"></a>try - catch细节</h3><ol><li><p>如果异常发生了, 则异常发生后面的代码不会执行, 直接进入到catch块</p></li><li><p>如果异常没有发生, 则顺序执行try的代码块, 不会进入到catch</p></li><li><p>注意如果在catch中有return, 需观察finally有没有return, 如果有, 则返回的是finally语句中的值(因为finally必须执行)</p></li><li><p>可以有多个catch语句, 捕获不同的异常(进行不同的业务处理), 要求父类异常在后, 子类异常在前, 比如(Exception 在后, NullPointException在前), 如果发生异常, 只会匹配一个catch</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span><span class="token keyword">try</span><span class="token punctuation">{</span>    Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    person <span class="token operator">=</span> null<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NullPointException</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> n1 <span class="token operator">/</span> n2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ArithmeticException</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空指针异常="</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"算术异常="</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="throws细节"><a href="#throws细节" class="headerlink" title="throws细节"></a>throws细节</h3><ol><li><p>对于编译异常, 程序中必须处理, 比如<code>try - catch</code>或者<code>throws</code></p></li><li><p>对于运行时异常, 程序中如果没有处理, 默认就是<code>throws</code>的方式处理</p></li><li><p><code>throws</code>与<code>throw</code>的区别</p><ul><li><code>throws</code> 异常处理的一种方式, 位置是 : 方法声明处, 后面跟 异常类型</li><li><code>throw</code>手动生成异常对象的关键字, 位置是 : 方法体中, 后面跟 异常对象</li></ul></li><li><p>子类重写父类的方法时, 对抛出异常的规定 : 子类重写的方法, 所抛出的异常类型要么和父类抛出的异常一样, 要么为父类抛出的异常类型的子类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RuntimeException<span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NullPointException<span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//必须为父类异常的子类或者和父类异常相同</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><ul><li>定义类 : 自定义异常类名(程序员直接写) 继承Exception 或 RuntimeException</li><li>如果继承Exception, 属于编译异常</li><li>如果继承RuntimeException, 属于运行异常</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要求范围在 18~120之间, 否则抛出一个自定义异常</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里可以通过构造器,设置信息</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token string">"年龄需要在18-120之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的年龄范围正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自定义一个异常类</span><span class="token comment" spellcheck="true">//1.一般情况下,我们自定义异常是继承 RuntimeException</span><span class="token comment" spellcheck="true">//2.因为如果是运行时异常的话, 系统会自动使用默认的处理机制</span><span class="token keyword">class</span> <span class="token class-name">AgeException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">AgeException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第十一章-常用类"><a href="#第十一章-常用类" class="headerlink" title="第十一章  常用类"></a>第十一章  常用类</h2><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p><img src="https://img-blog.csdnimg.cn/45cdef257d71483ca0007809c66af69a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h5 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h5><p><img src="https://img-blog.csdnimg.cn/01a425af423649fdbc4f91d2e4891e16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Integer创建机制"><a href="#Integer创建机制" class="headerlink" title="Integer创建机制"></a>Integer创建机制</h3><p><img src="https://img-blog.csdnimg.cn/54cb172adb5d467b9f8b3f63debb60be.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_14,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><ul><li><p>String 是final类, 不能被其他的类继承</p></li><li><p>Stirng 有属性 private final char <strong>value[]</strong>, 用于存放字符串内容, 所以<strong>字符串的本质是char数组</strong></p></li><li><p>value 是一个final类型, 不可以修改(指的是地址不可以修改, 不能再指向另外的对象)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//堆中</span><span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确可以改变内容</span>value <span class="token operator">=</span> v2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误, 不能指向新的对象(地址)</span></code></pre></li><li><p>方式一 : 先从常量池查看是否有”hsp”数据空间, 如果有, 直接指向, 如果没有则创建, 然后指向. s最终指向的是常量池的空间地址</p><p>方式二 : 先在堆中创建对象, 里面维护了value属性, 指向常量池的hsp空间. 如果常量池没有”hsp”, 重新创建, 如果有, 直接通过value指向. 最终指向的是堆中的空间地址</p><p><img src="https://img-blog.csdnimg.cn/13100fcb194745bbba170242cce0c7ac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>字符串的特性 (String c1 = “ab” + “cd”; 常量相加, 看的是池.  String c1 = a + b; 变量相加, 是在堆中)</p><p><img src="https://img-blog.csdnimg.cn/5616938979894385b82804a86fd62393.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ul><h3 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h3><ul><li>java.lang.StringBuffer代表可变的字符序列, 可以对字符串内容进行增删</li><li>很多方法与String相同, 但StirngBuffer是可变长度的 </li><li>StringBuffer是一个容器</li></ul><p><img src="https://img-blog.csdnimg.cn/b8d553e3583645bda09eafde4287c180.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h5 id="StringBuffer构造器的使用"><a href="#StringBuffer构造器的使用" class="headerlink" title="StringBuffer构造器的使用"></a>StringBuffer构造器的使用</h5><p><img src="https://img-blog.csdnimg.cn/54aa74022a984d5da6492e844c91dee2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h5 id="StringBuffer与String相互转换"><a href="#StringBuffer与String相互转换" class="headerlink" title="StringBuffer与String相互转换"></a>StringBuffer与String相互转换</h5><h6 id="String-→-StringBuffer"><a href="#String-→-StringBuffer" class="headerlink" title="String → StringBuffer"></a>String → StringBuffer</h6><p><img src="https://img-blog.csdnimg.cn/6d092a96d5cf44f4b52b0a31b1d220db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h6 id="StringBuffer-→-String"><a href="#StringBuffer-→-String" class="headerlink" title="StringBuffer → String"></a>StringBuffer → String</h6><p><img src="https://img-blog.csdnimg.cn/05c5317562b84956b541db458246fa7e.png" alt="img"></p><h5 id="StringBuffer-方法"><a href="#StringBuffer-方法" class="headerlink" title="StringBuffer 方法"></a>StringBuffer 方法</h5><p><img src="https://img-blog.csdnimg.cn/8e90bd989a484e469d7c05bf8b5b22d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_9,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h3><ul><li>StringBuilder 和 StringBuffer 均代表可变的字符序列, 方法是一样的, 所以使用和 StringBuffer 一样</li></ul><p><img src="https://img-blog.csdnimg.cn/81e8e3e4cca14cf790672a4270ee62a9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="String-StringBuffer和StringBuilder的比较"><a href="#String-StringBuffer和StringBuilder的比较" class="headerlink" title="String,StringBuffer和StringBuilder的比较"></a>String,StringBuffer和StringBuilder的比较</h3><ol><li><p>StringBuffer 和 StringBuilder非常类似, 均代表可变的字符序列, 而且方法也一样</p></li><li><p>String : 不可变字符序列, 效率低, 但是复用率高(如果是相同的数据空间”abc”, 被多个对象引用, 都指向常量池的同一个空间地址)</p></li><li><p>StringBuffer : 可变字符序列, 效率较高(增删), 线程安全</p></li><li><p>StringBuilder : 可变字符序列, 效率最高, 线程不安全</p></li><li><p>String 使用注意事项 : </p><pre class=" language-java"><code class="language-java">string s <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建了一个字符串</span>s <span class="token operator">+=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实际上原来的"a"字符串对象已经丢弃了, 现在又产生了一个字符串s += "b"(也就是"ab"). 如果多次执行这些改变串内容的操作, 会导致大量副本字符串对象存留在内存中, 降低效率. 如果这样的操作放在循环中, 会极大影响程序的性能</span><span class="token comment" spellcheck="true">//结论: 如果我们对String做大量修改, 不要使用String</span></code></pre></li></ol><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><h5 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h5><p>获取一个 a - b 之间的一个随机整数</p><p><code>int num = (int)(Math.random() * (b - a + 1) + a)</code></p><p><img src="https://img-blog.csdnimg.cn/7744ddbc9ef0439bbace29507cbd53bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><p><img src="https://img-blog.csdnimg.cn/08a952d5e705455392e62a521f957d1b.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/00dfd34384564c7f8407cd70a08533bc.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/7f3943a157eb4e6c924615588eeb53da.png" alt="img"></p><h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><p><img src="https://img-blog.csdnimg.cn/789ed06ecdd14281a531ed783c00f415.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h6 id="24小时进制"><a href="#24小时进制" class="headerlink" title="24小时进制"></a>24小时进制</h6><p>如果我们需要按照24小时进制来获取时间, Calendar.HOUR 改成  Calendar.HOUR_OF_DAY</p><h3 id="第三代日期类-JDK8加入"><a href="#第三代日期类-JDK8加入" class="headerlink" title="第三代日期类  JDK8加入"></a>第三代日期类  JDK8加入</h3><p><code>LocalDate(日期/年月日)</code>,  <code>LocalTime(时间/时分秒)</code>,  <code>LocalDateTime(日期时间/年月日时分秒)</code></p><p><img src="https://img-blog.csdnimg.cn/ccca9b21f2624e9f86990cfa8ecd946e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h6 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h6><p><img src="https://img-blog.csdnimg.cn/dac1f67bb05b4cb88e5541a197edc15d.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记三</title>
      <link href="/2020/02/17/java-note03/"/>
      <url>/2020/02/17/java-note03/</url>
      
        <content type="html"><![CDATA[<h1 id="Java笔记"><a href="#Java笔记" class="headerlink" title="Java笔记"></a>Java笔记</h1><h2 id="第七章-面向对象-中级"><a href="#第七章-面向对象-中级" class="headerlink" title="第七章 面向对象(中级)"></a>第七章 面向对象(中级)</h2><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><table><thead><tr><th align="center">作用域</th><th align="center">当前类</th><th align="center">同一包</th><th align="center">其他包的子孙类</th><th align="center">其他包的类</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">friendly</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h6 id="访问修饰符细节"><a href="#访问修饰符细节" class="headerlink" title="访问修饰符细节"></a>访问修饰符细节</h6><p>只有默认的(没有修饰符)和public才能修饰类</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ol><li><p>将属性进行私有化private</p></li><li><p>提供一个公共的(public)set的方法, 用于对属性判断并赋值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setXxx</span><span class="token punctuation">(</span>类型 参数名<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Xxx表示某个属性</span>    <span class="token comment" spellcheck="true">//加入数据验证的业务逻辑</span>    属性 <span class="token operator">=</span> 参数名<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>提供一个公共的(public)get的方法, 用于获取属性的值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> 数据类型 <span class="token function">getXxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//权限判断, Xxx某个属性</span>    <span class="token keyword">return</span> xx<span class="token punctuation">}</span></code></pre></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><img src="https://img-blog.csdnimg.cn/6700f4add1374946b28884f99c05fe48.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="继承细节"><a href="#继承细节" class="headerlink" title="继承细节"></a>继承细节</h3><ol><li><p>子类继承了所有的属性和方法, 但是<strong>私有属性和方法不能在子类直接访问</strong>, 要通过父类提供公共的方法去访问</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//父类Base</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> n1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过父类提供一个public的方法, 返回了n2</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getN2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> n2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//通过父类提供的public的方法来调用test200()</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callTest200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//子类Sub</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//要通过父类提供公共的方法去访问n2</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n4="</span> <span class="token operator">+</span> <span class="token function">getN2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callTest200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>子类必须调用父类的构造器</strong>, 完成父类的初始化</p></li><li><p>当创建子类对象时, 不管使用子类的哪个构造器, 默认情况下总会去调用父类的无参构造器, 如果父类没有提供无参构造器, 则必须在子类的构造器中用super去指定使用父类的哪个构造器完成对父类的初始化工作</p></li><li><p>如果希望指定去调用父类的某个构造器, 则显式的调用一下 : <code>super(参数列表)</code></p><p>1.调用父类的无参构造器, 如下 或者 什么都不写, <strong>默认就是调用<code>super()</code></strong></p><p><code>super();</code>//父类的无参构造器</p><p>2.调用父类的 <code>Base(Sting name)</code>构造器</p><p><code>super("jack");</code></p></li><li><p>super在使用时, 必须放在构造器的第一行(super只能在构造器中使用)</p></li><li><p><code>super()</code>和<code>this()</code>都只能放在构造器的第一行,因此这两个方法不能共存在一个构造器中</p></li><li><p>父类构造器的调用不限于直接父类! 将一直往上追溯直到Object类</p></li></ol><h3 id="继承的本质"><a href="#继承的本质" class="headerlink" title="继承的本质"></a>继承的本质</h3><p>创建子类的过程中    <code>Son son = new Son();</code></p><p>是先加载类,  <code>1.Object  - 2.GrandPa - 3.Father - 4.Son</code></p><p><img src="https://img-blog.csdnimg.cn/7e2cc51f5a484dffac5b326f6849a651.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>注意此时name与父类和爷爷类的属性名字相同, 出现这种情况下时,按以下规则 :</p><p><img src="https://img-blog.csdnimg.cn/d73b7db3004e4a9ab361ff13ffc337d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>如果父类属性为私有属性, 那么还是需要通过公共的方法去访问</p><p><img src="https://img-blog.csdnimg.cn/db4dfdc47f9b4f12bd8a75ae90a54228.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>如果此时父类的age属性是私有的, 而爷爷类的age属性是public的话, 可以直接用 <code>son.age</code>来访问吗?</p><p>答案是<strong>不可以</strong>!!!    它是一层一层往上找的, 如果在父类遇到私有的age属性, 就会直接报错, 无法绕过父类去访问爷爷类的age属性(可以通过爷爷类的public方法访问)</p><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>super代表父类的引用, 用于访问父类的属性, 方法, 构造器</p><ol><li><p>访问父类的属性, 但不能访问父类的private属性</p><p><code>super.属性名</code></p></li><li><p>访问父类的方法, 不能访问父类的private方法</p><p><code>super.方法名</code></p></li><li><p>访问父类的构造器</p><p><code>super(参数列表)</code></p></li></ol><h3 id="super细节"><a href="#super细节" class="headerlink" title="super细节"></a>super细节</h3><ol><li><p>当子类中有和父类中的成员(属性和方法)重名时, 为了访问父类的成员, 必须通过super. 如果没有重名, 使用super, this, 直接访问是一样的效果</p><p><img src="https://img-blog.csdnimg.cn/38ead28502f74f99b7bacbdfb2e4903c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/d293677a9d814a258576acb7588f5419.png" alt="img"></p></li><li><p>super的访问不限于直接父类, 如果爷爷类和本类中有同名的成员, 也可以使用super去访问爷爷类的成员, 如果多个基类中都有同名的成员, 使用super访问遵循就近原则</p></li><li><p>调用父类构造器的好处 :父类的属性由父类初始化, 子类的属性由子类初始化</p></li></ol><h5 id="super和this的比较"><a href="#super和this的比较" class="headerlink" title="super和this的比较"></a>super和this的比较</h5><p><img src="https://img-blog.csdnimg.cn/2bae6f49712d444494fadb83cb49c08a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>方法重写也叫方法覆盖</p><p><img src="https://img-blog.csdnimg.cn/c5749e8c90694a76adfb2a4fbb67198f.png" alt="img"></p><h3 id="方法重写细节"><a href="#方法重写细节" class="headerlink" title="方法重写细节"></a>方法重写细节</h3><ol><li>子类的方法的<strong>形参列表</strong>, <strong>方法名称</strong>, 要和父类方法的<strong>形参列表</strong>, <strong>方法名称</strong>完全一样</li><li>子类的返回类型和父类方法返回类型一样, 或者是父类返回类型的子类   比如 : 父类 返回类型是 Object, 子类方法返回类型是 String</li><li>子类方法不能缩小父类方法的访问权限</li></ol><p>重写与重载的区别</p><p><img src="https://img-blog.csdnimg.cn/bfcb9378b98a41cf99924e6d5f8151e8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li><p>方法重载和方法的重写体现多态</p></li><li><p>对象的多态</p><ol><li><p>一句话的编译类型和运行类型可以不一致</p><pre class=" language-java"><code class="language-java">Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译类型(名义上)是Animal,运行类型(实际上)是Dog</span></code></pre></li><li><p>编译类型在定义对象时, 就确定了, 不能改变</p></li><li><p>运行类型是可以变化的</p></li><li><p>编译类型看定义时 =号 的左边, 运行类型看 =号 的右边</p></li></ol></li></ol><h3 id="多态的细节"><a href="#多态的细节" class="headerlink" title="多态的细节"></a>多态的细节</h3><ol><li><p>向上转型</p><p>多态的前提是 : 两个对象(类)存在继承关系</p><p>多态的向上转型</p><ol><li><p>本质: 父类的引用指向了子类的对象</p></li><li><p>语法: 父类类型 引用名 = new 子类类型();</p></li><li><p>特点: 编译类型看左边, 运行类型看右边.</p><p>可以调用父类中的所有成员(需遵守访问权限)</p><p>不能调用子类中特有成员</p><p>最终运行效果看子类的具体实现</p><p>(<strong>编译类型是编译器javac执行的, 运行类型是java执行的</strong>)</p></li></ol><p><img src="https://img-blog.csdnimg.cn/c8b22ff263214e1292b39104b164ed0a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>向下转型</p><ol><li><p>语法: 子类类型 引用名 = (子类类型) 父类引用</p></li><li><p>只能强转父类的引用, 不能强转父类的对象</p></li><li><p>要求父类的引用必须指向的是当前目标类型的对象</p></li><li><p>当向下转型后, 可以调用子类类型中所有 的成员</p><p><img src="https://img-blog.csdnimg.cn/80dc64531fb94e63b178b4bb3b5a28e1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol></li></ol><h3 id="属性重写问题"><a href="#属性重写问题" class="headerlink" title="属性重写问题"></a>属性重写问题</h3><ol><li>属性没有重写之说!!! 属性的值看<strong>编译类型</strong></li><li><code>instanceOf</code>比较操作符, 用于判断对象的<strong>运行类型</strong>是否为XX类型或者XX类型的子类型</li></ol><h3 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h3><ol><li>当<strong>调用对象方法</strong>的时候, 该方法会和该对象的内存地址/<strong>运行类型绑定</strong></li><li>当<strong>调用对象属性</strong>时, 没有动态绑定机制, 哪里声明, 哪里使用</li></ol><h3 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h3><p>//创建一个Person类, Student和Teacher继承于它</p><p>//2个Student 对象和2个Teacher 对象, 统一放在数组中, 并调用每个say方法</p><p><img src="https://img-blog.csdnimg.cn/58606885ca38402487315f7710090902.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>//如何调用子类特有的方法, 比如Teacher有一个teach, Student有一个study , 怎么调用</p><p><img src="https://img-blog.csdnimg.cn/056a97c6bca74ac88a7cd59779d69b28.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h3><p>方法定义的形参类型为父类类型, 实参类型允许为子类类型</p><h3 id="Object类详解"><a href="#Object类详解" class="headerlink" title="Object类详解"></a>Object类详解</h3><h5 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h5><p>== 与 equals的对比</p><ol><li>== 是一个比较运算符, 既可以判断基本类型, 又可以判断引用类型</li><li>如果判断基本类型, 判断的是值是否相等</li><li>如果判断引用类型, 判断的是地址是否相等, 即判定是不是同一个对象</li></ol><p>equals方法 : 是Object类中的方法, 只能判断引用类型</p><p>默认判断的是地址是否相等, 子类中往往重写该方法, 用于判断内容是否相等. 比如 Integer, String…</p><h5 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h5><pre class=" language-java"><code class="language-java">AA aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AA aa2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AA aa3 <span class="token operator">=</span> aa<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa.hashCode = "</span> <span class="token operator">+</span> aa<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa2.hashCode = "</span> <span class="token operator">+</span> aa2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa3.hashCode = "</span> <span class="token operator">+</span> aa3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>提高具有哈希结构的容器的效率</li><li>两个引用, 如果指向的是同一个对象, 则哈希值肯定是一样的</li><li>两个引用, 如果指向的是不同对象, 则哈希值是不一样的</li><li>哈希值主要根据地址号来的,  但是不能完全将哈希值等价于地址</li></ol><h5 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h5><ol><li>默认返回 : 全类名 + @ + 哈希值的十六进制</li><li>子类往往重写toString方法, 用于返回对象的属性信息</li><li>重写toString方法, 打印对象或拼接对象, 都会自动调用该对象的toString形式(快捷键)</li><li>当直接输出一个对象时, toString方法会被默认的调用</li></ol><h5 id="Finalize方法"><a href="#Finalize方法" class="headerlink" title="Finalize方法"></a>Finalize方法</h5><ol><li>当对象被回收时, 系统自动调用该对象的finalize方法. 子类可以重写该方法, 做一些释放资源的操作</li><li>什么时候被回收 : 当某个对象没有任何引用时, 则jvm就认为这个对象是一个垃圾对象, 就会使用垃圾回收机制来销毁该对象, 在销毁该对象前, 会先调用finalize方法</li><li>垃圾回收机制的调用, 是由系统来决定, 也可以通过<code>System.gc()</code>来主动触发垃圾回收机制</li></ol><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>在断点调试过程中, 是运行状态, 是以对象的运行类型来执行的.</p><h2 id="第八章-面向对象-高级"><a href="#第八章-面向对象-高级" class="headerlink" title="第八章 面向对象(高级)"></a>第八章 面向对象(高级)</h2><h3 id="类变量-静态变量-和类方法-静态方法"><a href="#类变量-静态变量-和类方法-静态方法" class="headerlink" title="类变量(静态变量)和类方法(静态方法)"></a>类变量(静态变量)和类方法(静态方法)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个静态变量count</span>    <span class="token comment" spellcheck="true">//该变量最大的特点就是会被Child类所有的对象实例共享</span>    <span class="token comment" spellcheck="true">//类变量,可以通过类名来访问</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="类变量内存布局"><a href="#类变量内存布局" class="headerlink" title="类变量内存布局"></a>类变量内存布局</h3><p>jdk-8:</p><p><img src="https://img-blog.csdnimg.cn/17fda7ed343f40f9a1c668f1d70e6fc1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="类变量细节"><a href="#类变量细节" class="headerlink" title="类变量细节"></a>类变量细节</h3><ol><li><p>静态变量的访问修饰符的访问权限和范围和普通属性是一样的</p></li><li><p>类变量是随着类的加载而创建, 所以即使没有创建对象实例也可以访问</p></li><li><p>什么时候需要用类变量</p><p>当我们需要让某个类的所有对象都共享一个变量时, 就可以考虑使用类变量(静态变量) : 比如 : 定义学生类, 统计所有学生共交多少钱</p></li><li><p>类变量与实例变量(普通属性)区别</p><p>类变量是该类的所有对象共享的, 而实例变量是每个对象独享的</p></li><li><p>类变量的生命周期是随着类的加载开始, 随着类消亡而销毁</p></li></ol><h3 id="类方法细节"><a href="#类方法细节" class="headerlink" title="类方法细节"></a>类方法细节</h3><ol><li><p>静态方法可以访问静态属性</p></li><li><p>什么时候需要类方法</p><p>当方法中不涉及到任何和对象相关的成员, 则可以将方法设计成静态方法, 提高开发效率</p><p>比如: 工具类中的方法utils        Math类\Arrays类等等</p><p>在实际开发中, 往往会将一些通用的方法, 设计成静态方法, 这样我们不需要创建对象就可以使用, 比如打印一维数组, 冒泡排序, 完成某个计算任务等等</p></li><li><p>类方法和普通方法都是随着类的加载而加载, 将结构信息存储在方法区: 类方法中无this的参数</p></li><li><p>普通方法和对象有关, 需要通过对象名调用, 类方法可以通过类名调用, 也可以通过对象名调用</p></li><li><p>类方法中不允许使用和对象有关的关键字, 比如this和super. 普通方法可以</p></li><li><p>类方法中只能访问静态变量或静态方法</p></li><li><p>普通成员方法, 既可以访问普通变量(方法), 也可以访问静态变量(方法)    (必须遵守访问权限)</p></li></ol><h3 id="深入理解main方法"><a href="#深入理解main方法" class="headerlink" title="深入理解main方法"></a>深入理解main方法</h3><ol><li><p>main方法是虚拟机调用</p></li><li><p>java虚拟机需要调用类的main()方法, 所以该方法的访问权限必须是public</p></li><li><p>java虚拟机在执行main()方法时不必创建对象, 所以该方法必须是static</p></li><li><p>该方法接收String类型的数组参数, 该数组中保存执行java命令时传递给所运行的类的参数</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//args 是如何传入</span>        <span class="token comment" spellcheck="true">//遍历显示</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个参数="</span> <span class="token operator">+</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/944b61344229491f9de7e0dd064d77ae.png" alt="img"></p></li><li><p>java 执行的程序 参数1 参数2 参数3</p><p><img src="https://img-blog.csdnimg.cn/0b44bbf615da4983bea76d26ccad64b5.png" alt="img"></p></li><li><p>在main()方法中, 我们可以直接调用main方法所在类的静态方法或静态属性</p></li><li><p>但是不能直接访问该类中的非静态成员, 必须创建该类的一个实例对象后, 才能通过这个对象去访问类中的非静态成员</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main01</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//非静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可以直接使用name</span>        <span class="token comment" spellcheck="true">//1.静态方法可以访问本类的静态成员</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.静态方法不可以访问本类的非静态成员</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误</span>        Main01 main01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先创建一个本类的对象, 再调用n1</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> main01<span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ol><h3 id="代码块使用细节"><a href="#代码块使用细节" class="headerlink" title="代码块使用细节"></a>代码块使用细节</h3><ol><li><p>static代码块也叫静态代码块, 作用就是对类进行初始化, 而且它随着<strong>类的加载</strong>而执行, 并且<strong>只会执行一次</strong>(因为类加载只会一次). 如果是普通代码块, 每创建一次对象, 就执行</p></li><li><p>类什么时候被加载</p><ol><li>创建对象实例时(new)</li><li>创建子类对象实例时, 父类也会被加载</li><li>使用类的静态成员时(静态属性, 静态方法)</li></ol></li><li><p>普通的代码块, 在创建对象实例时, 会被隐式的调用. 被创建一次, 就会被调用一次. <strong>如果只是使用类的静态成员时, 普通代码块并不会执行</strong>(类加载与普通代码块没有关系)</p></li><li><p>创建一个对象时, 在一个类 调用顺序是 :</p><ol><li><p>调用静态代码块和静态属性初始化(注意 : 静态代码块和静态属性初始调用的优先级一样, 如果有多个静态代码块和多个静态变量初始化, 则按他们定义的顺序调用)</p><p><img src="https://img-blog.csdnimg.cn/865d90eff701405a93c4cff9430a258c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_16,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>调用普通代码块和普通属性的初始化(注意 : 普通代码块和普通属性初始化调用的优先级一样, 如果有多个普通代码块和多个普通属性初始化, 则按定义顺序调用)</p></li><li><p>调用构造器(优先级最低)</p></li></ol></li><li><p>构造器的最前面其实隐含了 super() 和 调用普通代码块,  静态相关的代码块, 属性初始化, 在类加载时, 就执行完毕了, 因此是优先于构造器和普通代码块执行的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//构造器</span>        <span class="token comment" spellcheck="true">//这里有隐藏的执行要求</span>        <span class="token comment" spellcheck="true">//1.super();//默认调用父类无参构造器</span>        <span class="token comment" spellcheck="true">//2.调用普通代码块</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>我们看一下创建一个子类时(继承关系), 他们的静态代码块, 静态属性初始化, 普通代码块, 普通属性初始化, 构造方法调用顺序如下 : </p><ol><li><p>父类的静态代码块和静态属性(优先级一样, 按定义顺序执行)</p></li><li><p>子类的静态代码块和静态属性(优先级一样, 按定义顺序执行)</p></li><li><p>父类的普通代码块和普通属性初始化(优先级一样, 按定义顺序执行)</p></li><li><p>父类的构造器</p></li><li><p>子类的普通代码块和普通属性初始化(优先级一样, 按定义顺序执行)</p></li><li><p>子类的构造器</p><p>解读 :</p><p>(1)进行类的加载</p><p>1.1 先加载父类   1.2 再加载子类</p><p>(2)创建对象</p><p>2.1从子类的构造器开始   2.2进入父类的构造器   2.3调用父类的普通代码块   2.4执行父类的构造器   2.5返回子类执行普通代码块   2.6执行子类的构造器</p></li></ol></li><li><p>静态代码块只能直接调用静态成员(静态属性和静态方法), 普通代码块可以调用任意成员</p></li></ol><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><h5 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h5><ol><li>构造器私有化    -  防止直接 new</li><li>类的内部创建对象(该对象是static)</li><li>向外暴露一个静态的公共方法, 返回对象</li><li>代码实现</li></ol><h5 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h5><ol><li>构造器私有化    -  防止直接 new</li><li>定义一个静态属性, 不直接new</li><li>向外暴露一个静态的公共方法, 返回对象</li><li>在静态公共方法里面进行判断此时是否创建对象, 如果没有创建对象, 那么就创建一个对象</li></ol><h6 id="饿汉式与懒汉式的区别"><a href="#饿汉式与懒汉式的区别" class="headerlink" title="饿汉式与懒汉式的区别"></a>饿汉式与懒汉式的区别</h6><ol><li>二者最主要的区别在于创建对象的时机不同 : 饿汉式是在类加载就创建了对象实例, 而懒汉式是在使用时才创建</li><li>饿汉式不存在线程安全问题, 懒汉式存在线程安全问题</li><li>饿汉式存在浪费资源的可能. 因为如果程序员一个对象都没有使用, 那么饿汉式创建的对象就浪费了, 懒汉式是使用时才创建, 就不存在这个问题.</li></ol><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>使用场景</p><ol><li>当不希望类被继承时</li><li>当不希望父类的某个方法被子类覆盖/重写</li><li>当不希望类的某个属性的值被修改(常量)</li><li>当不希望某个局部变量被修改(局部常量)</li></ol><h3 id="final细节"><a href="#final细节" class="headerlink" title="final细节"></a>final细节</h3><ol><li><p>final修饰的属性又叫常量, 一般用XX_XX_XX来命名</p></li><li><p>final修饰的属性在定义时, 必须赋初值, 并且以后不能再修改, 赋值可以在如下位置之一选择一个位置赋初值 :</p><ol><li>定义时 : <code>public final double TAX_RATE = 0.08;</code></li><li>在构造器中</li><li>在代码块中</li></ol><p><img src="https://img-blog.csdnimg.cn/bb9e3f349e234d1798bb71f9700fc7cc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>如果final修饰的属性是静态的, 则初始化的位置只能是 :</p><ol><li>定义时</li><li>静态代码块 (不能在构造器中赋值)</li></ol></li><li><p>final类不能继承, 但是可以实例化对象</p></li><li><p>如果类不是final类, 但是含有final方法, 则该方法虽然不能重写, 但是可以被继承</p></li><li><p>一般来说, 如果一个类已经是final类了, 就没有必要再将方法修饰成final方法</p></li><li><p>final不能修饰构造器</p></li><li><p>包装类, String都是final类</p></li><li><p>final 和 static 往往搭配使用, 效率更高, 不会导致类加载, 底层编译器做了优化处理</p><p><img src="https://img-blog.csdnimg.cn/4a880c11131d426d8234c9450c24aaf8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Something</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//final可以修饰形参</span>        <span class="token operator">++</span>x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,不能修改final x 的值</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以,没有改变x的值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>当父类的某些方法, 需要声明, 但是又不确定如何实现时, 可以将其声明为抽象方法, 那么这个类就是抽象类</p><h5 id="抽象类细节"><a href="#抽象类细节" class="headerlink" title="抽象类细节"></a>抽象类细节</h5><ol><li>抽象类不能被实例化</li><li>抽象类不一定要包含abstract方法. 也就是说, 抽象类可以没有abstract方法</li><li>一旦类包含了abstract方法, 则这个类必须声明为abstract</li><li>abstract只能修饰类和方法, 不能修饰属性和其他的</li><li>抽象类可以有任意成员(<strong>因为抽象类还是类</strong>), 比如 : 非抽象方法, 构造器, 静态属性等等</li><li>抽象方法不能有主体, 即不能实现</li><li>如果一个类继承了抽象类, 则它必须实现抽象类的所有抽象方法, 除非它自己也声明为abstract类</li><li>抽象方法不能使用private, final, static来修饰, 因为这些关键字都是和重写相违背的</li></ol><h3 id="模板设计模式-抽象类最佳实践"><a href="#模板设计模式-抽象类最佳实践" class="headerlink" title="模板设计模式-抽象类最佳实践"></a>模板设计模式-抽象类最佳实践</h3><p>抽象类体现的就是一种模板模式的设计, 抽象类作为多个子类的通用模板, 子类在抽象类的基础上进行扩展, 但子类总体上会保留抽象类的行为方式</p><ol><li>当功能内部一部分实现是确定的, 一部分实现是不确定的. 这时可以把不确定的部分暴露出去, 让子类去实现</li><li>编写一个抽象父类, 父类提供了多个子类的通用方法, 并把一个或多个方法留给其子类实现, 就是一种模板模式</li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><img src="https://img-blog.csdnimg.cn/74bae1f267994b6f95b010a268782f7a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="接口细节"><a href="#接口细节" class="headerlink" title="接口细节"></a>接口细节</h3><ol><li><p>接口不能实例化</p></li><li><p>接口中所有的方法是public方法, 接口中的抽象方法, 可以不用abstract修饰</p></li><li><p>一个普通类实现接口, 就必须将该接口的所有方法都实现</p></li><li><p>抽象类实现接口, 可以不用实现接口的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不会报错</span><span class="token punctuation">}</span></code></pre></li><li><p>一个类同时可以实现多个接口</p></li><li><p>接口中的属性, 只能是final的, 而且是 public static final 修饰符</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价 public static final int n1 = 10;</span><span class="token punctuation">}</span></code></pre></li><li><p>接口中属性的访问形式 : 接口名.属性名</p></li><li><p>接口不能继承其他类, 但是可以继承多个别的接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">,</span>C<span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li><li><p>接口的修饰符只能是public 和默认, 这点和类的修饰符是一样的</p></li></ol><h3 id="接口与继承的区别"><a href="#接口与继承的区别" class="headerlink" title="接口与继承的区别"></a>接口与继承的区别</h3><p>接口实现机制是对单继承机制的补充.</p><ol><li>当子类继承了父类, 就自动的拥有父类的功能</li><li>如果子类需要扩展功能, 可以通过实现接口的方式扩展</li></ol><p>接口和继承解决的问题不同</p><ol><li>继承的价值主要在于 : 解决代码的复用性和可维护性</li><li>接口的价值主要在于 : 设计, 设计好各种规范(方法),  让其他类去实现这些方法</li></ol><p>接口比继承更加灵活</p><ol><li>继承是满足 is - a 的关系, 而接口只需满足 like - a 的关系</li></ol><h3 id="接口多态特性"><a href="#接口多态特性" class="headerlink" title="接口多态特性"></a>接口多态特性</h3><ol><li><h5 id="多态参数-1"><a href="#多态参数-1" class="headerlink" title="多态参数"></a>多态参数</h5><p><img src="https://img-blog.csdnimg.cn/b054fa0d0bb24fa8ae76a5a63cf69b92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><h5 id="多态数组-1"><a href="#多态数组-1" class="headerlink" title="多态数组"></a>多态数组</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span>Usb<span class="token punctuation">[</span><span class="token punctuation">]</span> usbs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Usb</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>usbs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>usbs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Camera_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*给Usb数组中, 存放Phone 和 Camera 对象, Phone类还有一个特有的方法call(),请遍历Usb数组, 如果是Phone对象, 除了调用Usb 接口定义的方法外, 还需要调用Phone特有方法Call()*/</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> usbs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态绑定..</span>    <span class="token comment" spellcheck="true">//进行类型判断, 然后进行类型的向下转型</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Phone_</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>Phone_<span class="token punctuation">)</span>usbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//接口</span><span class="token keyword">interface</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone_</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机可以打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机工作中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Camera_</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相机工作中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><h5 id="接口的多态传递现象"><a href="#接口的多态传递现象" class="headerlink" title="接口的多态传递现象"></a>接口的多态传递现象</h5><p><img src="https://img-blog.csdnimg.cn/92027b5d5cdd4126be9060f752336045.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h5 id="类的五大成员-属性-方法-构造器-代码块-内部类"><a href="#类的五大成员-属性-方法-构造器-代码块-内部类" class="headerlink" title="类的五大成员: 属性, 方法, 构造器, 代码块, 内部类"></a>类的五大成员: 属性, 方法, 构造器, 代码块, 内部类</h5><p><img src="https://img-blog.csdnimg.cn/bf103c84540c4015b0a08d8708422064.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h5 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h5><p>定义在外部类局部位置上 (比如方法内)</p><ol><li>局部内部类 (有类名)</li><li>匿名内部类 (没有类名)</li></ol><p>定义在外部类的成员位置(属性或者方法)上</p><ol><li>成员内部类 (没用static修饰)</li><li>静态内部类 (使用static修饰)</li></ol><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外部类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//方法</span>        <span class="token comment" spellcheck="true">//1.局部内部类是定义在外部类的局部位置, 通常在方法</span>        <span class="token comment" spellcheck="true">//3.不能添加访问修饰符, 因为它的地位就是一个局部变量. 局部变量不能使用修饰符, 但是可以使用final修饰, 因为局部变量也可以使用final</span>        <span class="token comment" spellcheck="true">//4.作用域 : 仅仅在定义他的方法或代码块中</span>        <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//局部内部类</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员重名</span>            <span class="token comment" spellcheck="true">//2.可以直接访问外部类的所有成员, 包含私有的</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//解读: Outer01.this 本质就是外部类的对象, 即哪个对象调用了m1, Outer01.this就是哪个对象</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部类的n1="</span> <span class="token operator">+</span> Outer01<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5.外部类在方法中, 可以创建内部类的对象,然后调用方法(注意: 必须在作用域内)</span>        <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token function">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//6.外部其他类, 不能访问局部内部类</span><span class="token comment" spellcheck="true">//7.如果外部类和局部内部类的成员重名时, 默认遵循就近原则, 如果想访问外部类的成员, 则可以使用(外部类名.this.成员)去访问</span></code></pre><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类是定义在外部类的局部位置, 比如方法中, 并且没有类名</p><ol><li>本质是类</li><li>是一个内部类</li><li>该类没有名字</li><li>同时还是一个对象</li></ol><p>//基于接口的匿名内部类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//需求: 想使用IA接口, 并创建对象</span><span class="token comment" spellcheck="true">//传统方式: 是写一个类(Dog类), 实现该接口, 并创建对象</span><span class="token comment" spellcheck="true">//但是如果我们 Dog只是使用一次, 后面不再使用</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//使用匿名内部类</span><span class="token comment" spellcheck="true">//此时 Dog的编译类型是 IA, 运行类型是匿名内部类</span>IA Dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗狗叫唤..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意分号</span></code></pre><p>//基于类的匿名内部类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//father 编译类型 Father, 运行类型是匿名内部类</span><span class="token comment" spellcheck="true">//注意("jack")参数列表会传递给 构造器</span>Father father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fatehr</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类重写了test方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>father<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果此时father是一个抽象类</span><span class="token comment" spellcheck="true">//那么必须要是实现抽象类中的抽象方法</span></code></pre><h3 id="匿名内部类的细节"><a href="#匿名内部类的细节" class="headerlink" title="匿名内部类的细节"></a>匿名内部类的细节</h3><ol><li><p>两种调用方法, 匿名内部类既是一个类的定义, 同时它本身也是一个对象</p><p><img src="https://img-blog.csdnimg.cn/e24e58a0c759419fb520697ce18431a5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>可以直接访问外部类的所有成员, 包含私有的</p></li><li><p>不能添加访问修饰符, 因为它的地位就是一个局部变量</p></li><li><p>作用域 : 仅仅在定义它的方法或代码块中</p></li><li><p><strong>外部其他类不能访问匿名内部类</strong></p></li><li><p>如果外部类和匿名内部类的成员重名时,  默认遵循就近原则,  如果想访问外部类的成员,  则可以使用(外部类名.this.成员)去访问</p></li></ol><h3 id="匿名内部类实践-当作实参直接传递"><a href="#匿名内部类实践-当作实参直接传递" class="headerlink" title="匿名内部类实践-当作实参直接传递"></a>匿名内部类实践-当作实参直接传递</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span>IL il<span class="token punctuation">)</span><span class="token punctuation">{</span>    il<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//当作实参直接传递  </span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IL</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外部类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//成员内部类, 是定义在外部内的成员位置上</span>    <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//成员内部类</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可以直接访问外部类的所有成员, 包含私有的</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1 ="</span> <span class="token operator">+</span> n1 <span class="token operator">+</span> <span class="token string">"name ="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//写方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用成员内部类</span>        Inner01 inner01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner01<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.可以添加任意访问修饰符(public, protected, 默认, private) 因为它的地位就是一个成员</span><span class="token comment" spellcheck="true">//2.成员内部类 - 访问 - 外部类成员</span><span class="token comment" spellcheck="true">//    访问方式 : 直接访问</span><span class="token comment" spellcheck="true">//3.外部类 - 访问 - 成员内部类</span><span class="token comment" spellcheck="true">//  访问方式 : 创建对象,再访问</span><span class="token comment" spellcheck="true">//4.如果外部类和内部类的成员重名时, 默认遵循就近原则, 如果想访问外部类的成员, 则可以使用(外部类名.this.成员)去访问</span></code></pre><h5 id="外部其他类-访问-成员内部类-看别人博客"><a href="#外部其他类-访问-成员内部类-看别人博客" class="headerlink" title="外部其他类 - 访问 - 成员内部类  //看别人博客"></a>外部其他类 - 访问 - 成员内部类  //看别人博客</h5><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>使用static修饰, 定义在外部类的成员位置</p><ol><li><p>可以直接访问外部类的所有静态成员, 包含私有的, 但不能直接访问非静态成员</p></li><li><p>可以添加任意访问修饰符 (public, protected, 默认, private), 因为它的地位就是一个成员</p></li><li><p>静态内部类 - 访问 - 外部类</p><p>访问方式 : 直接访问所有静态成员</p></li><li><p>外部类 - 访问 - 静态内部类 </p><p>访问方式 : 创建对象, 再访问</p></li><li><h5 id="外部其他类-访问-静态内部类-看别人博客"><a href="#外部其他类-访问-静态内部类-看别人博客" class="headerlink" title="外部其他类 -  访问 - 静态内部类 // 看别人博客"></a>外部其他类 -  访问 - 静态内部类 // 看别人博客</h5></li><li><p>如果外部类和静态内部类的成员重名时,   默认遵循就近原则,   如果想访问外部类的成员,   则可以使用(外部类名.成员)去访问</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记二</title>
      <link href="/2020/01/15/java-note02/"/>
      <url>/2020/01/15/java-note02/</url>
      
        <content type="html"><![CDATA[<h1 id="Java笔记二"><a href="#Java笔记二" class="headerlink" title="Java笔记二"></a>Java笔记二</h1><h2 id="第四章-程序流程控制"><a href="#第四章-程序流程控制" class="headerlink" title="第四章 程序流程控制"></a>第四章 程序流程控制</h2><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ol><li>switch 关键字, 表示switch分支</li><li>表达式 对应一个值</li><li>case 常量1: 当表达式的值等于常量1, 就执行 语句块1</li><li>break: 表示退出switch</li><li>如果和case 常量1匹配, 就执行语句块1, 如果没有匹配, 就继续匹配case 常量2</li><li>如果一个都没有匹配上, 执行default</li></ol><h3 id="switch细节"><a href="#switch细节" class="headerlink" title="switch细节"></a>switch细节</h3><ol><li><p>表达式数据类型, 应和case后的常量类型一致, 或者是可以自动转成可以相互比较的类型, 比如输入的是字符, 而常量是int</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">20</span> <span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>switch(表达式)中表达式的返回值必须是:(byte, short, int, char, enum[枚举], String)</p></li><li><p>case子句中的值必须是常量, 而不能是变量</p></li><li><p>default子句是可选的</p></li><li><p>break语句是用来在执行完一个case分支后使程序跳出switch语句块, 如果没有写break, 会出现<strong>穿透现象</strong>(程序会顺序执行到switch结尾)</p></li></ol><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>当return用在方法时, 表示跳出方法, 如果使用在main, 表示退出程序</p><p>谁调用(接收), 就返回给谁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> returnRes <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把方法 getSum 返回的值 ,赋给 变量 returnRes</span></code></pre><h2 id="第五章-数组-排序"><a href="#第五章-数组-排序" class="headerlink" title="第五章 数组\排序"></a>第五章 数组\排序</h2><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>数据类型[] 数组名 = {元素值, 元素值, …}</p><p><code>int[] a = {1,2,3,4...};</code> </p><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>数据类型[] 数组名 = new 数据类型[大小]</p><p><code>int[] a = new int[3];</code></p><hr><p><code>double[] a;</code>先声明数组</p><p><code>a = new double[5];</code>再分配内存空间</p><h3 id="数组细节"><a href="#数组细节" class="headerlink" title="数组细节"></a>数组细节</h3><ol><li><p>数组是多个相同类型数据的组合, 实现对这些数据的统一管理.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//double -> int 错误  需要满足自动转换</span></code></pre></li><li><p>数组中的元素可以是任何数据类型, 包括基本类型和引用类型, 但是不能混用</p></li><li><p>数组创建后, 如果没有赋值, 有默认的值. String null / int 0 / short 0 / byte 0 / long 0 / float 0.0 double 0.0 / char \u0000 / boolean false</p></li><li><p>数组的下标是从0开始的.</p></li><li><p>注意越界</p></li><li><p>数组属于引用类型, 数组型数据是对象</p></li></ol><h3 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h3><ol><li><p>基本数据类型赋值, 赋值方式为值拷贝(值传递), 不会相互影响.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//n2的变化, 不会影响到n1的值</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> n1<span class="token punctuation">;</span>n2 <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出n1的值为 10</span></code></pre></li><li><p>数组在默认情况下是引用传递, 赋的值是地址, 赋值方式为引用赋值(地址拷贝)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//是一个地址, arr2变化会影响到arr1</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出arr1的值为 10, 2, 3</span></code></pre></li></ol><h3 id="值传递-值拷贝-和-引用传递-地址拷贝-的区别"><a href="#值传递-值拷贝-和-引用传递-地址拷贝-的区别" class="headerlink" title="值传递(值拷贝) 和 引用传递(地址拷贝)的区别"></a><strong><u>值传递(值拷贝) 和 引用传递(地址拷贝)的区别</u></strong></h3><p><img src="https://img-blog.csdnimg.cn/50310e663fa54f9c865451b2d132cdaf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>在内存里面只要分配了一个数据空间, 一定会对应一个地址.</p><p><img src="https://img-blog.csdnimg.cn/65cec621a9144fcca7e184b8b854ddc5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>⬇</p><p><img src="https://img-blog.csdnimg.cn/40586b7e294f41ae8ec65f51d7b431d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="数组拷贝-内容复制"><a href="#数组拷贝-内容复制" class="headerlink" title="数组拷贝(内容复制)"></a>数组拷贝(内容复制)</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将 int[] arr1 = {10,20,30}; 拷贝到 arr2数组, 要求数据空间是独立的.</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个新的数组arr2, 开辟新的空间, 大小和arr1一样</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历 arr1 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式一:</span><span class="token comment" spellcheck="true">//1.把arr[0] 和 arr[5] 进行交换</span><span class="token comment" spellcheck="true">//2.把arr[1] 和 arr[4] 进行交换</span><span class="token comment" spellcheck="true">//3.把arr[2] 和 arr[3] 进行交换</span><span class="token comment" spellcheck="true">//4.一共要交换 3 次 = arr.length / 2</span><span class="token comment" spellcheck="true">//5.每次交换时, 对应的下标是arr[i] 和 arr[arr.length - 1 - i]</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式二</span><span class="token comment" spellcheck="true">//逆序赋值法</span><span class="token comment" spellcheck="true">//1.创建一个新的数组 arr2</span><span class="token comment" spellcheck="true">//2.逆序遍历arr, 将每个元素拷贝到 arr2的元素中</span><span class="token comment" spellcheck="true">//3.将arr 指向 arr2</span><span class="token comment" spellcheck="true">//注意 : 让 arr 指向 arr2数据空间, 此时 arr原来的数据空间就没有变量引用, 会被当成垃圾, 销毁</span></code></pre><h3 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h3><p>数组不能扩容, 必须新定义一个新的数组, 把原先的数组内容遍历给新的数组中, 再赋新的元素.</p><h3 id="冒泡排序-从小到大"><a href="#冒泡排序-从小到大" class="headerlink" title="冒泡排序(从小到大)"></a>冒泡排序(从小到大)</h3><ol><li>每一轮排序可以确定一个数的位置, 比如第一轮排序确定最大数, 第二轮排序确定第二大的数的位置, 以此类推</li><li>当进行比较时, 如果前面的数大于后面的数, 就交换</li><li>每轮比较在减少 例如: 4-&gt;3-&gt;2-&gt;1</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于辅助交换的变量</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==第一轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n==第二轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n==第三轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n==第四轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>合并代码<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//外层循环是4次</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//4次比较-3次-2次-1次</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p><code>int[] [] arr = {{0,0,0},{1,1,1},{2,2,2}};</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二维数组的每个元素是一维数组,所以要得到每个一维数组的值,还需要再次遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遍历二维数组的每个元素</span>    <span class="token comment" spellcheck="true">//1.arr[i] 表示 二维数组的i+1个元素  比如arr[0] : 二维数组的第一个元素</span>    <span class="token comment" spellcheck="true">//2.arr[i].length 得到对应的每个一维数组的长度</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>int[] [] arr = new int [2][3]</code>      二维数组内存形式 :</p><p><img src="https://img-blog.csdnimg.cn/53d52bacc1534fc89f01570fe32ab5a9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="动态初始化-列数不确定"><a href="#动态初始化-列数不确定" class="headerlink" title="动态初始化-列数不确定"></a>动态初始化-列数不确定</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*i = 0: 1i = 1: 2 2i = 2: 3 3 3一个有三个一维数组, 每一个一维数组的元素是不一样的*/</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建二维数组,但是只是确定一维数组的个数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遍历arr每个一维数组</span>    <span class="token comment" spellcheck="true">//给每个一维数组开空间</span>    <span class="token comment" spellcheck="true">//如果没有给一维数组 new, 那么arr[i]就是null</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历一维数组, 并给一维数组的每个元素赋值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第六章-面向对象"><a href="#第六章-面向对象" class="headerlink" title="第六章 面向对象"></a>第六章 面向对象</h2><h3 id="对象在内存中的存在形式"><a href="#对象在内存中的存在形式" class="headerlink" title="对象在内存中的存在形式"></a>对象在内存中的存在形式</h3><p>对象也是一个引用数据类型.</p><p><img src="https://img-blog.csdnimg.cn/47cbef86fd4446b0ae1ddcf16721d22f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="对象创建的流程分析"><a href="#对象创建的流程分析" class="headerlink" title="对象创建的流程分析"></a>对象创建的流程分析</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//main中</span>Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>在方法区中加载Person类信息(Person.class), 只会加载一次</li><li>在堆中分配空间(地址)</li><li>完成对象的初始化[3.1 默认初始化 age = 0 name = null  3.2 显式初始化 age = 90 name = null  3.3 构造器的初始化 age = 20 name = jack(字符串,堆中的对象的name地址指向在常量池中jack)]</li><li>对象在堆中的地址, 返回给p(p是对象名, 也可以理解成是对象的引用)</li></ol><h3 id="对象分配机制"><a href="#对象分配机制" class="headerlink" title="对象分配机制"></a>对象分配机制</h3><pre class=" language-java"><code class="language-java">Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>Person p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把p1赋给了p2 , 让p2指向p1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p2,age是什么?</span></code></pre><p><img src="https://img-blog.csdnimg.cn/0b6566b84499482f85e0f2918b12f2c2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//公有类</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Test类的成员方法</span>        count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个count就是属性 改成10</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count1="</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Test类的成员方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count2="</span> <span class="token operator">+</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这是Test类的main方法, 任何一个类,都可以有main</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. new Test() 是匿名对象, 匿名对象使用后, 就不能再使用(一次性)</span>        <span class="token comment" spellcheck="true">//2. new Test().count1() 创建好匿名对象后, 就调用count1()</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Java内存的结构分析"><a href="#Java内存的结构分析" class="headerlink" title="Java内存的结构分析:"></a>Java内存的结构分析:</h3><ol><li>栈: 一般存放基本数据类型(局部类型)</li><li>堆: 存放对象</li><li>方法区: 常量池(常量, 比如字符串), 类加载信息</li></ol><p><img src="https://img-blog.csdnimg.cn/b8de488856e447fdbad03ed281b2f2d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="属性-成员变量-字段-细节"><a href="#属性-成员变量-字段-细节" class="headerlink" title="属性(成员变量\字段)细节"></a>属性(成员变量\字段)细节</h3><ol><li>属性的定义语法变量, 示例 : 访问修饰符 属性类型 属性名;</li><li>属性的定义类型可以为任意类型, 可以是基本类型或引用类型.</li><li>属性如果不赋值, 有默认值. 和数组一样.  String null / int 0 / short 0 / byte 0 / long 0 / float 0.0 double 0.0 / char \u0000 / boolean false</li></ol><h3 id="方法调用机制"><a href="#方法调用机制" class="headerlink" title="方法调用机制"></a>方法调用机制</h3><p>当返回后, <code>getSum</code>栈就被释放(销毁)了</p><p><img src="https://img-blog.csdnimg.cn/a56f21648e8a43f788f22769c046b846.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><ol><li>当程序执行到方法时, 就会开辟一个独立的空间(栈空间)</li><li>当方法执行完毕, 或者执行到return语句时, 就会返回</li><li>返回到调用方法的地方</li><li>返回后, 继续执行方法后面的代码</li><li>当main方法(栈)执行完毕, 整个程序退出</li><li><strong>基本数据类型, 传递的是值(值拷贝), 形参的任何改变不影响实参</strong>(方法传参机制)</li><li><strong>引用数据类型, 传递的是地址(传递也是值, 但是值是地址), 形参的改变会影响到实参</strong>(方法传参机制)</li></ol><h3 id="方法使用细节"><a href="#方法使用细节" class="headerlink" title="方法使用细节"></a>方法使用细节</h3><ol><li><p>一个方法<strong>最多有一个</strong>返回值, [ 如果要返回多个结果 , 返回数组 ]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span><span class="token keyword">int</span> n2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    resArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>    resArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">;</span>    <span class="token keyword">return</span> resArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>返回类型可以是任意类型, 包括基本类型或引用类型</p></li><li><p>如果方法要求有<strong>返回数据类型</strong>, 则方法体中最后的执行语句必须为 return 值, 而且要求返回值类型必须和 return 值类型一致或兼容(自动转换)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                               <span class="token comment" spellcheck="true">//错误,缺少返回语句</span><span class="token punctuation">}</span></code></pre></li><li><p>如果方法是void, 则方法体中可以没有return语句, 或者 只写return(不能有返回值)</p></li><li><p>同一个类中的方法, 直接调用</p></li><li><p>跨类中方法A类调用B类方法, 需要通过对象名调用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类中的 m1()被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建对象</span>        b<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类中的 m1()继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类中的 hi()被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="形参列表的细节"><a href="#形参列表的细节" class="headerlink" title="形参列表的细节"></a>形参列表的细节</h3><ol><li>一个方法可以有0个参数, 也可以有多个参数, 中间用逗号隔开</li><li>参数类型可以是任意类型, 包括基本类型或引用类型</li><li>调用带参数的方法时, 一定对应着参数列表相同类型或者兼容类型(低精度向高精度) 的参数</li><li>方法定义时的参数称为形式参数, 方法调用时的传入参数称为实际参数</li><li>实参和形参的类型要一致或者兼容, 个数, 顺序必须一致</li></ol><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>java允许方法名相同, 但是要求<strong>形参列表不同</strong></p><p>返回类型没有要求</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>java允许将同一个类中<strong>多个同名同功能</strong>但参数个数不同的方法, 封装成一个方法, 通过可变参数实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HspMethod</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//计算2个数的和, 3个数的和, 4.....</span>    <span class="token comment" spellcheck="true">//可以使用方法的重载(但是繁琐)</span>        <span class="token comment" spellcheck="true">//使用可变参数封装成方法</span>    <span class="token comment" spellcheck="true">//1.   int...表示接收的是可变参数, 类型是int, 即可以接收多个int(0 - 多)</span>    <span class="token comment" spellcheck="true">//2. 使用可变参数时, 可以当作数组来使用 即nums可以当作数组</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收的参数的个数:"</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//遍历求和</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="可变参数的细节"><a href="#可变参数的细节" class="headerlink" title="可变参数的细节"></a>可变参数的细节</h6><ol><li><p>可变参数的实参可以是数组</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>T t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ti<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度="</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>可变参数的本质是数组</p></li><li><p>可变参数可以和普通类型的参数一起放在形参列表, 但必须保证可变参数放在最后</p></li><li><p>一个形参列表只能出现一个可变参数</p></li></ol><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>局部变量与全局变量(属性变量)</p><p>全局变量可以不赋值, 直接使用, 因为有默认值, 局部变量必须赋值后才能使用, 因为没有默认值</p><h6 id="作用域细节"><a href="#作用域细节" class="headerlink" title="作用域细节"></a>作用域细节</h6><ol><li><p>属性和局部变量可以重名, 访问时遵循就近原则</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//就近原则</span>        String name <span class="token operator">=</span> <span class="token string">"king"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出的是king</span></code></pre></li><li><p>属性生命周期较长, 伴随着对象的创建而创建,伴随着对象的销毁而销毁. 局部变量,生命周期较短, 伴随着它的代码块的执行而创建, 伴随着代码块的结束而销毁. 即在一次方法调用过程中.</p></li><li><p>作用域范围不一样</p><p>全局变量 : 被本类使用或者其他类使用(需要通过对象的调用)</p><p>局部变量 : 只能被本类中对应的方法中使用</p></li><li><p>修饰符的不同</p><p>全局变量 : 可以加修饰符</p><p>局部变量 : 不能加修饰符</p></li></ol><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 方法名<span class="token punctuation">(</span>和类名保持一致<span class="token punctuation">)</span> <span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    方法体<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//构造器没有返回值</span><span class="token comment" spellcheck="true">//主要作用是初始化</span></code></pre><h6 id="构造器细节"><a href="#构造器细节" class="headerlink" title="构造器细节"></a>构造器细节</h6><ol><li><p>一个类可以定义多个构造器, 即构造器的重载</p></li><li><p>如果程序员没有定义构造器, 系统会自动给类生成一个默认无参构造器(也叫默认构造器), 比如 <code>Dog(){}</code></p></li><li><p>一旦定义了自己的构造器, 默认的构造器就覆盖了, 就不能再使用默认的无参构造器, 除非显式的定义一下, 即<code>Dog(){}</code></p><pre class=" language-java"><code class="language-java">Dog dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用的是默认的无参构造器</span></code></pre></li></ol><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//this.name 就是当前对象的属性name</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//this.age 就是当前对象的属性age</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="深入理解this"><a href="#深入理解this" class="headerlink" title="深入理解this"></a>深入理解this</h6><p><img src="https://img-blog.csdnimg.cn/7f8ed585f0384da88a736e8c191a247a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>虚拟机会给每个对象分配this, 代表当前对象</p><p>哪个对象调用, this就代表哪个对象</p><h3 id="this细节"><a href="#this细节" class="headerlink" title="this细节"></a>this细节</h3><ol><li><p>this关键字可以用来访问本类的属性, 方法, 构造器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//传统方式(按照的是就近原则访问属性,但是如果在方法中有局部变量,那么这个name就是局部变量,不是属性)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"num="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//也可以使用this访问属性(准确定位到属性)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"num="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>this用于区分当前类的属性和局部变量</p></li><li><p>访问成员方法的语法 : this.方法名(参数列表)</p></li><li><p>访问构造器语法 : this(参数列表)    <strong>只能在构造器中使用(即只能在构造器中访问本类另外一个构造器)</strong>   如果有访问构造器语法 : this(参数列表); <em><strong>必须放在第一条语句</strong></em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里去访问 T(String name, int age) 构造器</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"T() 构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">T</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"T(String name, int age) 构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>this不能在类定义的外部使用, 只能在类定义的方法中使用</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记一</title>
      <link href="/2019/12/22/java-note-firstedition/"/>
      <url>/2019/12/22/java-note-firstedition/</url>
      
        <content type="html"><![CDATA[<h1 id="Java笔记一"><a href="#Java笔记一" class="headerlink" title="Java笔记一"></a>Java笔记一</h1><h4 id="因为前面记的笔记过于杂乱，现在整理一份以便复习查阅。本笔记是跟着B站老韩的视频学习记录。"><a href="#因为前面记的笔记过于杂乱，现在整理一份以便复习查阅。本笔记是跟着B站老韩的视频学习记录。" class="headerlink" title="因为前面记的笔记过于杂乱，现在整理一份以便复习查阅。本笔记是跟着B站老韩的视频学习记录。"></a>因为前面记的笔记过于杂乱，现在整理一份以便复习查阅。本笔记是跟着B站老韩的视频学习记录。</h4><h2 id="开发细节"><a href="#开发细节" class="headerlink" title="开发细节"></a>开发细节</h2><ol><li><p>一个源文件最多只能有一个public类,但其他类不受限制.</p></li><li><p>如果源文件包含一个public类,则文件名必须按该类名命名.</p></li><li><p>一个源文件中最多只能有一个public类.其他类的个数不限,也可以将main方法写在非public类中,然后指定运行非public类,这样入口方法就是非public的main方法.</p></li><li><p>文档注释：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//javadoc标签</span><span class="token comment" spellcheck="true">/**     * @author    * @version*/</span><span class="token comment" spellcheck="true">//命令行        </span><span class="token comment" spellcheck="true">//javadoc -d 文件夹名 -xx -yy Demo.java</span>javadoc <span class="token operator">-</span>d d<span class="token operator">:</span>\\temp <span class="token operator">-</span>author <span class="token operator">-</span>version Demo<span class="token punctuation">.</span>java</code></pre></li><li><p>代码规范：</p><ol><li>类、方法的注释，要以javadoc的方式来写。</li><li>非Java Doc的注释，往往是给代码的维护者看的，着重告诉读者为什么这样写，如何修改，注意什么问题等。</li><li>运用tab操作，实现缩进，默认整体向右边移动，用shift+tab整体向左移</li><li>运算符和 = 两边习惯性各加一个空格。</li><li>源文件使用utf-8编码。</li></ol></li></ol><p><img src="https://img-blog.csdnimg.cn/2086b3b4f96943cfb4f88817f8852d92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h2 id="DOS原理"><a href="#DOS原理" class="headerlink" title="DOS原理"></a>DOS原理</h2><p>Dos系统：</p><ol><li>接受指令</li><li>解析指令</li><li>执行指令</li></ol><p>相对路径：从当前目录开始定位，形成的一个路径</p><p>绝对路径：就是完整路径，从顶级目录例如D:\开始定位，形成的路径</p><p>常用dos命令：</p><ol><li><p>查看当前目录是有什么内容：dir</p><p><code>dir </code>       <code> dir d:\abc\test100</code></p></li><li><p>切换到其他盘下：cd</p><p><code>cd /D d:</code>切换到D盘</p></li><li><p>切换到当前盘的其他目录下（使用绝对路径和相对路径演示）</p><p><code>cd d:\abc2\test200</code>   <code>cd ..\..\abc2\test200</code></p></li><li><p>切换到上一级：<code>cd ..</code></p></li><li><p>切换到根目录：<code>cd\</code></p></li><li><p>查看指定的目录下所有的子级目录：<code>tree</code></p></li><li><p>清屏：<code>cls</code></p></li><li><p>退出：<code>exit</code></p></li><li><pre class=" language-java"><code class="language-java">md<span class="token punctuation">[</span>创建目录<span class="token punctuation">]</span>，rd<span class="token punctuation">[</span>删除目录<span class="token punctuation">]</span><span class="token punctuation">,</span>copy<span class="token punctuation">[</span>拷贝文件<span class="token punctuation">]</span><span class="token punctuation">,</span>del<span class="token punctuation">[</span>删除文件<span class="token punctuation">]</span><span class="token punctuation">,</span>echo<span class="token punctuation">[</span>输入内容到文件<span class="token punctuation">]</span><span class="token punctuation">,</span>move<span class="token punctuation">[</span>剪切<span class="token punctuation">]</span></code></pre></li></ol><h2 id="第一章习题"><a href="#第一章习题" class="headerlink" title="第一章习题"></a>第一章习题</h2><ol><li><p>JDK，JRE，JVM的关系</p><p>答：JDK = JRE + java开发工具</p><p>​        JRE = JVM + 核心类库</p></li><li><p>环境变量path配置及其作用</p><p>答：1.环境变量的作用是为了在dos的任意目录，可以去使用java和javac命令。</p><p>2.先配置一个JAVA_HOME = 指向jdk安装的主目录。</p><p>3.编辑path环境变量，增加% JAVA_HOME%\bin</p></li></ol><h2 id="第二章-基本类型"><a href="#第二章-基本类型" class="headerlink" title="第二章  基本类型"></a>第二章  基本类型</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li>变量必须先声明，后使用，即有顺序。</li><li>该区区域的数据/值可以在同一类型范围内不断变化。</li><li>变量在同一个区域内不能重名。</li><li>变量三要素：变量名，值，数据类型。</li></ol><h5 id="＋号的使用"><a href="#＋号的使用" class="headerlink" title="＋号的使用"></a>＋号的使用</h5><ol><li>当左右两边都是数值型，则做加法运算。</li><li>当左右两边有一方为字符型，则做拼接运算。</li><li>运算顺序是从左到右的。</li></ol><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//198</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token operator">+</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10098</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//103hello</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token operator">+</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hello1003</span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p>基本数据类型：数值型：整数类型：</p><p>byte[1] \ short[2] \ int[4] \ long[8]</p></li><li><p>基本数据类型：数值型：浮点类型：</p><p>float[4] \ double[8]</p></li><li><p>基本数据类型：字符型：</p><p>char[2]，存放单个字符’a’</p></li><li><p>基本数据类型：布尔型：</p><p>boolean[1]</p></li><li><p>引用数据类型：类（class）、接口（interface）、数组（[ ]）</p></li></ol><p>注：【2】表示存放两个字节</p><h3 id="整型细节"><a href="#整型细节" class="headerlink" title="整型细节"></a>整型细节</h3><ol><li><p>Java的整型常量默认为int，声明long型常量须后加”l“或者”L“</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4个字节</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> 1L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不对的</span><span class="token keyword">long</span> n3 <span class="token operator">=</span> 1L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对的</span></code></pre></li><li><p>Java程序中变量常声明为int。</p></li><li><p>计算机中最小存储单位：bit。计算机中基本存储单元：byte。一个byte=8个bit。</p></li></ol><h3 id="浮点数细节"><a href="#浮点数细节" class="headerlink" title="浮点数细节"></a>浮点数细节</h3><ol><li><p>浮点数 = 符号位+指数位+尾数位</p></li><li><p>Java的浮点型常量默认为double，声明float型常量须后加”f”或者“F”</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">float</span> n1 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不对的</span><span class="token keyword">float</span> n2 <span class="token operator">=</span> <span class="token number">1.1f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对的</span></code></pre></li><li><p>通常使用double。</p></li><li><p>浮点型使用陷阱：2.7和8.1 / 3 比较</p><p>​    后者结果是2.6999999997，是以精度显示的。</p><p><strong>所以当我们对运算结果是小数的进行相等判断时，要小心</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> num11 <span class="token operator">=</span> <span class="token number">2.7</span><span class="token punctuation">;</span><span class="token keyword">double</span> num12 <span class="token operator">=</span> <span class="token number">8.1</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2.7</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num11<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.7</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接近2.7的小数，而不是2.7</span><span class="token comment" spellcheck="true">//错误写法</span><span class="token keyword">if</span><span class="token punctuation">(</span> num11 <span class="token operator">==</span> num12<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//正确的写法：</span><span class="token keyword">if</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num11 <span class="token operator">-</span> num12<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.000001</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"差值非常小,到我的规定精度,可以认为相等."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//细节:如果是直接查询得到的小数或者直接赋值,是可以判断相等</span></code></pre></li></ol><h3 id="字符型细节"><a href="#字符型细节" class="headerlink" title="字符型细节"></a>字符型细节</h3><ol><li><p>字符常量是用单引号括起来的单个字符.</p></li><li><p>Java允许使用转义字符’\‘来将其后的字符转变为特殊字符型常量.  例如: char c3 = ‘\n’;   表示换行符</p></li><li><p>在java中,char的本质是一个整数,在默认输出时,是Unicode码对应的字符.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出'a' 对应的 数字</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//107</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token string">'b'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//98+1 == 99</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//99</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//99对应的字符 c</span></code></pre></li><li><p>字符类型本质:</p><p>字符型存储到计算机中,需要将字符型对应的码值(整数)找出来,比如’a’ 存储 ==&gt; 码值97 ==&gt; 0110 0001</p></li><li><p>ASCII编码表是一个字节表示,一个128个字符,实际上一个字节可以表示256个字符,只用128个.</p></li><li><p>Unicode编码表 固定大小的编码 使用两个字节来表示字符,字母和汉字统一都是占用两个字节.</p></li><li><p>utf - 8 编码表.大小可变的编码字母占一个字节,汉字使用3个字节.(表示的汉字更多)</p></li><li><p>gbk编码表,字母占一个字节,汉字占2个字节.</p></li></ol><h3 id="数据类型自动转换"><a href="#数据类型自动转换" class="headerlink" title="数据类型自动转换"></a>数据类型自动转换</h3><p><img src="https://img-blog.csdnimg.cn/eba5d610597941948e4993ceb4375f35.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><ol><li><p>有多种类型的数据混合运算时,系统首先自动将所有数据转换成容量最大的那种数据类型,然后再进行计算.</p></li><li><p>(byte , short)与char 之间不会相互自动转换.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//当把具体数赋给byte时,先判断该数是否在byte范围内,如果是就可以</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对,-128~127</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n2 是int</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> n2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,原因:如果是变量赋值,先判断类型</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> b1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,原因:byte不能自动转成char</span></code></pre></li><li><p>byte, short, char 他们三者可以计算,在计算时首先转换为int类型.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">short</span> s2 <span class="token operator">=</span> b2<span class="token operator">+</span>s1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,b2 + s1 => int</span><span class="token comment" spellcheck="true">//只要出现byte\short\char都会转换成先int再计算</span><span class="token keyword">byte</span> b4 <span class="token operator">=</span> b2 <span class="token operator">+</span> b3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误:b2 + b3 => int</span></code></pre></li><li><p>自动提升原则:表达式结果的类型自动提升为 操作数中最大的类型.</p></li></ol><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ol><li><p>使用时,要加上强制转换符(  ),但可能造成精度的损失!!!</p></li><li><p>强转符合只针对最近的操作数有效,往往使用小括号提升优先级</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">3.5</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译错误:double -> int</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">3.5</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//44</span></code></pre></li></ol><h3 id="基本数据类型和String类型的转换"><a href="#基本数据类型和String类型的转换" class="headerlink" title="基本数据类型和String类型的转换"></a>基本数据类型和String类型的转换</h3><ol><li><p>基本类型转String类型</p><p><img src="https://img-blog.csdnimg.cn/e7005cb9271e42b6ad6fe7a46fba356e.png" alt="img"></p></li><li><p>String类型转基本数据类型</p><p>通过基本类型的包装类调用parseXX方法</p><p><img src="https://img-blog.csdnimg.cn/4767ff73ad0b42e2a5e280fbcddd4b0d.png" alt="img"></p></li></ol><h2 id="第三章-运算符"><a href="#第三章-运算符" class="headerlink" title="第三章 运算符"></a>第三章 运算符</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//  / 除法的使用</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.5</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2.0</span><span class="token comment" spellcheck="true">//  % 取模,取余</span><span class="token comment" spellcheck="true">// 在 % 的本质 看一个公式 a % b = a - a / b * b</span><span class="token comment" spellcheck="true">//当a是小数时, 即公式 = a - (int)a / b * b</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -1</span><span class="token comment" spellcheck="true">//  ++的使用</span><span class="token comment" spellcheck="true">//  ++作为单独语句使用都是 i = i + 1;</span><span class="token comment" spellcheck="true">//  ++作为表达式使用:前++ : ++i先自增后赋值/后++ : i++先赋值后自增</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//java规则使用到了临时变量:(1)temp = i;(2)i=i+1;(3)i=temp;</span><span class="token number">1</span><span class="token punctuation">.</span>  result <span class="token operator">=</span> <span class="token number">59</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token comment" spellcheck="true">// 8</span>    result <span class="token operator">=</span> <span class="token number">59</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token comment" spellcheck="true">// 4   8个星期4天</span>    <span class="token number">2</span><span class="token punctuation">.</span>  <span class="token keyword">double</span> huas <span class="token operator">=</span> <span class="token number">234.5</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ss <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">/</span><span class="token number">9</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">234.5</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&amp;&amp; 和 &amp; 使用区别</p><ol><li>&amp;&amp;短路与: 如果第一个条件为false, 则第二个条件不会判断,最终结果为false, 效率高.</li><li>&amp; 逻辑与: 不管第一个条件判断是不是false,第二个条件还是会判断,效率低.</li><li>开发中,我们使用短路与&amp;&amp; ,效率高 </li></ol><p>|| 和 |使用区别</p><p><img src="https://img-blog.csdnimg.cn/7ce2e8c4e33c41eebbc9992c9137f2a0.png" alt="img"></p><h5 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h5><p>复合赋值运算符会进行类型转换.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>b <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b = b + 2;  实际上真正等价于 b = (byte)(b + 2);</span>b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等价于 b = (byte)(b + 1);</span><span class="token comment" spellcheck="true">//如果直接写</span>b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是错误的,类型是int型</span></code></pre><h5 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h5><p>条件表达式 ? 表达式1 :  表达式2;</p><p>运算规则:</p><ol><li><p>如果条件表达式为true, 运算后的结果是表达式1;</p></li><li><p>如果条件表达式为false, 运算后的结果是表达式2;</p><p>口诀: 一真大师</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> a<span class="token operator">++</span><span class="token operator">:</span>b<span class="token operator">--</span>    <span class="token comment" spellcheck="true">//条件表达式为假/运行b--</span>    <span class="token comment" spellcheck="true">//结果为:先返回b的值,然后在 b-1</span>    <span class="token comment" spellcheck="true">//返回结果为99</span></code></pre><p>细节:</p><ol><li><p>表达式1和表达式2要为可以赋给接收变量的类型(或自动转换)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> <span class="token number">1.1</span> <span class="token operator">:</span> <span class="token number">2.3</span><span class="token comment" spellcheck="true">//语法错误</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1.1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">2.3</span><span class="token comment" spellcheck="true">//可以的</span><span class="token keyword">double</span> d <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> a <span class="token operator">:</span> b <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以的,满足int -> double</span></code></pre></li><li><p>三元运算符是一个整体</p><pre class=" language-java"><code class="language-java">Object obj1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出的是1.0,而不是1 </span><span class="token comment" spellcheck="true">//注意三元运算符是一个整体,会优先转换成最高精度的类型,再计算输出等</span></code></pre></li><li><p>三元运算符可以转换从if(…)else 语句</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实现三个数的最大值</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">553</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span><span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//思路</span><span class="token comment" spellcheck="true">//1.先得到 n1 和 n2 中最大数,保存到 max1</span><span class="token comment" spellcheck="true">//2.然后再 求出 max1 和 n3中的最大数,保存到 max2</span><span class="token keyword">int</span> max1 <span class="token operator">=</span> n1 <span class="token operator">></span> n2<span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">;</span><span class="token keyword">int</span> max2 <span class="token operator">=</span> max1 <span class="token operator">></span> n3<span class="token operator">?</span> max1 <span class="token operator">:</span> n3<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大数="</span> <span class="token operator">+</span> max2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h5 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h5><p>Input.java///需要一个 扫描器(对象), 就是 Scanner</p><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收String类型的输入</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收Int类型的输入</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>等    <span class="token comment" spellcheck="true">//具体看java.util.Scanner</span></code></pre><h3 id="四种进制"><a href="#四种进制" class="headerlink" title="四种进制"></a>四种进制</h3><p>二进制, 满2进1. 以0b或0B开头.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二进制转换成八进制</span><span class="token comment" spellcheck="true">//从低位开始,将二进制数每三位一组,转成对应的八进制数即可</span><span class="token comment" spellcheck="true">//二进制转换成十六进制</span><span class="token comment" spellcheck="true">//从低位开始,将二进制数每四位一组,转成对应的十六进制数即可</span></code></pre><p>十进制, 满10进1.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//十进制转换成二进制</span><span class="token comment" spellcheck="true">//将该数不断除以2,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</span><span class="token comment" spellcheck="true">//十进制转换成八进制</span><span class="token comment" spellcheck="true">//将该数不断除以8,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</span><span class="token comment" spellcheck="true">//十进制转换成十六进制</span><span class="token comment" spellcheck="true">//将该数不断除以16,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</span></code></pre><p>八进制, 0-7, 满8进1. 以数字0开头表示.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//八进制转换成十进制</span><span class="token comment" spellcheck="true">//从最低位(右边)开始,将每个位上的数提取出来,乘以8的(位数-1)次方,求和</span>eg<span class="token operator">:</span><span class="token number">0234</span>转成十进制的数    <span class="token number">0234</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span>    <span class="token number">4</span> <span class="token operator">+</span><span class="token number">24</span> <span class="token operator">+</span><span class="token number">128</span> <span class="token operator">=</span><span class="token number">156</span><span class="token comment" spellcheck="true">//八进制转换成二进制</span><span class="token comment" spellcheck="true">//将八进制数每1位,转成对应的一个3位的二进制数</span></code></pre><p>十六进制, 0-9及A-F, 满16进1. 以0x或0X开头表示</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//十六进制转换成十进制</span><span class="token comment" spellcheck="true">//从最低位(右边)开始,将每个位上的数提取出来,乘以16的(位数-1)次方,求和</span>eg<span class="token operator">:</span><span class="token number">0x23A</span>转成十进制的数    <span class="token number">0x23A</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">570</span>     <span class="token comment" spellcheck="true">//十六进制转换成二进制</span><span class="token comment" spellcheck="true">//将十六进制数每1位,转成对应的一个4位的二进制数</span></code></pre><h3 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码\反码\补码"></a>原码\反码\补码</h3><ol><li>二进制的最高位(最左边)是符号位: 0表示正数, 1表示负数(老韩口诀:旋转90°   0 -&gt; 0   1 -&gt;  -)</li><li>正数的原码, 反码, 补码都一样(三码合一)</li><li>负数的反码 = 它的原码符号位不变, 其他位取反(0 -&gt; 1, 1 -&gt; 0)</li><li>负数的补码 = 负数的反码 + 1, 负数的反码 = 负数的补码 - 1</li><li>0的反码,补码都是0</li><li>java没有无符号数,换言之, Java中的数都是有符号的</li><li>在计算机运算的时候, 都是以<u><strong>补码的方式来运算</strong></u>的</li><li>当我们看运算结果的时候, 要看他的原码(!!!)</li></ol><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>7个位运算符(&amp; , | , ^ , ~ , &gt;&gt; , &lt;&lt; , &gt;&gt;&gt;)</p><p>按位与&amp;</p><p><img src="https://img-blog.csdnimg.cn/798c1e3d7bf947fb892f2cf854d2edce.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>按位或 | : 两位中有一个为1,结果为1</p><p>按位异或^ : 两位不同时为1, 相同为0</p><p>按位取反~</p><p><img src="https://img-blog.csdnimg.cn/79e789e308524249b2cf674974e2dc97.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/f8da8185083140019181160525db885d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>算术右移 &gt;&gt;  :低位溢出, 符号位不变, 并用符号位补溢出的高位 (如果是正数的话 本质是右移几位就除几次2)</p><p>算术左移 &lt;&lt; :符号位不变, 低位补0 (如果是正数的话 本质是左移几位就乘几次2)</p><p><img src="https://img-blog.csdnimg.cn/746bf9fef49e45a1aeeb333427ae33fb.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/089e1478260941f9839eaecdd11a55de.png" alt="img"></p><p>逻辑右移也叫无符号右移 &gt;&gt;&gt; : 低位溢出, 高位补0</p><h2 id="第三章习题"><a href="#第三章习题" class="headerlink" title="第三章习题"></a>第三章习题</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.计算 -10.5%3 = ?</span><span class="token comment" spellcheck="true">//a % b 当a是小数时,公式 = a - (int)a/b*b</span><span class="token comment" spellcheck="true">//-10.5%3 = -10.5 - (-10)/3*3 = -10.5 + 9 = -1.5</span><span class="token comment" spellcheck="true">//注意: 有小数运算,得到结果是近似值</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10.5</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.试写出将String转换成double类型的语句,以及将char类型转换成String的语句,举例说明.</span>见chapter03<span class="token operator">/</span>Test</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门语法</title>
      <link href="/2019/11/26/java-firstedition/"/>
      <url>/2019/11/26/java-firstedition/</url>
      
        <content type="html"><![CDATA[<h1 id="Java入门语法"><a href="#Java入门语法" class="headerlink" title="Java入门语法"></a>Java入门语法</h1><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ol><li><p>String(字符串)</p><p>类型   变量名 = 变量的值</p></li><li><p>int(整数)</p><p><code>int    a    =    10</code></p></li><li><p>double(小数)</p><p><code>double   a   =   12.34</code></p></li><li><p>boolean(布尔)</p><p>表示是/否     <code>boolean    a = true</code></p></li></ol><h3 id="表达式与操作符"><a href="#表达式与操作符" class="headerlink" title="表达式与操作符"></a>表达式与操作符</h3><ol><li><p>算术操作符</p><p>+,   -,   *,   /,  %(模运算)</p><p>模运算：两数相除，取余数</p></li><li><p>赋值操作符</p><p>a =  b+c</p><ol><li>计算右侧的表达式</li><li>把值赋给左边的变量</li></ol></li><li><p>关系操作符</p><p>&gt;,  &lt;,  &lt;=,  &gt;=,  ==, !=</p></li><li><p>逻辑操作符</p><p>&amp;&amp;  ，  ||  ，  ！</p><p>与          或       非</p></li><li><p>自增操作符</p><p>a  =  b++                           a  = ++b</p><p>​     👇                                      👇</p><p>a = b;                                   ++b;</p><p>b++;                                     a=b;</p></li></ol><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ol><li><p>break</p><p>中断当前循环，直接跳出循环</p></li><li><p>continue</p><p>跳出本轮循环，直接进入下一轮</p></li></ol><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>int[]                a     =     new    int[5];</p><p>数组类型       名字</p><p>int[]                 a    ={13,8,20,7,21};</p><h3 id="String-API"><a href="#String-API" class="headerlink" title="String API"></a>String API</h3><h5 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a><code>equals()</code>方法</h5><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"ddnihao"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"Ddnihao"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//区分大小写</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//制表位,实现对齐功能\t</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京\t天津\t上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个回车\r</span><span class="token comment" spellcheck="true">//解读</span><span class="token comment" spellcheck="true">//1.输出 韩顺平教育</span><span class="token comment" spellcheck="true">//2.\r表示回车</span><span class="token comment" spellcheck="true">//3.会把光标从最后面顶到前面:北京平教育</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"韩顺平教育\r北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双引号转义\"</span>String str <span class="token operator">=</span><span class="token string">"我的名字是\"哒哒\""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//换行符转义\n</span>String str <span class="token operator">=</span> <span class="token string">"哒哒\n你好\nddnihao.cn"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反斜杠转义\\</span>String str <span class="token operator">=</span> <span class="token string">"C:\\Windows\\notepad.exe"</span><span class="token punctuation">;</span></code></pre><h5 id="子串和查找"><a href="#子串和查找" class="headerlink" title="子串和查找"></a>子串和查找</h5><p>​    <code>substring(begin,end)</code>,用于获取子串</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"ddnihao"</span><span class="token punctuation">;</span>String s1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从[2]到[6],不包括[6]</span>String s2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从[2]到末尾</span></code></pre><p>​    <code>indexOf()</code>,用于查找子串</p><pre class=" language-java"><code class="language-java">String url <span class="token operator">=</span> <span class="token string">"http://dadanihao.cn/java/index.html"</span><span class="token punctuation">;</span><span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"da"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//url.indexOf("da")返回子串出现的位置.若未找到,则返回-1</span><span class="token comment" spellcheck="true">//indexOf()的几种用法,可以指定查找的范围</span><span class="token comment" spellcheck="true">//url.indexOf(a);从头开始找</span><span class="token comment" spellcheck="true">//url.indexOf(a,fromindex);从fromindex处开始查找</span><span class="token comment" spellcheck="true">//url.lastIndexOf(a);从后往前查找</span></code></pre><h5 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h5><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"名称:%s 数量:%d 价格:%f"</span><span class="token punctuation">,</span><span class="token string">"小龙虾"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//%s字符串,%04d整数(04表示补齐4位整数显示,不足则填零),%.2f浮点数(.2表示小数点后面保留两位)</span></code></pre><h5 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h5><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"dadanihao"</span><span class="token punctuation">;</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//转换成大写</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//转换成小写</span></code></pre><h5 id="去除空白字符"><a href="#去除空白字符" class="headerlink" title="去除空白字符"></a>去除空白字符</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//trim()用于去除字符串左右两边的空白字符</span>String s <span class="token operator">=</span> <span class="token string">"  哒哒 你好  "</span><span class="token punctuation">;</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="前缀和后缀的判断"><a href="#前缀和后缀的判断" class="headerlink" title="前缀和后缀的判断"></a>前缀和后缀的判断</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//str.startsWith(a);判断是否以a为前缀</span><span class="token comment" spellcheck="true">//str.endssWith(a);判断是否以a为后缀</span>String fileName <span class="token operator">=</span> <span class="token string">"Java_Primer_23_01 String.mp4"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是视频文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//比如一个字符串中以逗号分开,表示若干姓名.用split()分割得到String[]数组</span>String s <span class="token operator">=</span> <span class="token string">"小猪, 小王, 小李"</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//传入分割符</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>names<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Integer-API"><a href="#Integer-API" class="headerlink" title="Integer  API"></a>Integer  API</h3><pre class=" language-java"><code class="language-java">Integer a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//（对象）是一个类,提供了一些方法</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是一个基本类型</span><span class="token comment" spellcheck="true">//Integer与int的转换</span>Integer a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//int->Integer</span><span class="token keyword">int</span> value <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Integer->int</span><span class="token comment" spellcheck="true">//Integer与String的转换</span><span class="token comment" spellcheck="true">//String->Integer</span>Integer a <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//静态方法</span><span class="token comment" spellcheck="true">//Integer->String</span>String str1 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String str2 <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符串拼接时,自动toString()</span></code></pre><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><pre class=" language-java"><code class="language-java">Student<span class="token punctuation">[</span><span class="token punctuation">]</span> sss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//需要创建对象</span><span class="token comment" spellcheck="true">//错误写法</span>sss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确写法</span><span class="token comment" spellcheck="true">//Student s0 = new Student();</span><span class="token comment" spellcheck="true">//s0.id = 1000;</span><span class="token comment" spellcheck="true">//sss[0] = s0;</span><span class="token comment" spellcheck="true">//或者</span>sss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></code></pre><h3 id="Date-API"><a href="#Date-API" class="headerlink" title="Date API"></a>Date API</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查看当天的日期,使用Data.toString()</span>Data today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日期格式化,使用年月时分秒形式</span>SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String str = today.toString();</span>String str <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用一个整数表示时间</span><span class="token keyword">long</span> time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示自1970-1-1 00:00:00开始到现在</span><span class="token comment" spellcheck="true">//时间值可以和Date类型直接转换</span>Date now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">long</span> t <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Calendar日历"><a href="#Calendar日历" class="headerlink" title="Calendar日历"></a>Calendar日历</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个Calendar的对象</span>Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//必须通过其静态方法创建,默认的,cal为当前时间</span><span class="token comment" spellcheck="true">//获取年月日时分秒的值</span><span class="token comment" spellcheck="true">//年</span><span class="token keyword">int</span> year <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//月:从0开始计算,范围0,1,2,...,11</span><span class="token keyword">int</span> month <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//天:本月第几天,范围1,2,3,...,31</span><span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小时:24小时制,范围0,1,2,...,23</span><span class="token keyword">int</span> hour <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分钟:范围0,1,2,...,59</span><span class="token keyword">int</span> minute <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//秒:范围0,1,2,...,59</span><span class="token keyword">int</span> second <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//星期几:本周第几天,范围1,2,...,7,星期日为1</span><span class="token keyword">int</span> dayOfWeek <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//DAY_OF_YEAR:当年第几天,范围1,2,...,366</span><span class="token keyword">int</span> dayOfYear <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置年月日时分秒</span><span class="token comment" spellcheck="true">//设置年月日"2020-6-7",注意月份从0开始计数</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置年月日时分秒"2020-6-7 20:15:48"</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置年</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置月,注意月份从0计算</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置日</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置时</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置分</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置秒</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//往前或往后推算,也可以按小时,月等推算</span><span class="token comment" spellcheck="true">//前天</span>cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//30天后</span>cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//具体看JAVA的Calendar的文档</span></code></pre><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//字段（属性）Fields</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><pre class=" language-java"><code class="language-java">Student gao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用</span>Student lovely <span class="token operator">=</span> gao<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例ID(instance ID)： 指的是同一个对象。</span></code></pre><h3 id="对象的比较"><a href="#对象的比较" class="headerlink" title="对象的比较"></a>对象的比较</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对象的比较,有两种情况,须仔细分辨</span><span class="token comment" spellcheck="true">//equals()方法只能用在String类型</span><span class="token comment" spellcheck="true">//假设a,b为两个对象</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断a,b是否为同一对象(instance ID是否相同)</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断a,b内容是否相同,用于对象内容的比较</span></code></pre><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Fields</span>    <span class="token comment" spellcheck="true">//Methods:</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playmusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>创建对象</li><li>调用</li></ol><h5 id="方法的参数："><a href="#方法的参数：" class="headerlink" title="方法的参数："></a>方法的参数：</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playmusic</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        参数的类型和个数需要匹配。</p><h5 id="方法的返回值："><a href="#方法的返回值：" class="headerlink" title="方法的返回值："></a>方法的返回值：</h5><p>​    返回给调用他的方法</p><p>​    return</p><h5 id="方法的重载："><a href="#方法的重载：" class="headerlink" title="方法的重载："></a>方法的重载：</h5><p>​    可以重名，但参数需要不同</p><h3 id="权限修饰符："><a href="#权限修饰符：" class="headerlink" title="权限修饰符："></a>权限修饰符：</h3><p>​    public：公共的</p><p>​    protected：受保护的</p><p>​    default（friendly）：默认的就是友好的</p><p>​    private：私有的</p><table><thead><tr><th align="center">作用域</th><th align="center">当前类</th><th align="center">同一包</th><th align="center">其他包的子孙类</th><th align="center">其他包的类</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">friendly</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h3 id="使用JAR文件"><a href="#使用JAR文件" class="headerlink" title="使用JAR文件"></a>使用JAR文件</h3><ol><li>新建一个lib目录</li><li>拷贝*.jar文件到lib\下</li><li>右键Build Path | Add to Build Path…</li></ol><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>​    abstract</p><p>​    不能实例化：<code>PlanetKiller pk = new PlanetKiller();</code></p><h5 id="抽象类的实现"><a href="#抽象类的实现" class="headerlink" title="抽象类的实现"></a>抽象类的实现</h5><p>​    子类继承，填写父类遗留下来的方法</p><h3 id="接口类：表示一组要实现的功能，即技术规范"><a href="#接口类：表示一组要实现的功能，即技术规范" class="headerlink" title="接口类：表示一组要实现的功能，即技术规范"></a>接口类：表示一组要实现的功能，即技术规范</h3><p>​    接口的实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shoe</span> <span class="token keyword">implements</span> <span class="token class-name">HairDryer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    即只要实现了dry（）功能的设备，均可认为是一台吹风机。</p><h5 id="多接口继承"><a href="#多接口继承" class="headerlink" title="多接口继承"></a>多接口继承</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shoe</span> <span class="token keyword">implements</span> <span class="token class-name">HairDryer</span><span class="token punctuation">,</span>MusicPlayer<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用逗号分隔就可以了</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//完全形态：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">C</span><span class="token punctuation">,</span>D<span class="token punctuation">,</span>E<span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>​    是在内部中使用的</p><ol><li>关联了一个外部对象</li><li>可以自由访问，无视private限制</li></ol><h5 id="静态内部类（白眼狼）"><a href="#静态内部类（白眼狼）" class="headerlink" title="静态内部类（白眼狼）"></a>静态内部类（白眼狼）</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span></code></pre><ol><li><p>独立性，可以在外面使用</p><pre class=" language-java"><code class="language-java">Example<span class="token punctuation">.</span>XYZ x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example<span class="token punctuation">.</span>XYZ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>没有所谓的“当前外部对象”可用</p></li><li><p>体积较小</p></li></ol><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><pre class=" language-java"><code class="language-java">Arraylist<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li><p>添加一个元素</p><p><code>list.add(new Student(...));</code></p></li><li><p>删除一个元素</p><p><code>list.remove();</code></p></li><li><p>获取一个元素</p><p><code>Student  value = list.get();</code></p></li><li><p>列表长度</p><p><code>int   size   =  list.size();</code></p><p>​    多项删除时，从后往前，倒序遍历</p><p><e>应为引用类型，不能是值类型</e></p><p>//包装类</p><p>int→Integer</p><p>long→Long</p><p>shot→Shot</p><p>boolean→Boolean</p><p>….</p></li><li><p>排序</p><p><code>list.sort();</code></p></li></ol><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>​    key         →         value</p><p>数据项编号          数据项的类型</p><ol><li><p>创建一个哈希映射</p><pre class=" language-java"><code class="language-java">HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Student<span class="token operator">></span>  map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//其中Integer为编号类型，Student为值类型</span></code></pre></li><li><p>添加数据</p><p><code>map.put(key,value);</code></p></li><li><p>查找数据</p><p><code>value = map.get(key);</code></p></li><li><p>删除一次</p><p><code>map.remove(key);</code></p></li><li><p>清空所有项</p><p><code>map.clean();</code></p></li><li><p>检查是否存在</p><p><code>exsit  = map.containsKey(key);</code></p></li></ol><h3 id="静态对象"><a href="#静态对象" class="headerlink" title="静态对象"></a>静态对象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Config cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示全局对象</span></code></pre><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//静态方法是工具方法，可以直接调用</span><span class="token comment" spellcheck="true">//在静态方法中,不能访问this</span></code></pre><h3 id="重名"><a href="#重名" class="headerlink" title="重名"></a>重名</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学号</span>    <span class="token comment" spellcheck="true">//构造方法</span>    <span class="token keyword">public</span> <span class="token function">Studnet</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有this.*的代表当前属性</span>    <span class="token comment" spellcheck="true">//直接*的表示局部变量</span></code></pre><h3 id="Getter和Setter"><a href="#Getter和Setter" class="headerlink" title="Getter和Setter"></a>Getter和Setter</h3><p>​    当一个属性设为private的时候,外部如何访问它?</p><ol><li><p>Getter方法</p><p>例如,添加<code>public int getRadius()</code>来获取radius的值</p></li><li><p>Setter方法</p><p>例如,添加<code>public void setRadius(int radius)</code>设置radius的值</p></li><li><p>可以自动生成：右键/Source/  Generate Getters and Setters…</p></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Override重写</span>    <span class="token comment" spellcheck="true">//在子类里面,右键Source|Override Methods...</span>    <span class="token comment" spellcheck="true">//有两种选择:1.完全重写  2.部分重写:先调用父类super.*(),在此基础上再添加几句实现</span><span class="token comment" spellcheck="true">//构造方法的继承</span><span class="token keyword">public</span> <span class="token function">MyMp3File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//super()必须放在构造方法的第一行,super()可以省略不写,但是当父类的构造方法需要参数时</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在进行自己属性的初始化</span><span class="token punctuation">}</span></code></pre><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString() 方法"></a>toString() 方法</h3><p>Object.toString()，将一个对象以字符串表示，<u>一般用于辅助打印或者调试</u></p><p>每一个类都有toString()方法,继承自Object类</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li>重载：Overload</li><li>重写：Override</li><li>泛型：ArrayList/HashMap</li></ol><pre class=" language-java"><code class="language-java">Tree t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppleTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//前面是名义上的类型，后面是实际的类型</span><span class="token comment" spellcheck="true">//其中，AppleTree是Tree的子类：AppleTree也是一种Tree，具有Tree全部特征</span></code></pre><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ol><li><p>算术异常:ArithmeticException</p></li><li><p>越界异常:ArravIndexOutOfBoundsException</p></li><li><p>空指针异常:NullPointerException</p></li><li><p>非检查异常:Unchecked Exception</p><p>默认地,编译器会对异常做检查</p><p>-检查throws声明</p><p>-检查try{}catch{}匹配</p><p>​    但是RuntimeException类及其子类,编译器忽略对其检查</p></li><li></li></ol><h5 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//要监视的代码块</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这个参数表示可能出错的异常</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//若捕获到了异常,在此处理</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//异常机制</span><span class="token number">1</span><span class="token punctuation">.</span>立即从<span class="token keyword">try</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>退出<span class="token punctuation">,</span>类似<span class="token keyword">break</span>效果<span class="token number">2</span><span class="token punctuation">.</span>进入<span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token operator">-</span>Exception e<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//表示捕获到的异常对象</span><span class="token operator">-</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//异常类名</span><span class="token operator">-</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//异常描述</span><span class="token operator">-</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//打印函数栈找异常溯源</span><span class="token number">3</span><span class="token punctuation">.</span>在<span class="token keyword">try</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>捕获处理之后<span class="token punctuation">,</span>程序继续运行</code></pre><p>按类型捕获</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//监控代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//算术异常</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArravIndexOutOfBoundsException e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//越界异常</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>NullPointerException e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//空指针异常</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//最好可以添加一个默认Exception来防止漏捕</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认匹配,防止逃逸</span><span class="token punctuation">}</span></code></pre><h5 id="异常的抛出"><a href="#异常的抛出" class="headerlink" title="异常的抛出"></a>异常的抛出</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//一般形式为:</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Exception ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        thow ex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抛出异常,即向上报告一个异常</span>        <span class="token comment" spellcheck="true">//或者throw new Exception(...)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h5><p>finally,与try{…}联用,执行一些异常清理工作</p><p>一般形式为:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//要监视的代码块</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//若捕获到了异常,在此处理</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一些清理工作</span><span class="token punctuation">}</span>其中<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//1.若try{...}中有异常发生</span><span class="token comment" spellcheck="true">//则跳出try{}→执行catch{}→执行finally{}</span><span class="token comment" spellcheck="true">//2.若try{...}中没有异常发生</span><span class="token comment" spellcheck="true">//由执行try{}→执行finally{}</span>显然<span class="token punctuation">,</span><span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>总是会执行<span class="token punctuation">,</span>通常用于执行<span class="token operator">-</span>清理善后<span class="token operator">-</span>工作</code></pre><h3 id="文件与目录"><a href="#文件与目录" class="headerlink" title="文件与目录"></a>文件与目录</h3><p>File类是一个轻量级的类,不占资源.</p><p>file仅表示一个路径，并不会真的创建一个文件</p><p>显然,创建一个File对象不会包含文件中的数据,<u>和文件没啥关系</u></p><p>​    <code>java.io.File</code>,用于描述一个文件、目录的路径</p><p>​    eg：</p><pre class=" language-java"><code class="language-java">File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/example/123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/picture/"</span><span class="token punctuation">)</span></code></pre><h5 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h5><p>-<code>file.exists()</code>，判断它是否存在</p><p>-<code>file.isFile()/isDirectory()</code>，判断它是文件、还是目录</p><p>-<code>file.getName()</code>，返回文件名，含后缀</p><p>-<code>file.length()</code>，返回文件的长度，单位是字节</p><p>-<code>file.lastModified()</code>，返回文件的修改时间，时间值（ms）</p><p>-<code>file.getParentFile()</code>，返回上级目录</p><h5 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h5><p>-<code>dir.exists()</code>，判断它是否存在</p><p>-<code>dir.getName()</code>，返回目录名</p><p>-<code>dir.getParentFile()</code>，获取上级目录</p><p>-<code>dir.mkdir()</code>，创建单个目录</p><p>-<code>dir.mkdirs()</code>，创建多层目录</p><p>​    常使用这个</p><p>-<code>dir.listFiles()</code>，列出子文件/子目录</p><p>​    File[] files = dir.listFiles();</p><p>​    有可能返回为null，最好要判断一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span> files <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>File f <span class="token operator">:</span> files<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  "</span> <span class="token operator">+</span> f<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>File cd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cd<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//*.getAbsolutePath();获取完整路径</span><span class="token comment" spellcheck="true">//*.getCanonicalPath();获取简洁路径</span></code></pre><h5 id="文件读写，即IO"><a href="#文件读写，即IO" class="headerlink" title="文件读写，即IO"></a>文件读写，即IO</h5><p>在Java中，用byte[ ]表示数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写入数据</span><span class="token comment" spellcheck="true">//java.io.FileOutputStream，创建文件并写入数据</span><span class="token comment" spellcheck="true">//一个数组数据</span><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定文件路径，创建一个sample的文件</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.打开文件，准备写入</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.写入数据</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.关闭文件</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//读取数据</span><span class="token comment" spellcheck="true">//java.io.FileInputStream，用于读取数据</span><span class="token comment" spellcheck="true">//缓冲区，一次性读取1200个字节</span><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//1.打开文件、准许读取</span>    FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.读取文件</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回值表示实际读到的字节数</span>    <span class="token comment" spellcheck="true">//3.关闭文件 </span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果文件不存在的话，抛出异常FileNotFoundExeption</span></code></pre><h5 id="文本的写入和读取"><a href="#文本的写入和读取" class="headerlink" title="文本的写入和读取"></a>文本的写入和读取</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写入文本</span><span class="token comment" spellcheck="true">//当一个文件里存储文本数据时，称为文本文件</span><span class="token comment" spellcheck="true">//文件只能写入数据，只能存储字节数据，不能写入文本</span><span class="token comment" spellcheck="true">//首先要转换成字节数据</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先定义一个文本</span>    String text <span class="token operator">=</span> <span class="token string">"哒哒nihao"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//需要先转换成字节数据</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token operator">=</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sample.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//读取文本</span><span class="token comment" spellcheck="true">//读取文件sample.txt中的数据,转换成文本内容</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.读取字节数据</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sample.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.解码成文本</span>    String text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//指示起始位置0,和长度n(n个字节),字符编码"UTF-8"</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"GOT:"</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">catc</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
