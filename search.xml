<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>简单的注册界面</title>
      <link href="/2021/10/19/two/"/>
      <url>/2021/10/19/two/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安卓开发"><a href="#安卓开发" class="headerlink" title="安卓开发"></a>安卓开发</h1><h4 id="实现一个仿QQ的注册界面"><a href="#实现一个仿QQ的注册界面" class="headerlink" title="实现一个仿QQ的注册界面"></a>实现一个仿QQ的注册界面</h4><ol><li>相对布局RelativeLayout</li><li>线性布局LinearLayout</li><li>drawable中selector标签的使用(用来实现Button的点击效果)</li><li>EditText的属性标签使用</li><li>TextView的属性标签使用</li><li>ImageView的属性标签的使用</li></ol><h3 id="1-设计分析"><a href="#1-设计分析" class="headerlink" title="1.设计分析"></a>1.设计分析</h3><ul><li><p>控件分析</p><table><thead><tr><th align="center">看到的控件</th><th align="center">业务功能</th><th align="center">实际控件</th></tr></thead><tbody><tr><td align="center">企鹅图标</td><td align="center">无</td><td align="center">ImageView</td></tr><tr><td align="center">“QQ”文本</td><td align="center">无</td><td align="center">TextView</td></tr><tr><td align="center">账号输入框</td><td align="center">编辑输入账号(只能输入数字)</td><td align="center">EditText</td></tr><tr><td align="center">密码输入框</td><td align="center">编辑输入密码(只能输入数字)</td><td align="center">EditText</td></tr><tr><td align="center">注册按钮</td><td align="center">执行注册</td><td align="center">Button</td></tr><tr><td align="center">“阅读并同意”文本</td><td align="center">无(颜色为白色)</td><td align="center">TextView</td></tr><tr><td align="center">“服务条款”</td><td align="center">无(颜色为黑色)</td><td align="center">TextView</td></tr></tbody></table></li><li><p>布局分析</p><p>使用相对布局大框架中嵌入线性布局</p><p>示意图如下:相对布局为红色,线性布局为黑色</p><p><img src="https://img-blog.csdnimg.cn/3f2456d0f14c418ba0e8684fbd662861.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="images"></p></li></ul><h3 id="2-编程中出现的问题"><a href="#2-编程中出现的问题" class="headerlink" title="2.编程中出现的问题"></a>2.编程中出现的问题</h3><ul><li>Button的点击效果颜色没有反应</li></ul><p>提示不兼容.(应该是版本问题)</p><p>解决办法如下:改为红色圈圈中的Bridge即可</p><p><img src="https://img-blog.csdnimg.cn/376d474cdff0460ba85526db74597c39.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="3-Button的点击效果实现"><a href="#3-Button的点击效果实现" class="headerlink" title="3.Button的点击效果实现"></a>3.Button的点击效果实现</h3><ol><li><p>在drawable下面创建一个xml文件:bt_bg.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>selector xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>按下时的图形 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"true"</span>   android<span class="token operator">:</span>drawable<span class="token operator">=</span><span class="token string">"@drawable/bg2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 松开时的图形 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"false"</span>   android<span class="token operator">:</span>drawable<span class="token operator">=</span><span class="token string">"@drawable/bg1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>selector<span class="token operator">></span></code></pre></li><li><p>在activity_main.xml文件中去实现</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>Button        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bt_bg"</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li><li><p>在颜色点击效果的基础上实现Button的圆角效果</p><pre class=" language-java"><code class="language-java">#在drawable下面创建一个xml文件<span class="token operator">:</span>bt_bg3<span class="token punctuation">.</span>xml    <span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>selector xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义当button 处于pressed 状态时的形态。<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>shape<span class="token operator">></span>            <span class="token operator">&lt;</span>solid android<span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"#FF00FF"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置按钮的四个角为弧形 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> android<span class="token operator">:</span>radius 弧形的半径 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>corners android<span class="token operator">:</span>radius<span class="token operator">=</span><span class="token string">"20dip"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> padding：Button里面的文字与Button边界的间隔 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>padding android<span class="token operator">:</span>bottom<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>left<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>right<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>top<span class="token operator">=</span><span class="token string">"10dp"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>shape<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义button默认时的形态<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>shape<span class="token operator">></span>            <span class="token operator">&lt;</span>solid android<span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"#000000"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置按钮的四个角为弧形 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> android<span class="token operator">:</span>radius 弧形的半径 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>corners android<span class="token operator">:</span>radius<span class="token operator">=</span><span class="token string">"20dip"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> padding：Button里面的文字与Button边界的间隔 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>padding android<span class="token operator">:</span>bottom<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>left<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>right<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>top<span class="token operator">=</span><span class="token string">"10dp"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>shape<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>selector<span class="token operator">></span>#xml文件中应用                    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bt_bg3"</span></code></pre></li></ol><h3 id="activity-main-xml源码如下"><a href="#activity-main-xml源码如下" class="headerlink" title="activity_main.xml源码如下"></a>activity_main.xml源码如下</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>RelativeLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span>    xmlns<span class="token operator">:</span>tools<span class="token operator">=</span><span class="token string">"http://schemas.android.com/tools"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    tools<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">".MainActivity"</span>    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/fengmian"</span><span class="token operator">></span>   #APP界面的背景图    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tubiao"</span>         android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span>        android<span class="token operator">:</span>layout_marginStart<span class="token operator">=</span><span class="token string">"25dp"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"80dp"</span>        android<span class="token operator">:</span>layout_marginLeft<span class="token operator">=</span><span class="token string">"25dp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ImageView  #左上角QQ图标            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/tubiao"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"QQ"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"36sp"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"43dp"</span>        android<span class="token operator">:</span>layout_below<span class="token operator">=</span><span class="token string">"@+id/tubiao"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>RelativeLayout            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ImageView                android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/mobile"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"20dp"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/ipone"</span><span class="token operator">></span>    #输入账号的手机图标            <span class="token operator">&lt;</span><span class="token operator">/</span>ImageView<span class="token operator">></span>            <span class="token operator">&lt;</span>EditText                android<span class="token operator">:</span>layout_toRightOf<span class="token operator">=</span><span class="token string">"@+id/mobile"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"@string/input_mobile"</span>                android<span class="token operator">:</span>inputType<span class="token operator">=</span><span class="token string">"number"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>EditText<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span>        <span class="token operator">&lt;</span>RelativeLayout            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ImageView                android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/mima"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"20dp"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/mima"</span><span class="token operator">></span>    #输入密码的密码矢量图            <span class="token operator">&lt;</span><span class="token operator">/</span>ImageView<span class="token operator">></span>            <span class="token operator">&lt;</span>EditText                android<span class="token operator">:</span>layout_toRightOf<span class="token operator">=</span><span class="token string">"@+id/mima"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"@string/input_password"</span>                android<span class="token operator">:</span>inputType<span class="token operator">=</span><span class="token string">"number"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>EditText<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span>        <span class="token operator">&lt;</span>Button            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"38dp"</span>            android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"22dp"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/login"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"20sp"</span>            android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bty_ys"</span><span class="token operator">></span>   实现Button的点击效果        <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span>        android<span class="token operator">:</span>layout_centerHorizontal<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>layout_alignParentBottom<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>layout_marginBottom<span class="token operator">=</span><span class="token string">"42dp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/login_message"</span>            android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@android:color/white"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/service"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span></code></pre><h3 id="strings-xml源码"><a href="#strings-xml源码" class="headerlink" title="strings.xml源码"></a>strings.xml源码</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>resources<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"app_name"</span><span class="token operator">></span>qq<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"input_mobile"</span><span class="token operator">></span>输入手机号<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"input_password"</span><span class="token operator">></span>输入密码<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"login"</span><span class="token operator">></span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"login_message"</span><span class="token operator">></span>阅读并同意<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"service"</span><span class="token operator">></span>服务条款<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>resources<span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五子棋项目</title>
      <link href="/2021/10/18/first/"/>
      <url>/2021/10/18/first/</url>
      
        <content type="html"><![CDATA[<h1 id="五子棋单机版"><a href="#五子棋单机版" class="headerlink" title="五子棋单机版"></a>五子棋单机版</h1><ol><li><h3 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h3><p>棋盘大小:15*15</p><p>空棋盘开局,黑棋先下,白棋后下,一次只能下一子.棋子下在交叉点上,棋子下在棋盘上之后,不能移动.</p><p>当相同颜色的五颗棋子连在一起的时候,就认为胜负已分.连在一起的方法有4个:水平,垂直,左上右下,左下右上;如果整个棋盘都摆满棋子之后,仍旧不分胜负,则认为和局.</p></li><li><h3 id="编程遇到的问题"><a href="#编程遇到的问题" class="headerlink" title="编程遇到的问题"></a>编程遇到的问题</h3><ol><li><h4 id="怎么样定义棋盘的坐标"><a href="#怎么样定义棋盘的坐标" class="headerlink" title="怎么样定义棋盘的坐标"></a>怎么样定义棋盘的坐标</h4><p>编程的时候数组或者列表的下标都是从0开始的,但是五子棋棋盘的坐标是从1开始的,如何解决两者之间的不协调?</p><p>第一种方法:把每个二维数组或列表的索引值全部加1,比如说五子棋棋盘第4行第6列,则对应的坐标是arr[3] [5].</p><p>第二种方法:直接忽略x=0和y=0这一行一列.分配内存时,直接分配16*16的内存空间做为棋盘即可.</p><ul><li>经过敲代码后发现,第一种方法需要来回切换,比较繁琐,代码量增加.因此采用第二种方法</li></ul></li><li><h4 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h4><p>对于计算机来说,一般会把左上角作为坐标系原点.从左往右是水平方向y,从上往下是垂直方向x</p><p>比如(4,6)表示第4行第6列,如下图:</p><p><img src="https://img-blog.csdnimg.cn/e1142dabff20449ba48dc5248ecde8f6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="images"></p><p>对于五子棋棋盘来说,4个角落的坐标点分别为:</p><ul><li>左上角:(1,1)</li><li>左下角:(15,1)</li><li>右上角:(1,15)</li><li>右下角:(15,15)</li></ul></li><li><h4 id="胜负判断"><a href="#胜负判断" class="headerlink" title="胜负判断"></a>胜负判断</h4><p>相同颜色的五颗棋子连在一起,则胜负已分.有以下几种极端情况:</p><ul><li>从左到右:判断(x,y-4)~(x,y+4)这9个坐标中是否有连续5颗棋子连在一起</li><li>从上到下:判断(x-4,y)~(x+4,y)这9个坐标中是否有连续5颗棋子连在一起</li><li>左上右下:判断(x-4,y-4)~(x+4,y+4)这9个坐标中是否有连续5颗棋子连在一起</li><li>左下右上:判断(x+4,y-4)~(x-4,y+4)这9个坐标中是否有连续5颗棋子连在一起</li></ul></li></ol></li><li><h3 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h3><p>使用面向对象的思维来建立模型</p><p>棋子类</p><ul><li> 属性:颜色color,坐标pos   </li><li>方法:setColor(),getColor(),setPos(),getPos()</li></ul><p>棋盘类</p><ul><li>属性:棋盘大小BOARD_SIZE,棋盘上的棋子board[] []</li><li>方法:setChess(),getChess(),initBoard(),printBoard()</li></ul><p>规则类(引擎类)</p><ul><li>属性:棋盘对象 board</li><li>方法:判断胜负isWon(),计算机下棋方法computerGo(),人工下棋userGo()</li></ul></li><li><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><p>创建一个棋盘类</p><p>chessboard.py</p><pre class=" language-py"><code class="language-py">#棋盘类class ChessBoard:    # 棋盘大小    BOARD_SIZE = 15    # 初始化    def __init__(self):        self.board = []        for i in range(ChessBoard.BOARD_SIZE+1):            tmp = []            for j in range(ChessBoard.BOARD_SIZE+1):                tmp.append(0)            self.board.append(tmp)    #清空棋盘    def initBoard(self):        for i in range(1,ChessBoard.BOARD_SIZE+1):            for j in range(1,ChessBoard.BOARD_SIZE+1):                self.board[i][j] = '+'  # 实现方法initBoard(),对棋盘进行初始化,把所有的空格都设置成'+'符号    # 打印棋盘    def printBoard(self):        # 打印列号        print('  ',end=' ')        for i in range(1,ChessBoard.BOARD_SIZE+1):            ch = chr(96+i)            print(ch,end=' ')        print()        # 打印行号和棋盘        for i in range(1,ChessBoard.BOARD_SIZE+1):            # 打印行号            print('%2d' % i,end=' ')            # 打印棋盘            for j in range(1,ChessBoard.BOARD_SIZE+1):                print(self.board[i][j],end=' ')            print()    # 放置棋子    # 参数1 pos位置坐标 类型是长度为2的列表或元组    # 参数2 color棋子颜色    def setChess(self,pos,color):        x = pos[0]        y = pos[1]        self.board[x][y] = color    # 放置棋子    def setChessMan(self,chessMan):            pos = chessMan.getPos()            color = chessMan.getColor()            self.setChess(pos,color)    # 根据位置读取棋子的颜色    def getChess(self,pos):        x,y = pos        return self.board[x][y]    # 判断某个坐标点是否为空    def isEmpty(self,pos):        chess = self.getChess(pos)        if chess == '+':            return True        #非空即黑或白        return False</code></pre><p>创建一个棋子类</p><p>chessman.py</p><pre class=" language-py"><code class="language-py">#棋子类class ChessMan:    # 初始化    def __init__(self):        self.color = 'x'        self.pos = (0,0)    # 设置颜色    def setColor(self,color):        self.color = color    # 获取颜色    def getColor(self):        return self.color    # 设置位置    def setPos(self,pos):        self.pos = pos    # 获取位置    def getPos(self):        return self.pos</code></pre><p>测试代码</p><p>main.py</p><pre class=" language-py"><code class="language-py"># from 文件名 import 类名from chessboard import *from chessman import *# 测试打印棋盘def test1():    board = ChessBoard()    board.initBoard()    board.printBoard()#测试摆放棋子def test2():    board = ChessBoard()    board.initBoard()    #测试setChess()摆放棋子    board.setChess((3,5),'x')    #测试setChessMan()摆放棋子    chessMan = ChessMan()    chessMan.setColor('o')    chessMan.setPos((4,6))    board.setChessMan(chessMan)    board.printBoard()    ret = board.isEmpty((3,6))    print(ret)if __name__ == '__main__':  # 相当于一个入口,当其他模块被调用的时候,先运行此模块    test2()</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记一</title>
      <link href="/2019/12/22/java-note01/"/>
      <url>/2019/12/22/java-note01/</url>
      
        <content type="html"><![CDATA[<h1 id="Java笔记一"><a href="#Java笔记一" class="headerlink" title="Java笔记一"></a>Java笔记一</h1><h4 id="因为前面记的笔记过于杂乱，现在整理一份以便复习查阅。本笔记是跟着B站老韩的视频学习记录。"><a href="#因为前面记的笔记过于杂乱，现在整理一份以便复习查阅。本笔记是跟着B站老韩的视频学习记录。" class="headerlink" title="因为前面记的笔记过于杂乱，现在整理一份以便复习查阅。本笔记是跟着B站老韩的视频学习记录。"></a>因为前面记的笔记过于杂乱，现在整理一份以便复习查阅。本笔记是跟着B站老韩的视频学习记录。</h4><h3 id="开发细节"><a href="#开发细节" class="headerlink" title="开发细节"></a>开发细节</h3><ol><li><p>一个源文件最多只能有一个public类,但其他类不受限制.</p></li><li><p>如果源文件包含一个public类,则文件名必须按该类名命名.</p></li><li><p>一个源文件中最多只能有一个public类.其他类的个数不限,也可以将main方法写在非public类中,然后指定运行非public类,这样入口方法就是非public的main方法.</p></li><li><p>文档注释：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//javadoc标签</span><span class="token comment" spellcheck="true">/**     * @author    * @version*/</span><span class="token comment" spellcheck="true">//命令行        </span><span class="token comment" spellcheck="true">//javadoc -d 文件夹名 -xx -yy Demo.java</span>javadoc <span class="token operator">-</span>d d<span class="token operator">:</span>\\temp <span class="token operator">-</span>author <span class="token operator">-</span>version Demo<span class="token punctuation">.</span>java</code></pre></li><li><p>代码规范：</p><ol><li>类、方法的注释，要以javadoc的方式来写。</li><li>非Java Doc的注释，往往是给代码的维护者看的，着重告诉读者为什么这样写，如何修改，注意什么问题等。</li><li>运用tab操作，实现缩进，默认整体向右边移动，用shift+tab整体向左移</li><li>运算符和 = 两边习惯性各加一个空格。</li><li>源文件使用utf-8编码。</li></ol></li></ol><p><img src="https://img-blog.csdnimg.cn/2086b3b4f96943cfb4f88817f8852d92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="DOS原理"><a href="#DOS原理" class="headerlink" title="DOS原理"></a>DOS原理</h3><p>Dos系统：</p><ol><li>接受指令</li><li>解析指令</li><li>执行指令</li></ol><p>相对路径：从当前目录开始定位，形成的一个路径</p><p>绝对路径：就是完整路径，从顶级目录例如D:\开始定位，形成的路径</p><p>常用dos命令：</p><ol><li><p>查看当前目录是有什么内容：dir</p><p><code>dir </code>       <code> dir d:\abc\test100</code></p></li><li><p>切换到其他盘下：cd</p><p><code>cd /D d:</code>切换到D盘</p></li><li><p>切换到当前盘的其他目录下（使用绝对路径和相对路径演示）</p><p><code>cd d:\abc2\test200</code>   <code>cd ..\..\abc2\test200</code></p></li><li><p>切换到上一级：<code>cd ..</code></p></li><li><p>切换到根目录：<code>cd\</code></p></li><li><p>查看指定的目录下所有的子级目录：<code>tree</code></p></li><li><p>清屏：<code>cls</code></p></li><li><p>退出：<code>exit</code></p></li><li><pre class=" language-java"><code class="language-java">md<span class="token punctuation">[</span>创建目录<span class="token punctuation">]</span>，rd<span class="token punctuation">[</span>删除目录<span class="token punctuation">]</span><span class="token punctuation">,</span>copy<span class="token punctuation">[</span>拷贝文件<span class="token punctuation">]</span><span class="token punctuation">,</span>del<span class="token punctuation">[</span>删除文件<span class="token punctuation">]</span><span class="token punctuation">,</span>echo<span class="token punctuation">[</span>输入内容到文件<span class="token punctuation">]</span><span class="token punctuation">,</span>move<span class="token punctuation">[</span>剪切<span class="token punctuation">]</span></code></pre></li></ol><h3 id="第一章习题"><a href="#第一章习题" class="headerlink" title="第一章习题"></a>第一章习题</h3><ol><li><p>JDK，JRE，JVM的关系</p><p>答：JDK = JRE + java开发工具</p><p>​        JRE = JVM + 核心类库</p></li><li><p>环境变量path配置及其作用</p><p>答：1.环境变量的作用是为了在dos的任意目录，可以去使用java和javac命令。</p><p>2.先配置一个JAVA_HOME = 指向jdk安装的主目录。</p><p>3.编辑path环境变量，增加% JAVA_HOME%\bin</p></li></ol><h3 id="第二章-基本类型"><a href="#第二章-基本类型" class="headerlink" title="第二章  基本类型"></a>第二章  基本类型</h3><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><ol><li>变量必须先声明，后使用，即有顺序。</li><li>该区区域的数据/值可以在同一类型范围内不断变化。</li><li>变量在同一个区域内不能重名。</li><li>变量三要素：变量名，值，数据类型。</li></ol><h5 id="＋号的使用"><a href="#＋号的使用" class="headerlink" title="＋号的使用"></a>＋号的使用</h5><ol><li>当左右两边都是数值型，则做加法运算。</li><li>当左右两边有一方为字符型，则做拼接运算。</li><li>运算顺序是从左到右的。</li></ol><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//198</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token operator">+</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10098</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//103hello</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token operator">+</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hello1003</span></code></pre><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><ol><li><p>基本数据类型：数值型：整数类型：</p><p>byte[1] \ short[2] \ int[4] \ long[8]</p></li><li><p>基本数据类型：数值型：浮点类型：</p><p>float[4] \ double[8]</p></li><li><p>基本数据类型：字符型：</p><p>char[2]，存放单个字符’a’</p></li><li><p>基本数据类型：布尔型：</p><p>boolean[1]</p></li><li><p>引用数据类型：类（class）、接口（interface）、数组（[ ]）</p></li></ol><p>注：【2】表示存放两个字节</p><h5 id="整型细节"><a href="#整型细节" class="headerlink" title="整型细节"></a>整型细节</h5><ol><li><p>Java的整型常量默认为int，声明long型常量须后加”l“或者”L“</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4个字节</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> 1L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不对的</span><span class="token keyword">long</span> n3 <span class="token operator">=</span> 1L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对的</span></code></pre></li><li><p>Java程序中变量常声明为int。</p></li><li><p>计算机中最小存储单位：bit。计算机中基本存储单元：byte。一个byte=8个bit。</p></li></ol><h5 id="浮点数细节"><a href="#浮点数细节" class="headerlink" title="浮点数细节"></a>浮点数细节</h5><ol><li><p>浮点数 = 符号位+指数位+尾数位</p></li><li><p>Java的浮点型常量默认为double，声明float型常量须后加”f”或者“F”</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">float</span> n1 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不对的</span><span class="token keyword">float</span> n2 <span class="token operator">=</span> <span class="token number">1.1f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对的</span></code></pre></li><li><p>通常使用double。</p></li><li><p>浮点型使用陷阱：2.7和8.1 / 3 比较</p><p>​    后者结果是2.6999999997，是以精度显示的。</p><p><strong>所以当我们对运算结果是小数的进行相等判断时，要小心</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> num11 <span class="token operator">=</span> <span class="token number">2.7</span><span class="token punctuation">;</span><span class="token keyword">double</span> num12 <span class="token operator">=</span> <span class="token number">8.1</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2.7</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num11<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.7</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接近2.7的小数，而不是2.7</span><span class="token comment" spellcheck="true">//错误写法</span><span class="token keyword">if</span><span class="token punctuation">(</span> num11 <span class="token operator">==</span> num12<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//正确的写法：</span><span class="token keyword">if</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num11 <span class="token operator">-</span> num12<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.000001</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"差值非常小,到我的规定精度,可以认为相等."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//细节:如果是直接查询得到的小数或者直接赋值,是可以判断相等</span></code></pre></li></ol><h5 id="字符型细节"><a href="#字符型细节" class="headerlink" title="字符型细节"></a>字符型细节</h5><ol><li><p>字符常量是用单引号括起来的单个字符.</p></li><li><p>Java允许使用转义字符’\‘来将其后的字符转变为特殊字符型常量.  例如: char c3 = ‘\n’;   表示换行符</p></li><li><p>在java中,char的本质是一个整数,在默认输出时,是Unicode码对应的字符.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出'a' 对应的 数字</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//107</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token string">'b'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//98+1 == 99</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//99</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//99对应的字符 c</span></code></pre></li><li><p>字符类型本质:</p><p>字符型存储到计算机中,需要将字符型对应的码值(整数)找出来,比如’a’ 存储 ==&gt; 码值97 ==&gt; 0110 0001</p></li><li><p>ASCII编码表是一个字节表示,一个128个字符,实际上一个字节可以表示256个字符,只用128个.</p></li><li><p>Unicode编码表 固定大小的编码 使用两个字节来表示字符,字母和汉字统一都是占用两个字节.</p></li><li><p>utf - 8 编码表.大小可变的编码字母占一个字节,汉字使用3个字节.(表示的汉字更多)</p></li><li><p>gbk编码表,字母占一个字节,汉字占2个字节.</p></li></ol><h5 id="数据类型自动转换"><a href="#数据类型自动转换" class="headerlink" title="数据类型自动转换"></a>数据类型自动转换</h5><p><img src="https://img-blog.csdnimg.cn/eba5d610597941948e4993ceb4375f35.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><ol><li><p>有多种类型的数据混合运算时,系统首先自动将所有数据转换成容量最大的那种数据类型,然后再进行计算.</p></li><li><p>(byte , short)与char 之间不会相互自动转换.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//当把具体数赋给byte时,先判断该数是否在byte范围内,如果是就可以</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对,-128~127</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n2 是int</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> n2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,原因:如果是变量赋值,先判断类型</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> b1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,原因:byte不能自动转成char</span></code></pre></li><li><p>byte, short, char 他们三者可以计算,在计算时首先转换为int类型.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">short</span> s2 <span class="token operator">=</span> b2<span class="token operator">+</span>s1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,b2 + s1 => int</span><span class="token comment" spellcheck="true">//只要出现byte\short\char都会转换成先int再计算</span><span class="token keyword">byte</span> b4 <span class="token operator">=</span> b2 <span class="token operator">+</span> b3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误:b2 + b3 => int</span></code></pre></li><li><p>自动提升原则:表达式结果的类型自动提升为 操作数中最大的类型.</p></li></ol><h5 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h5><ol><li><p>使用时,要加上强制转换符(  ),但可能造成精度的损失!!!</p></li><li><p>强转符合只针对最近的操作数有效,往往使用小括号提升优先级</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">3.5</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译错误:double -> int</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">3.5</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//44</span></code></pre></li></ol><h5 id="基本数据类型和String类型的转换"><a href="#基本数据类型和String类型的转换" class="headerlink" title="基本数据类型和String类型的转换"></a>基本数据类型和String类型的转换</h5><ol><li><p>基本类型转String类型</p><p><img src="https://img-blog.csdnimg.cn/e7005cb9271e42b6ad6fe7a46fba356e.png" alt="img"></p></li><li><p>String类型转基本数据类型</p><p>通过基本类型的包装类调用parseXX方法</p><p><img src="https://img-blog.csdnimg.cn/4767ff73ad0b42e2a5e280fbcddd4b0d.png" alt="img"></p></li></ol><h3 id="第三章-运算符"><a href="#第三章-运算符" class="headerlink" title="第三章 运算符"></a>第三章 运算符</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//  / 除法的使用</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.5</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2.0</span><span class="token comment" spellcheck="true">//  % 取模,取余</span><span class="token comment" spellcheck="true">// 在 % 的本质 看一个公式 a % b = a - a / b * b</span><span class="token comment" spellcheck="true">//当a是小数时, 即公式 = a - (int)a / b * b</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -1</span><span class="token comment" spellcheck="true">//  ++的使用</span><span class="token comment" spellcheck="true">//  ++作为单独语句使用都是 i = i + 1;</span><span class="token comment" spellcheck="true">//  ++作为表达式使用:前++ : ++i先自增后赋值/后++ : i++先赋值后自增</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//java规则使用到了临时变量:(1)temp = i;(2)i=i+1;(3)i=temp;</span><span class="token number">1</span><span class="token punctuation">.</span>  result <span class="token operator">=</span> <span class="token number">59</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token comment" spellcheck="true">// 8</span>    result <span class="token operator">=</span> <span class="token number">59</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token comment" spellcheck="true">// 4   8个星期4天</span>    <span class="token number">2</span><span class="token punctuation">.</span>  <span class="token keyword">double</span> huas <span class="token operator">=</span> <span class="token number">234.5</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ss <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">/</span><span class="token number">9</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">234.5</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><p>&amp;&amp; 和 &amp; 使用区别</p><ol><li>&amp;&amp;短路与: 如果第一个条件为false, 则第二个条件不会判断,最终结果为false, 效率高.</li><li>&amp; 逻辑与: 不管第一个条件判断是不是false,第二个条件还是会判断,效率低.</li><li>开发中,我们使用短路与&amp;&amp; ,效率高 </li></ol><p>|| 和 |使用区别</p><p><img src="https://img-blog.csdnimg.cn/7ce2e8c4e33c41eebbc9992c9137f2a0.png" alt="img"></p><h5 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h5><p>复合赋值运算符会进行类型转换.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>b <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b = b + 2;  实际上真正等价于 b = (byte)(b + 2);</span>b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等价于 b = (byte)(b + 1);</span><span class="token comment" spellcheck="true">//如果直接写</span>b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是错误的,类型是int型</span></code></pre><h5 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h5><p>条件表达式 ? 表达式1 :  表达式2;</p><p>运算规则:</p><ol><li><p>如果条件表达式为true, 运算后的结果是表达式1;</p></li><li><p>如果条件表达式为false, 运算后的结果是表达式2;</p><p>口诀: 一真大师</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> a<span class="token operator">++</span><span class="token operator">:</span>b<span class="token operator">--</span>    <span class="token comment" spellcheck="true">//条件表达式为假/运行b--</span>    <span class="token comment" spellcheck="true">//结果为:先返回b的值,然后在 b-1</span>    <span class="token comment" spellcheck="true">//返回结果为99</span></code></pre><p>细节:</p><ol><li><p>表达式1和表达式2要为可以赋给接收变量的类型(或自动转换)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> <span class="token number">1.1</span> <span class="token operator">:</span> <span class="token number">2.3</span><span class="token comment" spellcheck="true">//语法错误</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1.1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">2.3</span><span class="token comment" spellcheck="true">//可以的</span><span class="token keyword">double</span> d <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> a <span class="token operator">:</span> b <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以的,满足int -> double</span></code></pre></li><li><p>三元运算符可以转换从if(…)else 语句</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实现三个数的最大值</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">553</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span><span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//思路</span><span class="token comment" spellcheck="true">//1.先得到 n1 和 n2 中最大数,保存到 max1</span><span class="token comment" spellcheck="true">//2.然后再 求出 max1 和 n3中的最大数,保存到 max2</span><span class="token keyword">int</span> max1 <span class="token operator">=</span> n1 <span class="token operator">></span> n2<span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">;</span><span class="token keyword">int</span> max2 <span class="token operator">=</span> max1 <span class="token operator">></span> n3<span class="token operator">?</span> max1 <span class="token operator">:</span> n3<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大数="</span> <span class="token operator">+</span> max2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h5><p>Input.java///需要一个 扫描器(对象), 就是 Scanner</p><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收String类型的输入</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收Int类型的输入</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>等    <span class="token comment" spellcheck="true">//具体看java.util.Scanner</span></code></pre><h5 id="四种进制"><a href="#四种进制" class="headerlink" title="四种进制"></a>四种进制</h5><p>二进制, 满2进1. 以0b或0B开头.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二进制转换成八进制</span><span class="token comment" spellcheck="true">//从低位开始,将二进制数每三位一组,转成对应的八进制数即可</span><span class="token comment" spellcheck="true">//二进制转换成十六进制</span><span class="token comment" spellcheck="true">//从低位开始,将二进制数每四位一组,转成对应的十六进制数即可</span></code></pre><p>十进制, 满10进1.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//十进制转换成二进制</span><span class="token comment" spellcheck="true">//将该数不断除以2,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</span><span class="token comment" spellcheck="true">//十进制转换成八进制</span><span class="token comment" spellcheck="true">//将该数不断除以8,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</span><span class="token comment" spellcheck="true">//十进制转换成十六进制</span><span class="token comment" spellcheck="true">//将该数不断除以16,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</span></code></pre><p>八进制, 0-7, 满8进1. 以数字0开头表示.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//八进制转换成十进制</span><span class="token comment" spellcheck="true">//从最低位(右边)开始,将每个位上的数提取出来,乘以8的(位数-1)次方,求和</span>eg<span class="token operator">:</span><span class="token number">0234</span>转成十进制的数    <span class="token number">0234</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span>    <span class="token number">4</span> <span class="token operator">+</span><span class="token number">24</span> <span class="token operator">+</span><span class="token number">128</span> <span class="token operator">=</span><span class="token number">156</span><span class="token comment" spellcheck="true">//八进制转换成二进制</span><span class="token comment" spellcheck="true">//将八进制数每1位,转成对应的一个3位的二进制数</span></code></pre><p>十六进制, 0-9及A-F, 满16进1. 以0x或0X开头表示</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//十六进制转换成十进制</span><span class="token comment" spellcheck="true">//从最低位(右边)开始,将每个位上的数提取出来,乘以16的(位数-1)次方,求和</span>eg<span class="token operator">:</span><span class="token number">0x23A</span>转成十进制的数    <span class="token number">0x23A</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">570</span>     <span class="token comment" spellcheck="true">//十六进制转换成二进制</span><span class="token comment" spellcheck="true">//将十六进制数每1位,转成对应的一个4位的二进制数</span></code></pre><h5 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码\反码\补码"></a>原码\反码\补码</h5><ol><li>二进制的最高位(最左边)是符号位: 0表示正数, 1表示负数(老韩口诀:旋转90°   0 -&gt; 0   1 -&gt;  -)</li><li>正数的原码, 反码, 补码都一样(三码合一)</li><li>负数的反码 = 它的原码符号位不变, 其他位取反(0 -&gt; 1, 1 -&gt; 0)</li><li>负数的补码 = 负数的反码 + 1, 负数的反码 = 负数的补码 - 1</li><li>0的反码,补码都是0</li><li>java没有无符号数,换言之, Java中的数都是有符号的</li><li>在计算机运算的时候, 都是以<u><strong>补码的方式来运算</strong></u>的</li><li>当我们看运算结果的时候, 要看他的原码(!!!)</li></ol><h5 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h5><p>7个位运算符(&amp; , | , ^ , ~ , &gt;&gt; , &lt;&lt; , &gt;&gt;&gt;)</p><p>按位与&amp;</p><p><img src="https://img-blog.csdnimg.cn/798c1e3d7bf947fb892f2cf854d2edce.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>按位或 | : 两位中有一个为1,结果为1</p><p>按位异或^ : 两位不同时为1, 相同为0</p><p>按位取反~</p><p><img src="https://img-blog.csdnimg.cn/79e789e308524249b2cf674974e2dc97.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/f8da8185083140019181160525db885d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>算术右移 &gt;&gt;  :低位溢出, 符号位不变, 并用符号位补溢出的高位 (如果是正数的话 本质是右移几位就除几次2)</p><p>算术左移 &lt;&lt; :符号位不变, 低位补0 (如果是正数的话 本质是左移几位就乘几次2)</p><p><img src="https://img-blog.csdnimg.cn/746bf9fef49e45a1aeeb333427ae33fb.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/089e1478260941f9839eaecdd11a55de.png" alt="img"></p><p>逻辑右移也叫无符号右移 &gt;&gt;&gt; : 低位溢出, 高位补0</p><h3 id="第三章习题"><a href="#第三章习题" class="headerlink" title="第三章习题"></a>第三章习题</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.计算 -10.5%3 = ?</span><span class="token comment" spellcheck="true">//a % b 当a是小数时,公式 = a - (int)a/b*b</span><span class="token comment" spellcheck="true">//-10.5%3 = -10.5 - (-10)/3*3 = -10.5 + 9 = -1.5</span><span class="token comment" spellcheck="true">//注意: 有小数运算,得到结果是近似值</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10.5</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.试写出将String转换成double类型的语句,以及将char类型转换成String的语句,举例说明.</span>见chapter03<span class="token operator">/</span>Test</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门语法</title>
      <link href="/2019/03/26/java-note-firstedition/"/>
      <url>/2019/03/26/java-note-firstedition/</url>
      
        <content type="html"><![CDATA[<h1 id="Java入门语法"><a href="#Java入门语法" class="headerlink" title="Java入门语法"></a>Java入门语法</h1><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ol><li><p>String(字符串)</p><p>类型   变量名 = 变量的值</p></li><li><p>int(整数)</p><p><code>int    a    =    10</code></p></li><li><p>double(小数)</p><p><code>double   a   =   12.34</code></p></li><li><p>boolean(布尔)</p><p>表示是/否     <code>boolean    a = true</code></p></li></ol><h3 id="表达式与操作符"><a href="#表达式与操作符" class="headerlink" title="表达式与操作符"></a>表达式与操作符</h3><ol><li><p>算术操作符</p><p>+,   -,   *,   /,  %(模运算)</p><p>模运算：两数相除，取余数</p></li><li><p>赋值操作符</p><p>a =  b+c</p><ol><li>计算右侧的表达式</li><li>把值赋给左边的变量</li></ol></li><li><p>关系操作符</p><p>&gt;,  &lt;,  &lt;=,  &gt;=,  ==, !=</p></li><li><p>逻辑操作符</p><p>&amp;&amp;  ，  ||  ，  ！</p><p>与          或       非</p></li><li><p>自增操作符</p><p>a  =  b++                           a  = ++b</p><p>​     👇                                      👇</p><p>a = b;                                   ++b;</p><p>b++;                                     a=b;</p></li></ol><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ol><li><p>break</p><p>中断当前循环，直接跳出循环</p></li><li><p>continue</p><p>跳出本轮循环，直接进入下一轮</p></li></ol><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>int[]                a     =     new    int[5];</p><p>数组类型       名字</p><p>int[]                 a    ={13,8,20,7,21};</p><h3 id="String-API"><a href="#String-API" class="headerlink" title="String API"></a>String API</h3><h5 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a><code>equals()</code>方法</h5><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"ddnihao"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"Ddnihao"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//区分大小写</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//制表位,实现对齐功能\t</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京\t天津\t上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个回车\r</span><span class="token comment" spellcheck="true">//解读</span><span class="token comment" spellcheck="true">//1.输出 韩顺平教育</span><span class="token comment" spellcheck="true">//2.\r表示回车</span><span class="token comment" spellcheck="true">//3.会把光标从最后面顶到前面:北京平教育</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"韩顺平教育\r北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双引号转义\"</span>String str <span class="token operator">=</span><span class="token string">"我的名字是\"哒哒\""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//换行符转义\n</span>String str <span class="token operator">=</span> <span class="token string">"哒哒\n你好\nddnihao.cn"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反斜杠转义\\</span>String str <span class="token operator">=</span> <span class="token string">"C:\\Windows\\notepad.exe"</span><span class="token punctuation">;</span></code></pre><h5 id="子串和查找"><a href="#子串和查找" class="headerlink" title="子串和查找"></a>子串和查找</h5><p>​    <code>substring(begin,end)</code>,用于获取子串</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"ddnihao"</span><span class="token punctuation">;</span>String s1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从[2]到[6],不包括[6]</span>String s2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从[2]到末尾</span></code></pre><p>​    <code>indexOf()</code>,用于查找子串</p><pre class=" language-java"><code class="language-java">String url <span class="token operator">=</span> <span class="token string">"http://dadanihao.cn/java/index.html"</span><span class="token punctuation">;</span><span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"da"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//url.indexOf("da")返回子串出现的位置.若未找到,则返回-1</span><span class="token comment" spellcheck="true">//indexOf()的几种用法,可以指定查找的范围</span><span class="token comment" spellcheck="true">//url.indexOf(a);从头开始找</span><span class="token comment" spellcheck="true">//url.indexOf(a,fromindex);从fromindex处开始查找</span><span class="token comment" spellcheck="true">//url.lastIndexOf(a);从后往前查找</span></code></pre><h5 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h5><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"名称:%s 数量:%d 价格:%f"</span><span class="token punctuation">,</span><span class="token string">"小龙虾"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//%s字符串,%04d整数(04表示补齐4位整数显示,不足则填零),%.2f浮点数(.2表示小数点后面保留两位)</span></code></pre><h5 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h5><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"dadanihao"</span><span class="token punctuation">;</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//转换成大写</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//转换成小写</span></code></pre><h5 id="去除空白字符"><a href="#去除空白字符" class="headerlink" title="去除空白字符"></a>去除空白字符</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//trim()用于去除字符串左右两边的空白字符</span>String s <span class="token operator">=</span> <span class="token string">"  哒哒 你好  "</span><span class="token punctuation">;</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="前缀和后缀的判断"><a href="#前缀和后缀的判断" class="headerlink" title="前缀和后缀的判断"></a>前缀和后缀的判断</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//str.startsWith(a);判断是否以a为前缀</span><span class="token comment" spellcheck="true">//str.endssWith(a);判断是否以a为后缀</span>String fileName <span class="token operator">=</span> <span class="token string">"Java_Primer_23_01 String.mp4"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是视频文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//比如一个字符串中以逗号分开,表示若干姓名.用split()分割得到String[]数组</span>String s <span class="token operator">=</span> <span class="token string">"小猪, 小王, 小李"</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//传入分割符</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>names<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Integer-API"><a href="#Integer-API" class="headerlink" title="Integer  API"></a>Integer  API</h3><pre class=" language-java"><code class="language-java">Integer a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//（对象）是一个类,提供了一些方法</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是一个基本类型</span><span class="token comment" spellcheck="true">//Integer与int的转换</span>Integer a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//int->Integer</span><span class="token keyword">int</span> value <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Integer->int</span><span class="token comment" spellcheck="true">//Integer与String的转换</span><span class="token comment" spellcheck="true">//String->Integer</span>Integer a <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//静态方法</span><span class="token comment" spellcheck="true">//Integer->String</span>String str1 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String str2 <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符串拼接时,自动toString()</span></code></pre><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><pre class=" language-java"><code class="language-java">Student<span class="token punctuation">[</span><span class="token punctuation">]</span> sss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//需要创建对象</span><span class="token comment" spellcheck="true">//错误写法</span>sss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确写法</span><span class="token comment" spellcheck="true">//Student s0 = new Student();</span><span class="token comment" spellcheck="true">//s0.id = 1000;</span><span class="token comment" spellcheck="true">//sss[0] = s0;</span><span class="token comment" spellcheck="true">//或者</span>sss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></code></pre><h3 id="Date-API"><a href="#Date-API" class="headerlink" title="Date API"></a>Date API</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查看当天的日期,使用Data.toString()</span>Data today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日期格式化,使用年月时分秒形式</span>SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String str = today.toString();</span>String str <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用一个整数表示时间</span><span class="token keyword">long</span> time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示自1970-1-1 00:00:00开始到现在</span><span class="token comment" spellcheck="true">//时间值可以和Date类型直接转换</span>Date now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">long</span> t <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Calendar日历"><a href="#Calendar日历" class="headerlink" title="Calendar日历"></a>Calendar日历</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个Calendar的对象</span>Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//必须通过其静态方法创建,默认的,cal为当前时间</span><span class="token comment" spellcheck="true">//获取年月日时分秒的值</span><span class="token comment" spellcheck="true">//年</span><span class="token keyword">int</span> year <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//月:从0开始计算,范围0,1,2,...,11</span><span class="token keyword">int</span> month <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//天:本月第几天,范围1,2,3,...,31</span><span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小时:24小时制,范围0,1,2,...,23</span><span class="token keyword">int</span> hour <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分钟:范围0,1,2,...,59</span><span class="token keyword">int</span> minute <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//秒:范围0,1,2,...,59</span><span class="token keyword">int</span> second <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//星期几:本周第几天,范围1,2,...,7,星期日为1</span><span class="token keyword">int</span> dayOfWeek <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//DAY_OF_YEAR:当年第几天,范围1,2,...,366</span><span class="token keyword">int</span> dayOfYear <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置年月日时分秒</span><span class="token comment" spellcheck="true">//设置年月日"2020-6-7",注意月份从0开始计数</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置年月日时分秒"2020-6-7 20:15:48"</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置年</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置月,注意月份从0计算</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置日</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置时</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置分</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只设置秒</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//往前或往后推算,也可以按小时,月等推算</span><span class="token comment" spellcheck="true">//前天</span>cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//30天后</span>cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//具体看JAVA的Calendar的文档</span></code></pre><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//字段（属性）Fields</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><pre class=" language-java"><code class="language-java">Student gao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用</span>Student lovely <span class="token operator">=</span> gao<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例ID(instance ID)： 指的是同一个对象。</span></code></pre><h3 id="对象的比较"><a href="#对象的比较" class="headerlink" title="对象的比较"></a>对象的比较</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对象的比较,有两种情况,须仔细分辨</span><span class="token comment" spellcheck="true">//equals()方法只能用在String类型</span><span class="token comment" spellcheck="true">//假设a,b为两个对象</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断a,b是否为同一对象(instance ID是否相同)</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断a,b内容是否相同,用于对象内容的比较</span></code></pre><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Fields</span>    <span class="token comment" spellcheck="true">//Methods:</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playmusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>创建对象</li><li>调用</li></ol><h5 id="方法的参数："><a href="#方法的参数：" class="headerlink" title="方法的参数："></a>方法的参数：</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playmusic</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        参数的类型和个数需要匹配。</p><h5 id="方法的返回值："><a href="#方法的返回值：" class="headerlink" title="方法的返回值："></a>方法的返回值：</h5><p>​    返回给调用他的方法</p><p>​    return</p><h5 id="方法的重载："><a href="#方法的重载：" class="headerlink" title="方法的重载："></a>方法的重载：</h5><p>​    可以重名，但参数需要不同</p><h3 id="权限修饰符："><a href="#权限修饰符：" class="headerlink" title="权限修饰符："></a>权限修饰符：</h3><p>​    public：公共的</p><p>​    protected：受保护的</p><p>​    default（friendly）：默认的就是友好的</p><p>​    private：私有的</p><table><thead><tr><th align="center">作用域</th><th align="center">当前类</th><th align="center">同一包</th><th align="center">其他包的子孙类</th><th align="center">其他包的类</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">friendly</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h3 id="使用JAR文件"><a href="#使用JAR文件" class="headerlink" title="使用JAR文件"></a>使用JAR文件</h3><ol><li>新建一个lib目录</li><li>拷贝*.jar文件到lib\下</li><li>右键Build Path | Add to Build Path…</li></ol><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>​    abstract</p><p>​    不能实例化：<code>PlanetKiller pk = new PlanetKiller();</code></p><h5 id="抽象类的实现"><a href="#抽象类的实现" class="headerlink" title="抽象类的实现"></a>抽象类的实现</h5><p>​    子类继承，填写父类遗留下来的方法</p><h3 id="接口类：表示一组要实现的功能，即技术规范"><a href="#接口类：表示一组要实现的功能，即技术规范" class="headerlink" title="接口类：表示一组要实现的功能，即技术规范"></a>接口类：表示一组要实现的功能，即技术规范</h3><p>​    接口的实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shoe</span> <span class="token keyword">implements</span> <span class="token class-name">HairDryer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    即只要实现了dry（）功能的设备，均可认为是一台吹风机。</p><h5 id="多接口继承"><a href="#多接口继承" class="headerlink" title="多接口继承"></a>多接口继承</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shoe</span> <span class="token keyword">implements</span> <span class="token class-name">HairDryer</span><span class="token punctuation">,</span>MusicPlayer<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用逗号分隔就可以了</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//完全形态：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">C</span><span class="token punctuation">,</span>D<span class="token punctuation">,</span>E<span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>​    是在内部中使用的</p><ol><li>关联了一个外部对象</li><li>可以自由访问，无视private限制</li></ol><h5 id="静态内部类（白眼狼）"><a href="#静态内部类（白眼狼）" class="headerlink" title="静态内部类（白眼狼）"></a>静态内部类（白眼狼）</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span></code></pre><ol><li><p>独立性，可以在外面使用</p><pre class=" language-java"><code class="language-java">Example<span class="token punctuation">.</span>XYZ x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example<span class="token punctuation">.</span>XYZ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>没有所谓的“当前外部对象”可用</p></li><li><p>体积较小</p></li></ol><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><pre class=" language-java"><code class="language-java">Arraylist<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li><p>添加一个元素</p><p><code>list.add(new Student(...));</code></p></li><li><p>删除一个元素</p><p><code>list.remove();</code></p></li><li><p>获取一个元素</p><p><code>Student  value = list.get();</code></p></li><li><p>列表长度</p><p><code>int   size   =  list.size();</code></p><p>​    多项删除时，从后往前，倒序遍历</p><p><e>应为引用类型，不能是值类型</e></p><p>//包装类</p><p>int→Integer</p><p>long→Long</p><p>shot→Shot</p><p>boolean→Boolean</p><p>….</p></li><li><p>排序</p><p><code>list.sort();</code></p></li></ol><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>​    key         →         value</p><p>数据项编号          数据项的类型</p><ol><li><p>创建一个哈希映射</p><pre class=" language-java"><code class="language-java">HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Student<span class="token operator">></span>  map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//其中Integer为编号类型，Student为值类型</span></code></pre></li><li><p>添加数据</p><p><code>map.put(key,value);</code></p></li><li><p>查找数据</p><p><code>value = map.get(key);</code></p></li><li><p>删除一次</p><p><code>map.remove(key);</code></p></li><li><p>清空所有项</p><p><code>map.clean();</code></p></li><li><p>检查是否存在</p><p><code>exsit  = map.containsKey(key);</code></p></li></ol><h3 id="静态对象"><a href="#静态对象" class="headerlink" title="静态对象"></a>静态对象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Config cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示全局对象</span></code></pre><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//静态方法是工具方法，可以直接调用</span><span class="token comment" spellcheck="true">//在静态方法中,不能访问this</span></code></pre><h3 id="重名"><a href="#重名" class="headerlink" title="重名"></a>重名</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学号</span>    <span class="token comment" spellcheck="true">//构造方法</span>    <span class="token keyword">public</span> <span class="token function">Studnet</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有this.*的代表当前属性</span>    <span class="token comment" spellcheck="true">//直接*的表示局部变量</span></code></pre><h3 id="Getter和Setter"><a href="#Getter和Setter" class="headerlink" title="Getter和Setter"></a>Getter和Setter</h3><p>​    当一个属性设为private的时候,外部如何访问它?</p><ol><li><p>Getter方法</p><p>例如,添加<code>public int getRadius()</code>来获取radius的值</p></li><li><p>Setter方法</p><p>例如,添加<code>public void setRadius(int radius)</code>设置radius的值</p></li><li><p>可以自动生成：右键/Source/  Generate Getters and Setters…</p></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Override重写</span>    <span class="token comment" spellcheck="true">//在子类里面,右键Source|Override Methods...</span>    <span class="token comment" spellcheck="true">//有两种选择:1.完全重写  2.部分重写:先调用父类super.*(),在此基础上再添加几句实现</span><span class="token comment" spellcheck="true">//构造方法的继承</span><span class="token keyword">public</span> <span class="token function">MyMp3File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//super()必须放在构造方法的第一行,super()可以省略不写,但是当父类的构造方法需要参数时</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在进行自己属性的初始化</span><span class="token punctuation">}</span></code></pre><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString() 方法"></a>toString() 方法</h3><p>Object.toString()，将一个对象以字符串表示，<u>一般用于辅助打印或者调试</u></p><p>每一个类都有toString()方法,继承自Object类</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li>重载：Overload</li><li>重写：Override</li><li>泛型：ArrayList/HashMap</li></ol><pre class=" language-java"><code class="language-java">Tree t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppleTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//前面是名义上的类型，后面是实际的类型</span><span class="token comment" spellcheck="true">//其中，AppleTree是Tree的子类：AppleTree也是一种Tree，具有Tree全部特征</span></code></pre><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ol><li><p>算术异常:ArithmeticException</p></li><li><p>越界异常:ArravIndexOutOfBoundsException</p></li><li><p>空指针异常:NullPointerException</p></li><li><p>非检查异常:Unchecked Exception</p><p>默认地,编译器会对异常做检查</p><p>-检查throws声明</p><p>-检查try{}catch{}匹配</p><p>​    但是RuntimeException类及其子类,编译器忽略对其检查</p></li><li></li></ol><h5 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//要监视的代码块</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这个参数表示可能出错的异常</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//若捕获到了异常,在此处理</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//异常机制</span><span class="token number">1</span><span class="token punctuation">.</span>立即从<span class="token keyword">try</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>退出<span class="token punctuation">,</span>类似<span class="token keyword">break</span>效果<span class="token number">2</span><span class="token punctuation">.</span>进入<span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token operator">-</span>Exception e<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//表示捕获到的异常对象</span><span class="token operator">-</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//异常类名</span><span class="token operator">-</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//异常描述</span><span class="token operator">-</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//打印函数栈找异常溯源</span><span class="token number">3</span><span class="token punctuation">.</span>在<span class="token keyword">try</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>捕获处理之后<span class="token punctuation">,</span>程序继续运行</code></pre><p>按类型捕获</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//监控代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//算术异常</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArravIndexOutOfBoundsException e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//越界异常</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>NullPointerException e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//空指针异常</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//最好可以添加一个默认Exception来防止漏捕</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认匹配,防止逃逸</span><span class="token punctuation">}</span></code></pre><h5 id="异常的抛出"><a href="#异常的抛出" class="headerlink" title="异常的抛出"></a>异常的抛出</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//一般形式为:</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Exception ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        thow ex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抛出异常,即向上报告一个异常</span>        <span class="token comment" spellcheck="true">//或者throw new Exception(...)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h5><p>finally,与try{…}联用,执行一些异常清理工作</p><p>一般形式为:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//要监视的代码块</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//若捕获到了异常,在此处理</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一些清理工作</span><span class="token punctuation">}</span>其中<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//1.若try{...}中有异常发生</span><span class="token comment" spellcheck="true">//则跳出try{}→执行catch{}→执行finally{}</span><span class="token comment" spellcheck="true">//2.若try{...}中没有异常发生</span><span class="token comment" spellcheck="true">//由执行try{}→执行finally{}</span>显然<span class="token punctuation">,</span><span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>总是会执行<span class="token punctuation">,</span>通常用于执行<span class="token operator">-</span>清理善后<span class="token operator">-</span>工作</code></pre><h3 id="文件与目录"><a href="#文件与目录" class="headerlink" title="文件与目录"></a>文件与目录</h3><p>File类是一个轻量级的类,不占资源.</p><p>file仅表示一个路径，并不会真的创建一个文件</p><p>显然,创建一个File对象不会包含文件中的数据,<u>和文件没啥关系</u></p><p>​    <code>java.io.File</code>,用于描述一个文件、目录的路径</p><p>​    eg：</p><pre class=" language-java"><code class="language-java">File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/example/123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/picture/"</span><span class="token punctuation">)</span></code></pre><h5 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h5><p>-<code>file.exists()</code>，判断它是否存在</p><p>-<code>file.isFile()/isDirectory()</code>，判断它是文件、还是目录</p><p>-<code>file.getName()</code>，返回文件名，含后缀</p><p>-<code>file.length()</code>，返回文件的长度，单位是字节</p><p>-<code>file.lastModified()</code>，返回文件的修改时间，时间值（ms）</p><p>-<code>file.getParentFile()</code>，返回上级目录</p><h5 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h5><p>-<code>dir.exists()</code>，判断它是否存在</p><p>-<code>dir.getName()</code>，返回目录名</p><p>-<code>dir.getParentFile()</code>，获取上级目录</p><p>-<code>dir.mkdir()</code>，创建单个目录</p><p>-<code>dir.mkdirs()</code>，创建多层目录</p><p>​    常使用这个</p><p>-<code>dir.listFiles()</code>，列出子文件/子目录</p><p>​    File[] files = dir.listFiles();</p><p>​    有可能返回为null，最好要判断一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span> files <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>File f <span class="token operator">:</span> files<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  "</span> <span class="token operator">+</span> f<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>File cd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cd<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//*.getAbsolutePath();获取完整路径</span><span class="token comment" spellcheck="true">//*.getCanonicalPath();获取简洁路径</span></code></pre><h5 id="文件读写，即IO"><a href="#文件读写，即IO" class="headerlink" title="文件读写，即IO"></a>文件读写，即IO</h5><p>在Java中，用byte[ ]表示数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写入数据</span><span class="token comment" spellcheck="true">//java.io.FileOutputStream，创建文件并写入数据</span><span class="token comment" spellcheck="true">//一个数组数据</span><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定文件路径，创建一个sample的文件</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.打开文件，准备写入</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.写入数据</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.关闭文件</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//读取数据</span><span class="token comment" spellcheck="true">//java.io.FileInputStream，用于读取数据</span><span class="token comment" spellcheck="true">//缓冲区，一次性读取1200个字节</span><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//1.打开文件、准许读取</span>    FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.读取文件</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回值表示实际读到的字节数</span>    <span class="token comment" spellcheck="true">//3.关闭文件 </span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果文件不存在的话，抛出异常FileNotFoundExeption</span></code></pre><h5 id="文本的写入和读取"><a href="#文本的写入和读取" class="headerlink" title="文本的写入和读取"></a>文本的写入和读取</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写入文本</span><span class="token comment" spellcheck="true">//当一个文件里存储文本数据时，称为文本文件</span><span class="token comment" spellcheck="true">//文件只能写入数据，只能存储字节数据，不能写入文本</span><span class="token comment" spellcheck="true">//首先要转换成字节数据</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先定义一个文本</span>    String text <span class="token operator">=</span> <span class="token string">"哒哒nihao"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//需要先转换成字节数据</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token operator">=</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sample.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//读取文本</span><span class="token comment" spellcheck="true">//读取文件sample.txt中的数据,转换成文本内容</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.读取字节数据</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sample.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.解码成文本</span>    String text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//指示起始位置0,和长度n(n个字节),字符编码"UTF-8"</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"GOT:"</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">catc</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
