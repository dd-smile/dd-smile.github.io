<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于拔掉网线后,TCP连接还在吗?</title>
      <link href="/2024/03/20/guan-yu-ba-diao-wang-xian-hou-tcp-lian-jie-huan-zai-ma/"/>
      <url>/2024/03/20/guan-yu-ba-diao-wang-xian-hou-tcp-lian-jie-huan-zai-ma/</url>
      
        <content type="html"><![CDATA[<p>先排查了MQTT会话，发现一直在线。关闭掉MQTT持久会话后，发现不能及时知道连接已断开，需要十来分钟的时间。使用的MQTT协议版本是3.1</p><p>拔掉网线后，原本的TCP连接还存在吗？</p><p>针对这个问题，要分场景来讨论：</p><ul><li>拔掉网线后，有数据传输</li><li>拔掉网线后，没有数据传输</li></ul><h2 id="拔掉网线后，有数据传输"><a href="#拔掉网线后，有数据传输" class="headerlink" title="拔掉网线后，有数据传输"></a>拔掉网线后，有数据传输</h2><p>在客户端拔掉网线后，服务端向客户端发送的数据报文会得不到任何的响应，在等待一定时长后，服务端就会触发<strong>超时重传</strong>机制，重传未得到响应的数据报文。</p><p><strong>如果在服务端重传报文的过程中，客户端刚好把网线插回去了</strong>，由于拔掉网线并不会改变客户端的 TCP 连接状态，并且还是处于 ESTABLISHED 状态，所以这时客户端是可以正常接收服务端发来的数据报文的，然后客户端就会回 ACK 响应报文。</p><p>此时，客户端和服务端的 TCP 连接依然存在的，就感觉什么事情都没有发生。</p><p>但是，<strong>如果如果在服务端重传报文的过程中，客户端一直没有将网线插回去</strong>，服务端超时重传报文的次数达到一定阈值后，内核就会判定出该 TCP 有问题，然后通过 Socket 接口告诉应用程序该 TCP 连接出问题了，于是服务端的 TCP 连接就会断开。</p><p>而等客户端插回网线后，如果客户端向服务端发送了数据，由于服务端已经没有与客户端相同四元祖的 TCP 连接了，因此服务端内核就会回复 RST 报文，客户端收到后就会释放该 TCP 连接。</p><p>此时，客户端和服务端的 TCP 连接都已经断开了。</p><blockquote><p>那 TCP 的数据报文具体重传几次呢？</p></blockquote><p>在 Linux 系统中，提供了一个叫 tcp_retries2 配置项，默认值是 15，如下图：<img src="https://cdn.xiaolincoding.com//mysql/other/f92c00c7e9cd01e89326e943232e5f04.png" alt="tcp_retries2 "></p><p>这个内核参数是控制，在 TCP 连接建立的情况下，超时重传的最大次数。</p><p>不过 tcp_retries2 设置了 15 次，并不代表 TCP 超时重传了 15 次才会通知应用程序终止该 TCP 连接，<strong>内核会根据 tcp_retries2 设置的值，计算出一个 timeout</strong>（<em>如果 tcp_retries2 =15，那么计算得到的 timeout = 924600 ms</em>），<strong>如果重传间隔超过这个 timeout，则认为超过了阈值，就会停止重传，然后就会断开 TCP 连接</strong>。</p><p>在发生超时重传的过程中，每一轮的超时时间（RTO）都是<strong>倍数增长</strong>的，比如如果第一轮 RTO 是 200 毫秒，那么第二轮 RTO 是 400 毫秒，第三轮 RTO 是 800 毫秒，以此类推。</p><p>而 RTO 是基于 RTT（一个包的往返时间） 来计算的，如果 RTT 较大，那么计算出来的 RTO 就越大，那么经过几轮重传后，很快就达到了上面的 timeout 值了。</p><p>举个例子，如果 tcp_retries2 =15，那么计算得到的 timeout = 924600 ms，如果重传总间隔时长达到了 timeout 就会停止重传，然后就会断开 TCP 连接：</p><ul><li>如果 RTT 比较小，那么 RTO 初始值就约等于下限 200ms，也就是第一轮的超时时间是 200 毫秒，由于 timeout 总时长是 924600 ms，表现出来的现象刚好就是重传了 15 次，超过了 timeout 值，从而断开 TCP 连接</li><li>如果 RTT 比较大，假设 RTO 初始值计算得到的是 1000 ms，也就是第一轮的超时时间是 1 秒，那么根本不需要重传 15 次，重传总间隔就会超过 924600 ms。</li></ul><p>最小 RTO 和最大 RTO 是在 Linux 内核中定义好了：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> TCP_RTO_MAX ((unsigned)(120*HZ))</span><span class="token macro property">#<span class="token directive keyword">define</span> TCP_RTO_MIN ((unsigned)(HZ/5))</span></code></pre><p>Linux 2.6+ 使用 1000 毫秒的 HZ，因此<code>TCP_RTO_MIN</code>约为 200 毫秒，<code>TCP_RTO_MAX</code>约为 120 秒。</p><p>如果<code>tcp_retries</code>设置为<code>15</code>，且 RTT 比较小，那么 RTO 初始值就约等于下限 200ms，这意味着<strong>它需要 924.6 秒</strong>才能将断开的 TCP 连接通知给上层（即应用程序），每一轮的 RTO 增长关系如下表格：</p><p><img src="https://cdn.xiaolincoding.com//mysql/other/10fa6882db83aee68f246c04fcb7d760.png" alt="RTO增长关系"></p><h2 id="拔掉网线后，没有数据传输"><a href="#拔掉网线后，没有数据传输" class="headerlink" title="拔掉网线后，没有数据传输"></a>拔掉网线后，没有数据传输</h2><p>针对拔掉网线后，没有数据传输的场景，还得看是否开启了 TCP keepalive 机制 （TCP 保活机制）。</p><p>如果<strong>没有开启</strong> TCP keepalive 机制，在客户端拔掉网线后，并且双方都没有进行数据传输，那么客户端和服务端的 TCP 连接将会一直保持存在。</p><p>而如果<strong>开启</strong>了 TCP keepalive 机制，在客户端拔掉网线后，即使双方都没有进行数据传输，在持续一段时间后，TCP 就会发送探测报文：</p><ul><li>如果<strong>对端是正常工作</strong>的。当 TCP 保活的探测报文发送给对端, 对端会正常响应，这样 <strong>TCP 保活时间会被重置</strong>，等待下一个 TCP 保活时间的到来。</li><li>如果<strong>对端主机宕机</strong>（<em>注意不是进程崩溃，进程崩溃后操作系统在回收进程资源的时候，会发送 FIN 报文，而主机宕机则是无法感知的，所以需要 TCP 保活机制来探测对方是不是发生了主机宕机</em>），或对端由于其他原因导致报文不可达。当 TCP 保活的探测报文发送给对端后，石沉大海，没有响应，连续几次，达到保活探测次数后，<strong>TCP 会报告该 TCP 连接已经死亡</strong>。</li></ul><p>所以，TCP 保活机制可以在双方没有数据交互的情况，通过探测报文，来确定对方的 TCP 连接是否存活。</p><blockquote><p>TCP keepalive 机制具体是怎么样的？</p></blockquote><p>这个机制的原理是这样的：</p><p>定义一个时间段，在这个时间段内，如果没有任何连接相关的活动，TCP 保活机制会开始作用，每隔一个时间间隔，发送一个探测报文，该探测报文包含的数据非常少，如果连续几个探测报文都没有得到响应，则认为当前的 TCP 连接已经死亡，系统内核将错误信息通知给上层应用程序。</p><p>在 Linux 内核可以有对应的参数可以设置保活时间、保活探测的次数、保活探测的时间间隔，以下都为默认值：</p><pre class=" language-c"><code class="language-c">net<span class="token punctuation">.</span>ipv4<span class="token punctuation">.</span>tcp_keepalive_time<span class="token operator">=</span><span class="token number">7200</span>net<span class="token punctuation">.</span>ipv4<span class="token punctuation">.</span>tcp_keepalive_intvl<span class="token operator">=</span><span class="token number">75</span>  net<span class="token punctuation">.</span>ipv4<span class="token punctuation">.</span>tcp_keepalive_probes<span class="token operator">=</span><span class="token number">9</span></code></pre><ul><li>tcp_keepalive_time=7200：表示保活时间是 7200 秒（2小时），也就 2 小时内如果没有任何连接相关的活动，则会启动保活机制</li><li>tcp_keepalive_intvl=75：表示每次检测间隔 75 秒；</li><li>tcp_keepalive_probes=9：表示检测 9 次无响应，认为对方是不可达的，从而中断本次的连接。</li></ul><p>也就是说在 Linux 系统中，最少需要经过 2 小时 11 分 15 秒才可以发现一个「死亡」连接。</p><p><img src="https://cdn.xiaolincoding.com//mysql/other/46906e588260607680db43a68fe00278.png" alt="死亡时间"></p><p>注意，应用程序若想使用 TCP 保活机制需要通过 socket 接口设置 <code>SO_KEEPALIVE</code> 选项才能够生效，如果没有设置，那么就无法使用 TCP 保活机制。</p><blockquote><p>TCP keepalive 机制探测的时间也太长了吧？</p></blockquote><p>对的，是有点长。</p><p>TCP keepalive 是 <strong>TCP 层（内核态）</strong> 实现的，它是给所有基于 TCP 传输协议的程序一个兜底的方案。</p><p>实际上，我们应用层可以自己实现一套探测机制，可以在较短的时间内，探测到对方是否存活。</p><p>比如，web 服务软件一般都会提供 <code>keepalive_timeout</code> 参数，用来指定 HTTP 长连接的超时时间。如果设置了 HTTP 长连接的超时时间是 60 秒，web 服务软件就会<strong>启动一个定时器</strong>，如果客户端在完后一个 HTTP 请求后，在 60 秒内都没有再发起新的请求，<strong>定时器的时间一到，就会触发回调函数来释放该连接。</strong></p><p><img src="https://cdn.xiaolincoding.com//mysql/other/c881f163091a4c6427d68b7144c3a980.png" alt="Web服务的探测机制"></p><h2 id="主机崩溃"><a href="#主机崩溃" class="headerlink" title="主机崩溃"></a>主机崩溃</h2><p>知道了 TCP keepalive 作用，我们看看「主机崩溃」这种情况。</p><blockquote><p>在没有开启 TCP keepalive，且双方一直没有数据交互的情况下，如果客户端的「主机崩溃」了，会发生什么。</p></blockquote><p>客户端主机崩溃了，服务端是<strong>无法感知到的</strong>，在加上服务端没有开启 TCP keepalive，又没有数据交互的情况下，<strong>服务端的 TCP 连接将会一直处于 ESTABLISHED 连接状态</strong>，直到服务端重启进程。</p><p>所以，我们可以得知一个点，在没有使用 TCP 保活机制且双方不传输数据的情况下，一方的 TCP 连接处在 ESTABLISHED 状态，并不代表另一方的连接还一定正常。</p><h2 id="进程崩溃"><a href="#进程崩溃" class="headerlink" title="进程崩溃"></a>进程崩溃</h2><blockquote><p>那题目中的「进程崩溃」的情况呢？</p></blockquote><p>TCP 的连接信息是由内核维护的，所以当服务端的进程崩溃后，内核需要回收该进程的所有 TCP 连接资源，于是内核会发送第一次挥手 FIN 报文，后续的挥手过程也都是在内核完成，并不需要进程的参与，所以即使服务端的进程退出了，还是能与客户端完成 TCP四次挥手的过程。</p><p>我自己做了实验，使用 kill -9 来模拟进程崩溃的情况，发现<strong>在 kill 掉进程后，服务端会发送 FIN 报文，与客户端进行四次挥手</strong>。</p><p>所以，即使没有开启 TCP keepalive，且双方也没有数据交互的情况下，如果其中一方的进程发生了崩溃，这个过程操作系统是可以感知的到的，于是就会发送 FIN 报文给对方，然后与对方进行 TCP 四次挥手。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>客户端拔掉网线后，并不会直接影响 TCP 连接状态。所以，拔掉网线后，TCP 连接是否还会存在，关键要看拔掉网线之后，有没有进行数据传输。</p><p>有数据传输的情况：</p><ul><li>在客户端拔掉网线后，如果服务端发送了数据报文，那么在服务端重传次数没有达到最大值之前，客户端就插回了网线，那么双方原本的 TCP 连接还是能正常存在，就好像什么事情都没有发生。</li><li>在客户端拔掉网线后，如果服务端发送了数据报文，在客户端插回网线之前，服务端重传次数达到了最大值时，服务端就会断开 TCP 连接。等到客户端插回网线后，向服务端发送了数据，因为服务端已经断开了与客户端相同四元组的 TCP 连接，所以就会回 RST 报文，客户端收到后就会断开 TCP 连接。至此， 双方的 TCP 连接都断开了。</li></ul><p>没有数据传输的情况：</p><ul><li>如果双方都没有开启 TCP keepalive 机制，那么在客户端拔掉网线后，如果客户端一直不插回网线，那么客户端和服务端的 TCP 连接状态将会一直保持存在。</li><li>如果双方都开启了 TCP keepalive 机制，那么在客户端拔掉网线后，如果客户端一直不插回网线，TCP keepalive 机制会探测到对方的 TCP 连接没有存活，于是就会断开 TCP 连接。而如果在 TCP 探测期间，客户端插回了网线，那么双方原本的 TCP 连接还是能正常存在。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basis of computer engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQTT数据包结构</title>
      <link href="/2024/03/18/mqtt-shu-ju-bao-jie-gou/"/>
      <url>/2024/03/18/mqtt-shu-ju-bao-jie-gou/</url>
      
        <content type="html"><![CDATA[<h3 id="MQTT协议数据包结构"><a href="#MQTT协议数据包结构" class="headerlink" title="MQTT协议数据包结构"></a>MQTT协议数据包结构</h3><h4 id="1-结构组成"><a href="#1-结构组成" class="headerlink" title="1. 结构组成"></a>1. 结构组成</h4><p>官方文档中对于MQTT协议包的结构有着具体的说明：<a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html">https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html</a></p><p>在MQTT协议中，一个MQTT数据包由：固定头（Fixed header）、可变头（Variable header）、消息体 （payload）三部分构成。MQTT数据包结构如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b88d9d1e24ea4f409fe223566d5516d9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="MQTT数据包结构"></p><ul><li>（1）固定头（Fixed header）。存在于所有MQTT数据包中，表示数据包类型及数据包的分组类标识，如连接，发布，订阅，心跳等。其中固定头是必须的，所有类型的MQTT协议中，都必须包含固定头。</li><li>（2）可变头（Variable header）。存在于部分MQTT数据包中，数据包类型决定了可变头是否存在及其具体内容。可变头部不是可选的意思，而是指这部分在有些协议类型中存在，在有些协议中不存在。</li><li>（3）消息体（Payload）。存在于部分MQTT数据包中，表示客户端收到的具体内容。 与可变头一样，在有些协议类型中有消息内容，有些协议类型中没有消息内容。</li></ul><h4 id="2-固定头（Fixed-header）"><a href="#2-固定头（Fixed-header）" class="headerlink" title="2. 固定头（Fixed header）"></a>2. 固定头（Fixed header）</h4><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d94628270e84bc5a6cd94684d37c026~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="固定头结构"></p><p>固定头存在于所有MQTT数据包中， 固定头包含两部分内容，首字节(字节1)和剩余消息报文长度(从第二个字 节开始，长度为1-4字节)，剩余长度是当前包中剩余内容长度的字节数，包括变量头和有效负载中的数据）。剩余 长度不包含用来编码剩余长度的字节。</p><p>剩余长度使用了一种可变长度的结构来编码，这种结构使用单一字节表示0-127的值。大于127的值如下处 理。每个字节的低7位用来编码数据，最高位用来表示是否还有后续字节。因此每个字节可以编码128个值，再加 上一个标识位。剩余长度最多可以用四个字节来表示。</p><h5 id="1-数据包类型"><a href="#1-数据包类型" class="headerlink" title="1. 数据包类型"></a>1. 数据包类型</h5><p>位置：第一个字节(Byte 1) 中的7-4个bit位(Bit[7-4])，表示4位无符号值</p><p>通过第一个字节的高4位确定消息报文的类型，4个bit位能确定16种类型，其中0000和1111是保留字段。 MQTT消息报文类型如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1144f02016c7498a95fd4f549cff2f8d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="类型示意图"></p><h5 id="2-标志位"><a href="#2-标志位" class="headerlink" title="2.标志位"></a>2.标志位</h5><p>位置：第一个字节中的0-3个bit位(Bit[3-0])。意思是字节位Bit[3-0]用作报文的标识。</p><p>首字节的低4位(bit3~bit0)用来表示某些报文类型的控制字段，实际上只有少数报文类型有控制位，如下图：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f465d3554b514f1bb3e40ba964418bd9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="标志位示意图"></p><ul><li><p>（1）：其中Bit[3]为DUP字段，如果该值为1，表明这个数据包是一条重复的消息；否则该数据包就是第一次发布的消息。</p></li><li><p>（2）：Bit[2-1]为Qos字段：</p><ul><li><p>如果Bit 1和Bit 2都为0，表示QoS 0：至多一次；</p></li><li><p>如果Bit 1为1，表示QoS 1：至少一次；</p></li><li><p>如果Bit 2为1，表示QoS 2：只有一次；</p></li><li><p>如果同时将Bit 1和Bit 2都设置成1，那么客户端或服务器认为这是一条非法的消息，会关闭当前连接。</p></li></ul></li></ul><p>目前Bit[3-0]只在PUBLISH协议中使用有效，并且表中指明了是MQTT 3.1.1版本。对于其它MQTT协议版 本，内容可能不同。所有固定头标记为”保留”的协议类型，Bit[3-0]必须保持与表中保持一致，如SUBSCRIBE 协议，其Bit 1必须为1。如果接收方接收到非法的消息，会强行关闭当前连接。</p><h5 id="3-MQTT消息QoS"><a href="#3-MQTT消息QoS" class="headerlink" title="3. MQTT消息QoS"></a>3. MQTT消息QoS</h5><p>MQTT发布消息服务质量保证（QoS）不是端到端的，是客户端与服务器之间的。订阅者收到MQTT消息的 QoS级别，最终取决于发布消息的QoS和主题订阅的QoS。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/917be1e6ad3545b389fa7c8787209b04~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="接收消息Qos级别"></p><p>Bit[0]为RETAIN字段，发布保留标识，表示服务器要保留这次推送的信息，如果有新的订阅者出现， 就把这消息推送给它，如果设有那么推送至当前订阅者后释放。</p><h4 id="3-可变头-Variable-Header"><a href="#3-可变头-Variable-Header" class="headerlink" title="3. 可变头(Variable Header)"></a>3. 可变头(Variable Header)</h4><p>可变头的意思是可变化的消息头部。有些报文类型包含可变头部有些报文则不包含。可变头部在固定头部和消 息内容之间，其内容根据报文类型不同而不同。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b384403205e431a9a39190f9096ee92~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="可变头结构"></p><h5 id="1-协议名"><a href="#1-协议名" class="headerlink" title="1. 协议名"></a>1. 协议名</h5><p>协议名是表示协议名MQTT的UTF-8编码的字符串。MQTT规范的后续版本不会改变这个字符串的偏移和 长度。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3add6f1e0c1441f8d2622c4c1142b1f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="协议名说明"></p><p>支持多种协议的服务端使用协议名字段判断数据是否为MQTT报文。协议名必须是UTF-8字符串“MQTT”。如果服务端不愿意接受CONNECT但希望表明其MQTT服务端身份，可以发送包含原因码为0x84（不支持的协议版本）的CONNACK报文，然后必须关闭网络连接</p><h5 id="2-协议版本"><a href="#2-协议版本" class="headerlink" title="2. 协议版本"></a>2. 协议版本</h5><p>位无符号值表示客户端的版本等级。3.1.1版本的协议等级是4，MQTT v5.0的协议版本字段为5（0x05）</p><h5 id="3-MQTT会话-Clean-Session"><a href="#3-MQTT会话-Clean-Session" class="headerlink" title="3. MQTT会话(Clean Session)"></a>3. MQTT会话(Clean Session)</h5><p>MQTT客户端向服务器发起CONNECT请求时，可以通过’Clean Session’标志设置会话。</p><ul><li><code>Clean Session</code>设置为0，表示创建一个持久会话，在客户端断开连接时，会话仍然保持并保存离线消息，直到会话超时注销。</li><li><code>Clean Session</code>设置为1，表示创建一个新的临时会话，在客户端断开时，会话自动销毁。</li></ul><p><strong>1.Will Flag/Will Qos/Will Retain</strong></p><p>如果Will Flag被设置为1，这意味着，如果连接请求被接受，服务端必须存储一个Will Message，并和网 络连接关联起来。之后在网络连接断开的时候必须发布Will Message，除非服务端收到DISCONNECT包删掉 了Will Message</p><p>Will Message会在某些情况下发布，包括但不限于：</p><ul><li>服务端发现I/O错误或网络失败。</li><li>客户端在Keep Alive时间内通信失败。</li><li>客户端没有发送DISCONNECT包就关闭了网络连接。</li><li>服务端因协议错误关闭了网络连接。 如果Will Flag被设置为1，连接标识中的Will QoS和Will Retain字段将会被服务端用到</li></ul><p>Will QoS这两个bit表示发布Will Message时使用QoS的等级</p><p>Will Retain这个bit表示Will Message在发布之后是否需要保留。</p><p>如果Will Flag设置为0，那么Will Retain必须是0</p><p>如果Will Flag设置为1：</p><ul><li>如果Will Retain设置为0，那么服务端必须发布Will Message，不必保存</li><li>如果Will Retain设置为1，那么服务端必须发布Will Message，并保存</li></ul><p><strong>2. User Name Flag</strong></p><ul><li>如果User Name Flag设置为0，那么用户名不必出现在载荷中</li><li>如果User Name Flag设置为1，那么用户名必须出现在载荷中</li></ul><p><strong>3. Password Flag</strong></p><ul><li>如果Password Flag设置为0，那么密码不必出现在载荷中</li><li>如果Password Flag设置为1，那么密码必须出现在载荷中</li><li>如果User Name Flag设置为0，那么Password Flag必须设置为0</li></ul><p><strong>4. MQTT连接保活心跳</strong></p><p>心跳的作用：</p><pre class=" language-diff"><code class="language-diff">PINGREQ包从客户端发往服务端，可以用来：<span class="token deleted">- 1：在没有其他控制包从客户端发送给服务端的时候，告知服务端客户端的存活状态。</span><span class="token deleted">- 2：请求服务端响应，来确认服务端是否存活。</span><span class="token deleted">- 3：确认网络连接的有效性。</span>PINGRESP包从服务端发送给客户端来响应PINGREQ包。它代表服务端是存活的。</code></pre><p>MQTT客户端向服务器发起CONNECT请求时，通过KeepAlive参数设置保活周期。</p><p>Keep Alive是以秒为单位的时间间隔。用2字节表示，它指的是客户端从发送完成一个控制包到开始发送 下一个的最大时间间隔。客户端有责任确保两个控制包发送的间隔不能超过Keep Alive的值。如果没有其他 控制包可发，客户端必须发送PINGREQ包</p><p>客户端可以在任何时间发送PINGREQ包，不用关心Keep Alive的值，用PINGRESP来判断与服务端的网络连接是否正常。</p><p>如果Keep Alive的值非0，而且服务端在一个半Keep Alive的周期内没有收到客户端的控制包，服务端必须作为网络故障断开网络连接</p><p>如果客户端在发送了PINGREQ后，在一个合理的时间都没有收到PINGRESP包，客户端应该关闭和服务端的网络连接。</p><p>Keep Alive的值为0，就关闭了维持的机制。这意味着，在这种情况下，服务端不会断开静默的客户端。</p><p><strong>5. MQTT遗愿消息(Last Will)</strong></p><p>MQTT客户端向服务器端CONNECT请求时，可以设置是否发送遗愿消息(Will Message)标志，和遗愿消息主题(Topic)与内容(Payload)。</p><p>MQTT客户端异常下线时(客户端断开前未向服务器发送DISCONNECT消息)，MQTT消息服务器会发布遗愿消息。</p><p>常见的一种可变头比如：Packet Identifier(消息ID)</p><p>一个消息ID包含2字节，高字节在前，低字节在后。包含Packet Identifier的协议类型包括：</p><p>PUBLISH( QoS &gt; 0 )、 PUBACK 、 PUBREC 、 PUBREL 、 PUBCOMP 、 SUBSCRIBE 、 SUBACK 、 UNSUBSCRIBE 、 UNSUBACK</p><p>消息ID默认是从1开始并自增，如果一个消息ID被用完后，这个消息ID可以被重用。对于PUBLISH (QoS 1)来 说，如果发送端接收到PUBACK，那么这个消息ID就用完了。对于PUBLISH(QoS 2)，如果接收方收到PUBCOMP，那么这个消息ID就用完了。对于SUBSCRIBE和UNSUBSCRIBE，消息ID使用完成的标记是发送方收到了对应的SUBACK和UNSUBACK。</p><p>另外客户端和服务端的消息ID是独立分配的，客户端和服务端可以同时使用同一个消息ID。</p><h4 id="4-消息体-Payload"><a href="#4-消息体-Payload" class="headerlink" title="4. 消息体(Payload)"></a>4. 消息体(Payload)</h4><p>有些报文类型是包含Payload的，Payload意思是消息载体的意思</p><p>如PUBLISH的Payload就是指消息内容（应用程序发布的消息内容）。而CONNECT的Payload则包含Client Identifier，Will Topic，Will Message，Username，Password等信息。</p><p>包含payload的报文类型如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ceae89d2f7f4e7da4a0685ff832d6a1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="消息体结构"></p><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>我们介绍了MQTT协议的消息格式，MQTT消息格式包含Fixed Header， Variable Header和Payload。 因为MQTT消息格式非常精简，所以可以高效的传输数据。</p><p>Fixed Header中包含首字节，高4位用来表示报文类型，低4位用于类型控制。目前只有PUBLISH使用了类型 控制字段。其它控制字段被保留并且必须与协议定义保持一致。</p><p>Fixed Header同时包含Remaining Length，这是剩余消息长度，最大长度为4字节，理论上一条MQTT最大可 以传输256MB数据。Remaining Length=Variable Header+Payload长度。</p><p>Variable Header是可变头部，有些报文类型中需要包含可变头部，可变头部根据报文类型不同而不同。比如 Packet Identifier在发布，订阅/取消订阅等报文中都使用到。</p><p>Payload是消息内容，也只在某些报文类型中出现，其内容和格式也根据报文类型不同而不同。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basis of computer engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解UDP</title>
      <link href="/2024/03/13/shen-ru-liao-jie-udp/"/>
      <url>/2024/03/13/shen-ru-liao-jie-udp/</url>
      
        <content type="html"><![CDATA[<h3 id="UDP基本特性"><a href="#UDP基本特性" class="headerlink" title="UDP基本特性"></a>UDP基本特性</h3><p>我们说UDP提供无连接的服务，因为UDP客户与服务器之间不必存在任何长期的关系。举例来说，一个UDP客户可以创建一个套接字并发送一个数据报给一个给定的服务器，然后立即用同一个套接字发送另一个数据包给另外一个服务器。同样地，一个UDP服务器可以用同一个UDP套接字从若干个不同的客户接收数据报，每个客户一个数据报。</p><p>客户不与服务器建立连接，而是只管使用sendto函数给服务器发送数据报，其中必须指定目的地的地址作为参数。类似的，服务器不接受来自客户的连接，而是只管调用recvfrom函数，等待来自某个客户的数据到达。</p><h3 id="服务器进程未运行"><a href="#服务器进程未运行" class="headerlink" title="服务器进程未运行"></a>服务器进程未运行</h3><blockquote><p>这是问题的情景，用户有时会出现在服务器没有启动的时候，去点击切换LED大屏输入源</p></blockquote><p>在不启动服务器的前提下启动客户。如果我们这么做后在客户上键入一行文本，那么什么也不发生。首先我们注意到，在客户主机能够往服务器主机发送那个UDP数据报之前，需要一次ARP请求和应答的交换。可以知道客户数据报发出，服务器主机响应的是一个“port unreachable”（端口不可达）ICMP消息。不过这个ICMP错误不返回给客户进程。</p><p>我们称这个ICMP错误为异步错误。该错误由sendto引起，但是sendto本身却成功返回。UDP输出操作成功返回仅仅表示在接口输出队列（数据链路层的输出队列）中具有存放所形成IP数据报的空间。</p><p>除非套接字已连接，否则异步错误是不会返回到UDP套接字的。然而这样做的结果却与TCP连接大相径庭：没有三次握手过程。内核只是检查是否存在立即可知的错误（例如一个显然不可达的目的地），记录对端的IP地址和端口号（取自传递给connect的套接字地址结构），然后立即返回到调用进程。</p><p>有了这个能力后，对于已连接UDP套接字，与默认的未连接UDP套接字相比，发生了三个变化。</p><ol><li><p>我们再也不能给输出操作指定目的IP地址和端口号。也就是说，我们不使用sendto，而改用write或send。写到已连接UDP套接字的任何内容都自动发送到由connect指定的协议地址。</p></li><li><p>我们不必使用recvfrom以获悉数据包的发送者，而改用read、recv或recvmsg。在一个已连接UDP套接字上，由内核输入操作返回的数据报只有那些来自connect所指定协议地址的数据报。这样就限制一个已连接UDP套接字能且仅能与一个对端交换数据报。</p><blockquote><p>确切地说，一个已连接UDP套接字仅仅与一个IP地址交换数据报，因为connect到多播或广播地址是不可能的。</p></blockquote></li><li><p>由已连接UDP套接字引发的异步错误会返回给它们所在的进程，而未连接UDP套接字不接受任何异步错误。</p></li></ol><p>具体流程是：</p><p>应用程序首先调用connect指定对端的IP地址和端口号，然后使用read和write与对端进程交换数据。</p><p>来自任何其他IP地址或端口的数据报不投递给这个已连接套接字，因为它们要么源IP地址要么源UDP端口不与该套接字connect到的协议地址相匹配。这些数据报可能投递给同一个主机上的其他某个UDP套接字。如果没有相匹配的其他套接字，UDP将丢弃它们并生成相应的ICMP端口不可达错误。</p><p>我们可以说UDP客户进程或服务器进程只在使用自己的UDP套接字与确定的唯一对端进行通信时，才可以调用connect。调用connect的通常是UDP客户，不过有些网络应用中的UDP服务器会与单个客户长时间通信（TFTP），这种情况下，客户和服务器都可能调用connect。</p><p><strong>如果给一个UDP套接字多次调用connect</strong></p><p>拥有一个已连接UDP套接字的进程可出于下列两个目的之一再次调用connect：</p><ul><li>指定新的IP地址和端口号</li><li>断开套接字</li></ul><p>第一个目的不同于TCP套接字中connect的的使用：对于TCP套接字，connect只能调用一次。</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>当应用进程在一个未连接的UDP套接字上调用sendto时，源自Berkeley的内核暂时连接该套接字，发送数据报，然后断开该连接。在一个未连接的UDP套接字上给两个数据报调用sendto函数涉及内核执行下列6个步骤：</p><ul><li>连接套接字</li><li>输出第一个数据报</li><li>断开套接字连接</li><li>连接套接字</li><li>输出第二个数据报</li><li>断开套接字连接</li></ul><p>当应用进程知道自己要给同一目的地址发送多个数据报时，显式连接套接字效率更高。调用connect后调用两次write涉及内核执行如下步骤：</p><ul><li>连接套接字</li><li>输出第一个数据报</li><li>输出第二个数据报</li></ul><p>在这种情况下，内核只复制一次含有目的IP地址和端口号的套接字地址结构，相反当调用两次sendto时，需复制两次。 </p><h3 id="关于TCP输出"><a href="#关于TCP输出" class="headerlink" title="关于TCP输出"></a>关于TCP输出</h3><p>当某个应用进程调用write时，内核从该应用进程的缓冲区中复制所有数据到所写套接字的发送缓冲区。如果该套接字的发送缓冲区容不下该应用进程的所有数据（或是应用进程的缓冲区大于套接字的发送缓冲区，或是套接字的发送缓冲区已有其他数据），该应用进程将被投入睡眠。内核将不从write系统调用返回，直到应用进程缓冲区中的所有数据都复制到套接字发送缓冲区。因此，从写一个TCP套接字的write调用成功返回仅仅表示我们可以重新使用原理的应用进程缓冲区，并不表明对端的TCP或应用进程已接收到数据。</p><p>对端TCP必须确认收到的数据，伴随来自对端的ACK的不断到达，本端TCP至此才能从套机字发送缓冲区中丢弃已确认的数据。TCP必须为已发送的数据保留一个副本，直到它被对端确认为止。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basis of computer engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【译文】MQTT会话过期时间和消息过期时间</title>
      <link href="/2024/03/07/mqtt-hui-hua-guo-qi-shi-jian-he-xiao-xi-guo-qi-shi-jian/"/>
      <url>/2024/03/07/mqtt-hui-hua-guo-qi-shi-jian-he-xiao-xi-guo-qi-shi-jian/</url>
      
        <content type="html"><![CDATA[<p>原文：<a href="https://link.juejin.cn/?target=https://www.hivemq.com/blog/mqtt5-essentials-part4-session-and-message-expiry/">https://link.juejin.cn/?target=https%3A%2F%2Fwww.hivemq.com%2Fblog%2Fmqtt5-essentials-part4-session-and-message-expiry%2F</a></p><p>作者: Florian Raschbichler<br>发布时间: 2019年10月16日<br>更新于: 2023年6月29日</p><h2 id="会话过期间隔和消息过期间隔在MQTT-5是如何运作的"><a href="#会话过期间隔和消息过期间隔在MQTT-5是如何运作的" class="headerlink" title="会话过期间隔和消息过期间隔在MQTT 5是如何运作的?"></a>会话过期间隔和消息过期间隔在MQTT 5是如何运作的?</h2><p>让我们分别拆解和分析这两个整数类型的过期时间特性。</p><h3 id="会话过期时间"><a href="#会话过期时间" class="headerlink" title="会话过期时间"></a>会话过期时间</h3><p>会话过期时间是一个以秒为单位的参数，由客户端在CONNECT阶段设置完成。其表示代理服务器保留客户端会话信息的时长。如果间隔设置为0，或者在CONNECT阶段没有设置过期值，那么客户端网络通信一旦终止，代理服务器会立即删除会话数据。 注意，最大会话过期时间值是 <code>UINT_MAX</code> (4,294,967,295), 这使得离线会话在客户端断开连接后能够维持持久化超过136年的时间。</p><p><img src="https://www.hivemq.com/img/blog/connect-packet-session-expiry.png" alt="会话过期时间是定义在CONNECT数据包中的"></p><h3 id="消息过期时间"><a href="#消息过期时间" class="headerlink" title="消息过期时间"></a>消息过期时间</h3><p>使用MQTT 5, 客户端可以对每条PUBLISH数据包设置一个以秒为单位的消息过期时间。此间隔时间代表着非离线状态下，代理服务器维护PUBLISH数据包的时长。如果没有定义消息过期时间，代理服务器会为所有的已匹配主题的订阅者无限期的保留信息，甚至已处于断开状态的订阅者也是如此。而且，如果在发送PUBLISH数据时，选择了‘retained=true’, 消息过期时间还能决定在特定主题上保留消息的时间长度。</p><p><img src="https://www.hivemq.com/img/blog/publish-packet-message-expiry.png" alt="Message Expiry Interval in PUBLISH packet"></p><h2 id="为什么引入过期时间呢"><a href="#为什么引入过期时间呢" class="headerlink" title="为什么引入过期时间呢?"></a>为什么引入过期时间呢?</h2><p>不仅要理解“过期时间”功能，也要探索这些特性纳入MQTT 5规范的原因以及它们实际应用程序中的使用。</p><p>在<a href="https://juejin.cn/post/7280008213672034319">介绍MQTT 5协议</a>文章中, 我们领会了OASIS委员会审议过程的精神，最终在2019年3月将MQTT 5确立为标准。作为这个委员会的成员之一，HiveMQ感到非常骄傲，HiveMQ积极收集用户反馈，了解MQTT 3.1和3.1.1版本用户的长期需求，并决定如何最好地发展协议。主要的推动力是引入了一些特性，这些特性扩大了用户的使用场景，增强了用户使用协议的简单性。</p><h3 id="会话过期时间-1"><a href="#会话过期时间-1" class="headerlink" title="会话过期时间"></a>会话过期时间</h3><p>MQTT 5中的会话过期时间巧妙地实现了两个重要需求。MQTT的早期版本为了删除<a href="https://link.juejin.cn/?target=https://www.hivemq.com/blog/mqtt-essentials-part-7-persistent-session-queuing-messages/">持久性会话</a>仅提供了一个单一路径: 当客户端需要丢弃一个会话时，客户端不得不使用<code>cleanSession=true</code>标志来重新连接一次代理服务器。</p><p>由于停用，破坏，或者负载测试后的不充分清理会话，导致IoT设备绝不会重新连接，这些剩余会话可能会对代理服务器的持久性造成不必要的负担。像HiveMQ这样的企业级MQTT代理服务器配备了复杂的管理工具，如HiveMQ 控制中心，以便于管理空闲会话。尽管如此，辨别哪些会话可以有效地删除仍然是至关重要的。</p><blockquote><p>MQTT 5加入的会话过期时间特性，直观的允许用户指定一个合理的持续时间，之后代理服务器会自动清除空闲会话，从而释放有价值的资源。</p></blockquote><p>除了这种自动清理功能之外，会话过期时间还极大地简化了会话状态管理。<a href="https://link.juejin.cn/?target=https://www.eclipse.org/community/eclipse_newsletter/2016/september/article3.php">Ian Craggs</a> 慷慨地提供了两个图表来说明状态转换中复杂性的降低。这种可视化强调了这个新特性如何有助于简化状态转换和提高用户效率。</p><p><img src="https://www.hivemq.com/img/blog/mqtt-3-state-transition-v2.png" alt="De-cluttering of state transition in MQTT 3.1.1 and MQTT 5 (courtesy of Ian Craggs)"></p><h2 id="消息过期时间-1"><a href="#消息过期时间-1" class="headerlink" title="消息过期时间"></a>消息过期时间</h2><p>与MQTT 5协议起草类似，“会话过期时间”的起因是为了一个自动化维护机制需求而被推动的。想想无数的IoT设备，如：为了抵御长时间的网络断开而设计的互联网汽车。MQTT为这些具有持久会话和消息排队的场景提供了基础保障。</p><p>为离线设备精心准备的消息会存储在代理服务器上，等待设备恢复连接以进行传递。在大规模部署中，连接设备的数量升级到数千甚至数百万，因此必须单独约束每个客户端的离线消息队列。</p><p>与IoT设备相关的信息有效期可能会出现显著的波动。以互联网汽车为例: 交通更新只能短暂地保持其相关性。然而，当我们考虑无线固件升级时，即使汽车长时间处于离线状态，延长到几个星期，也需要执行这些升级。</p><blockquote><p>MQTT 5中的消息过期时间是管理这些不同时间框架的完美工具，增加了协议的通用性</p></blockquote><p><img src="https://www.hivemq.com/img/blog/message-expiry-car-example.png" alt="Connected car example"></p><p>例如: 交通堵塞警报通常在1-2小时后就会过时，但是固件更新应该可以持续好几周。消息过期是定义这些不同时间段的完美特性。</p><p>为需要有时间有效期的消息分配一个最佳消息过期时间，同时保留没有任何无有效期限制的相关消息, 对于长时间离线的客户端来讲，我们能确保高效的利用代理服务器资源。这种策略还避免了客户端在重新连接时被不相关的消息淹没。</p><blockquote><p>对于保留消息，消息过期时间操作类似，保证这些消息只在指定的时间段内发送给新订阅方。</p></blockquote><p>但是，需要注意的一个重要方面是，当客户端的会话过期时，该客户端的所有排队消息也会与会话同步过期，而不管它们各自的消息过期状态如何。这个“陷阱”是对MQTT协议中会话及其排队消息的相互联系的重要提醒。</p><h2 id="关于使用MQTT-5会话过期时间和消息过期时间的重要提示"><a href="#关于使用MQTT-5会话过期时间和消息过期时间的重要提示" class="headerlink" title="关于使用MQTT 5会话过期时间和消息过期时间的重要提示"></a>关于使用MQTT 5会话过期时间和消息过期时间的重要提示</h2><p>一些重要信息:</p><ul><li>会话过期时间和消息过期时间都有助于完善MQTT代理服务器上的资源管理</li><li>回顾过去，许多MQTT 3用户表示需要有效期特性。HiveMQ通过在我们的MQTT平台中引入了会话和消息过期时间作为补充特性来响应这一需求，这早于它们在MQTT 5中的标准化</li><li>在MQTT 3的CONNECT 数据包中，cleanSession=true 等价于 sessionExpury = 0(或不存在) ，而在 MQTT 5中则是cleanStart = true。</li><li>同样，MQTT 3的CONNECT数据包中“cleanSession=false” 会在MQTT 5中找到其对应的 sessionExpire值，该值大于零，并通过“cleanStart=false”表示</li><li>MQTT代理服务器(例如 HiveMQ)提供了在服务器端为这些过期时间配置最大值的能力。这个特性在多供应商项目中非常方便，特别是当代理服务器操作员可能缺乏对MQTT客户端设置权限时。</li></ul><p>MQTT 5的出现引入了一系列旨在增强协议的可用性、灵活性和效率的新特性。会话过期时间和消息过期时间是这方面的主要例子，它们在资源管理和确保MQTT代理服务器的顺利运行方面，起到了非常有价值的工具的作用。这两个特性都真正体现了MQTT标准以用户为中心的演变，展示了它对用户需求和挑战的响应能力。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basis of computer engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于工作第一年的一些事情</title>
      <link href="/2024/01/13/yun-chang-guan-nian-du-zong-jie/"/>
      <url>/2024/01/13/yun-chang-guan-nian-du-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="云场馆年终报告"><a href="#云场馆年终报告" class="headerlink" title="云场馆年终报告"></a>云场馆年终报告</h1><p>我自己的工作内容和成绩已经在项目开发历程总结说明了，就不多逼逼。这份年终报告主要针对的是云场馆项目今年遇到的问题来阐述。</p><h2 id="定位问题："><a href="#定位问题：" class="headerlink" title="定位问题："></a>定位问题：</h2><p>云场馆的定位需要尽快确认下来，我说的是最核心的定位。我们要为客户提供什么？怎么在市场上吃下份额？要知道有所为而有所不为，我认为我们一开始是有自己定位的，但是被项目搞得焦头烂额，什么都想吃什么都想要。</p><p>下面我主要分为两部分来说明：</p><p>第一个需要明确我们最想要拿下哪些客户？这些客户的最主要痛点是什么？我们最大的优势是什么？我们有什么资源可以支持我们拿下市场份额？</p><p>第二个需要确认的是我们是想要用关系去拿下客户？还是想要用产品去拿下客户？</p><p><strong>第一部分：</strong></p><p>我们现在的主要客户是百校项目，这些客户的主要都是需求多媒体部分的控制，而关于设备部分控制是比较少的。诸如每个项目都需要灯光控制，LED大屏控制，音响控制，而体育设备的控制并不是每个项目都有，有的话也很少。</p><p>我们最大的优势是体育设施设备，这里面的核心是座椅和看台。以此看来，我们和多媒体完全不着边。这导致什么？基本需要外协。以此可见，百校项目完全可以放弃，因为和我们的定位不符合，我们一开始设计的领先慧馆家智慧管理系统的主要功能包括：</p><ul><li>场馆管控：包括场馆监控、模式转换、体育设备管理、非体育设备管理（空调与灯光）</li><li>养护商城：包括售后服务、商城中心</li><li>养护学堂：包括最新行业资讯、设备操作知识与养护知识</li><li>员工管理</li></ul><p>可以看见完全没有多媒体方面的设计。那百校项目又这么大，这是我们一开始的定位出问题？还是市场的问题？</p><p>如果是我们定位问题，那么这个属于重大失误，说明在一开始设计系统的时候，完全没有进行市场调研，完全不了解市场的痛点。</p><p>如果是市场问题，那么百校项目就不要接，不要去做，因为不是我们的目标客户。</p><p><strong>第二部分：</strong></p><p>现在来说说我们想要用关系拿下客户？还是想要用产品拿下客户？</p><p>我首先需要说明的是，这两者不是对立关系。而是侧重点的问题，这两者花费的成本我认为都差不多，那么选择哪一条路是需要思考的。</p><p><strong>首先</strong>说说靠关系拿下客户，这条路的侧重点就主要是打好客户关系了，怎么打好关系不在本文的讨论范围中。我想要说的是，这条路的产品要怎么交付？</p><p>主要是外协，做资源整合商和中间商，也就是润声老刘那条路子。</p><p>我们直接找技术厂家帮我们开发，这个技术路径是宝业恒，河北宏康集团走的技术路径，从多媒体中控系统演变而来的多功能体育馆中控系统。（注意：本文不聊具体的技术路径。宏康集团会在下文在说明，因为和我们很像。）</p><p>我们当技术二道贩子，赚取中间商的差价。这部分的重点就是在关系了，因为我们有渠道，没有技术。而技术厂家有技术，没有渠道，我们和他们互补。</p><p>优点是可以快速拿下市场，前期投入成本不高。</p><p>当然缺点也很明显，我们的渠道关系够硬吗？要是哪一天技术厂家也有渠道了，不鸟我们了怎么办？而且利润也不多，因为只是赚取中间商差价。</p><p><strong>接下来</strong>说一下靠产品拿下客户，这条路就需要我们自己组建技术团体，并且有着敏锐的市场嗅觉。首先最重要的是产品规划一定不能错，因为走错了弯路，花的冤枉钱不是我们这种没融资的小公司能够承受的。</p><p>这个需要产品经理牛逼一点，技术团队至少需要一个大牛。一方面能够打磨好产品细节，把控好产品方向。另一方面有技术大牛可以带领团队实现这个产品，毕竟好产品实现不了，都是吹牛逼。</p><p>优点就是有自己的壁垒，竞争对手想要来吃一口市场份额，得掂量掂量自己的产品打得过我们吗？而且后续的成本会比较低，先发优势明显，龙头老大还是可以竞争一下的。</p><p>缺点就是前期投入成本过高，我看悬。而且目前团队里面个个水货，产品不是好产品，技术不是好技术，完犊子。</p><h2 id="部门墙问题："><a href="#部门墙问题：" class="headerlink" title="部门墙问题："></a>部门墙问题：</h2><p>主要体现在沟通不畅，协作困难，都按照各自部门的规则办事，不考虑公司整体利益。但是不让客户满意，他会考虑这是哪个部门的问题吗？他会觉得是整个公司不行，整个公司垃圾。</p><p>我们从具体项目来分析一下：</p><p>当一个新项目来的时候，此时最需要的是什么？最需要的是需求分析，分析这个项目客户有什么需求，我们能不能做？确定好需求后，第一件事就是撰写需求文档，这个需求文档，不单单是只有智能化部分的需求文档，而是整个项目的需求文档，这个文档至少要包括：</p><ul><li>项目是什么？项目的场景是什么？（一两句话写清楚项目需要哪些东西，涉及到哪些部门）</li><li>项目的方案设计阶段大概应该怎么做？</li><li>方案设计阶段结束后就需要进入干活阶段了，工作排期表要有吧，还有设备购买的排期表等等，这些一箩筐的罗列下来，让所有参与人员都看到，都清楚目标，清楚自己要干啥。</li><li>实施阶段大概应该怎么做？</li></ul><p>为什么要需求文档？因为有了需求文档，目标就会清晰，不会因为中间又漏了什么需求而导致项目乱套。干活的只认需求文档，就像古代的士兵只认兵符。</p><p>如何打破部门墙问题？部门墙问题无法避免的，初创公司大多使用扁平化的工作流程，不称总不叫哥，大家都是平等的。目前公司实现不了扁平化机制，要实现，不得开除一堆人。</p><p>不过关于部门墙问题，我认为有一个案例可以参考一下：</p><p>华为的铁三角：客户经理-解决方案专家-交付专家。</p><h2 id="河北宏康体育集团"><a href="#河北宏康体育集团" class="headerlink" title="河北宏康体育集团"></a>河北宏康体育集团</h2><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/image-20240113223708364.png" alt="宏康体育官网"></p><p>和我们像不像？完全是我们的翻版，那么为什么要说这家公司呢？</p><p>首先曼巴星球做的事情相信大家也清楚，就是做多功能体育设备控制的。而曼巴星球是宏康体育旗下，虽然说股权上看不清楚他们的控制关系，但是还是有一些细节可以看出来的。</p><p>而曼巴星球又与广州欧轩智能场馆有着千丝万缕的关系，这里面的股权关系也不在本文讨论范围内，主要说明的是这家公司走的路和我们一样，并且他们走得比我们快。有趣的是他们一开始的定位就是基于多媒体系统，具体情况不细聊，毕竟竞品分析不是我的工作。</p><p>贴一下人家官网：</p><p>宏康：<a href="https://www.hktiyu.com/">https://www.hktiyu.com/</a></p><p>欧轩： <a href="https://www.ouxuanzhineng.cn/">https://www.ouxuanzhineng.cn/</a></p><p>曼巴星球的链接给挂掉了，就不贴了。</p><h2 id="终话"><a href="#终话" class="headerlink" title="终话"></a>终话</h2><p>以上仅以个人看法与建议，而且有很多问题都是基于我自己的想象，如果没有问题，就当我瞎逼逼。站在00后年轻人的角度，最需要的是团队氛围感和不画饼，所谓的办公室政治，不要出现。我更希望与团队和管理者以真诚的方式来交流，不服就界限分明，服了就赴汤蹈火。</p><p>总而言之，整个项目需要避免老油条现象。</p><ul><li>技术不要专业术语满天飞，不讲人话，喜欢说一些高大上的词汇来显示自己的技术实力。需要放下技术高高在上的优越感，善于沟通。</li><li>产品不要为了迎合领导，会议上夸下海口，各种保证能实现，会后跑去找技术许愿。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 非技术问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何理解LVGL中当前事件和原始事件？</title>
      <link href="/2023/08/30/ru-he-li-jie-lvgl-zhong-dang-qian-shi-jian-he-yuan-shi-shi-jian/"/>
      <url>/2023/08/30/ru-he-li-jie-lvgl-zhong-dang-qian-shi-jian-he-yuan-shi-shi-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Fields-of-lv-event-t"><a href="#Fields-of-lv-event-t" class="headerlink" title="Fields of lv_event_t"></a>Fields of lv_event_t</h2><p><code>lv_event_t</code> 是传递给事件回调的唯一参数，它包含有关事件的所有数据。可以从中获得以下值：</p><ul><li><code>lv_event_get_code(e)</code> 获取触发的事件代码</li><li><code>lv_event_get_target(e)</code> 获取事件发送到(关联)的对象</li><li><code>lv_event_get_original_target(e)</code> 获取事件最初发送到的对象（与 <code>lv_event_get_target</code> 不同，如果 <a href="http://lvgl.100ask.net/8.2/overview/event.html#event-bubbling">event bubbling</a> 被启用）</li><li><code>lv_event_get_user_data(e)</code> 获取作为 <code>lv_obj_add_event_cb</code> 的最后一个参数传递的指针。</li><li><code>lv_event_get_param(e)</code> 获取作为 <code>lv_event_send</code> 的最后一个参数传递的参数。</li></ul><h2 id="Event-bubbling（事件冒泡）"><a href="#Event-bubbling（事件冒泡）" class="headerlink" title="Event bubbling（事件冒泡）"></a>Event bubbling（事件冒泡）</h2><blockquote><p>常用于层级间需要触发相同事件</p></blockquote><p>如果启用了 <code>lv_obj_add_flag(obj, LV_OBJ_FLAG_EVENT_BUBBLE)</code>，所有事件也将发送到对象的父级。如果父级也启用了<code>LV_OBJ_FLAG_EVENT_BUBBLE</code>，则事件也将发送到其父级，依此类推。</p><ul><li>lv_event_get_target(e);  获取事件最初针对的对象。即使事件是冒泡的，这个目标都是固定的。</li><li>lv_event_get_current_target(e);  获取事件的当前目标,这个函数返回当前处理事件的对象 。</li></ul><p>区别如下：</p><ol><li><strong>lv_event_get_target(e)</strong>:<ul><li>这个函数返回原始的事件目标，也就是事件最初被发送到的对象。无论事件如何传播或冒泡，这个目标都是固定的。</li></ul></li><li><strong>lv_event_get_current_target(e)</strong>:<ul><li>这个函数返回当前处理事件的对象。考虑一个情况，当一个事件从子对象冒泡到其父对象时，<code>lv_event_get_current_target(e)</code> 将返回父对象，而 <code>lv_event_get_target(e)</code> 仍然返回子对象。也就是说，<code>lv_event_get_current_target(e)</code> 可以在事件传播期间改变，而 <code>lv_event_get_target(e)</code> 始终是固定的。</li></ul></li></ol><p>为了更好地理解这两者的差异，考虑一个实际场景。假设你有一个按钮（button）在一个容器（container）内。当你点击按钮时，事件首先发送到按钮，然后可能冒泡到容器。</p><ul><li>如果你在容器的事件处理函数中调用 <code>lv_event_get_target(e)</code>，它将返回按钮。</li><li>但如果你调用 <code>lv_event_get_current_target(e)</code>，它将返回容器，因为容器是当前处理事件的对象。</li></ul><p>当然关于<code>lv_event_get_target(e)</code>与<code>lv_event_get_current_target(e)</code>区别，我认为爸爸理论是最好理解的：</p><p>lv_event_get_target是永远不变的，目标是固定的。用点击事件来说，点啥就是啥。开启冒泡的时候，lv_event_get_current_target是会变的，点啥就去找爸爸。</p><p>比如说get_target是谁被打，get_current_target是通知有人被打了。我是你爸爸，你被打了会来通知我。我被打了不会通知你，因为不会往下传递消息。但是被打这个事情，我们两个都有可能会发生。所以get_target可能是你，也可能是我。但是在开启冒泡的前提下，get_current_target只可能是爸爸我。而不可能是儿子。</p><blockquote><p>和啵啵斗嘴的日常，虽然啵啵很强，但是我就是不承认，这个爸爸理论是我独创！！！</p></blockquote><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/image-20240116153342229.png" alt="图图一"></p><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/image-20240116153412604.png" alt="图图二"></p>]]></content>
      
      
      <categories>
          
          <category> UI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LVGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年Java秋招面经</title>
      <link href="/2023/04/27/java-2023-mian-jing/"/>
      <url>/2023/04/27/java-2023-mian-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="2023年Java秋招面经"><a href="#2023年Java秋招面经" class="headerlink" title="2023年Java秋招面经"></a>2023年Java秋招面经</h1><h2 id="火烈鸟-优胜科技"><a href="#火烈鸟-优胜科技" class="headerlink" title="火烈鸟-优胜科技"></a>火烈鸟-优胜科技</h2><p>笔试 : </p><ul><li><p>UDP 和 TCP 的区别</p></li><li><p>线程与进程的区别</p></li><li><p>HTTP 中 301.403.502 分别是什么?</p><p>301是永久重定向, 403是服务器拒绝访问, 502是访问服务器错误</p></li><li><p>public, private, protect 的区别</p></li><li><p>float的内存空间是多少, 内存结构是什么?</p><pre class=" language-java"><code class="language-java">占用<span class="token number">4</span>个字节<span class="token punctuation">,</span> 内存结构是 <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token number">31</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token number">30</span><span class="token operator">-</span><span class="token number">23</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token number">22</span><span class="token operator">-</span><span class="token number">0</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">|</span></code></pre></li><li><p>排序算法(快速排序)</p></li><li><p>二叉树的后序遍历</p></li><li><p>Linux的查找命令</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//假设我有一个名为test.txt的文件，我需要找到它但是不确定具体位于哪个目录下。我可以执行下面的命令，从文件系统的顶部/开始搜索。</span>find <span class="token operator">/</span> <span class="token operator">-</span>type f <span class="token operator">-</span>name test<span class="token punctuation">.</span>txt<span class="token operator">/</span>表示从文件系统的顶部开始搜索。<span class="token operator">-</span>type 是你要寻找的东西的类型。f表示文件，b表示块状特殊设备文件，c表示字符特殊设备文件，d表示目录，l表示符号链接。<span class="token operator">-</span>name是你要寻找的东西的名字，结果将完全匹配。</code></pre></li><li><p>sql语句的统计查询</p></li></ul><h2 id="大管加"><a href="#大管加" class="headerlink" title="大管加"></a>大管加</h2><ul><li>A,B,C,D,E,F栈入, 出栈是B,D,C,F,E,A. 栈的容量是多少</li><li>冒泡排序的时间复杂度一定比快速排序的时间复杂度低吗?</li><li>一个网址<a href="http://www.123.com从网页上输入到返回这个页面中间发生了什么/">www.123.com从网页上输入到返回这个页面中间发生了什么</a>?</li><li>线程与进程的关系</li><li>如何提高服务器的响应速度, 说说你的方案</li><li>不考虑线程安全的情况下, 使用集合类的哪一种可以快速查找(集合的特性与选择)</li><li>redis的数据类型有哪些?</li><li>二分查找的思想</li></ul><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><ul><li><p>http 与 https 区别, 详细讲讲他们各自是什么</p></li><li><p>get请求与post请求的区别</p></li><li><p>http 的简单请求和复杂请求</p><p><strong>简单请求 :</strong></p><pre class=" language-java"><code class="language-java"><span class="token number">1</span>、请求方法是以下三种方法之一：GET、POST、HEAD。<span class="token number">2</span>、不能自定义请求头header，不得人为设置该集合之外的其他首部字段。该集合为：Accept、Accept<span class="token operator">-</span>Language、Content<span class="token operator">-</span>Language、Content<span class="token operator">-</span>Type<span class="token number">3</span>、Content<span class="token operator">-</span>Type 的值仅限于下列三者之一：text<span class="token operator">/</span>plainmultipart<span class="token operator">/</span>form<span class="token operator">-</span>dataapplication<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>http<span class="token operator">-</span>urlencoded</code></pre><p><strong>复杂请求 :</strong></p><pre class=" language-java"><code class="language-java">非简单请求即为复杂请求。复杂请求我们也可以称之为在实际进行请求之前，需要发起预检请求的请求。</code></pre><p> <strong>两者的区别 :</strong></p><pre class=" language-java"><code class="language-java">复杂请求会多发一次请求，例：我们向 <span class="token number">3000</span> 服务器发送 <span class="token string">"/getdata"</span>的get 请求，浏览器会额外发送一个<span class="token string">"/getdata"</span>的options请求，这个请求我们称为预请求，服务器也会做出“预响应”，预请求实际上是一种权限请求，只有预请求成功后，实际的请求才会执行</code></pre></li><li><p>线程与进程的区别</p></li><li><p>怎么保证线程安全</p></li><li><p>volatile 是什么</p><pre class=" language-java"><code class="language-java"><span class="token keyword">volatile</span> 是 JVM 提供的轻量级的同步机制。</code></pre></li><li><p>为什么要使用 volatile, 怎么使用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">volatile</span> 关键字可以保证并发编程三大特征（原子性、可见性、有序性）中的可见性和有序性，不能保证原子性。在变量面前加入 <span class="token keyword">volatile</span></code></pre></li><li><p>什么是可见性</p><pre class=" language-java"><code class="language-java">其他线程从主内存空间把值拷贝到自己的工作空间，线程修改之后的值会返回给主内存，主内存会通知其他线程，此为可见性。</code></pre></li><li><p>什么是有序性</p><pre class=" language-java"><code class="language-java"><span class="token keyword">volatile</span>可以使指令一个一个的执行。</code></pre></li><li><p>hashmap底层与扩容机制</p></li><li><p>你知道哪些线程安全的集合？</p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>uti包中的集合类大部分都是非线程安全的，例如：ArrayList<span class="token operator">/</span>LinkedList<span class="token operator">/</span>HashMap等等，但也有少部分是线程安全的，像是Vector和Hashtable，它们属于很古老的API了，是基于Synchronized实现的，性能很差，在实际的开发中不常用。一般可以使用collections工具类中的<span class="token function">syncheronizedXxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法将非线程安全的集合包装成线程安全的类。在java5之后可以使用concurrent包提供的大量的支持并发访问的集合类，例如ConcurrentHashMap<span class="token operator">/</span>CopyOnWriteArrayList等</code></pre></li><li><p>synchronized 的用法及原理</p><pre class=" language-java"><code class="language-java">一、用法：<span class="token number">1</span><span class="token punctuation">.</span> 静态方法上<span class="token punctuation">,</span>则锁是当前类的Class对象。 <span class="token number">2</span><span class="token punctuation">.</span> 作用在普通方法上<span class="token punctuation">,</span>则锁是当前的实例（<span class="token keyword">this</span>）。 <span class="token number">3</span><span class="token punctuation">.</span> 作用在代码块上<span class="token punctuation">,</span>则需要在关键字后面的小括号里<span class="token punctuation">,</span>显式指定一个对象作为锁对象。 能够保证同一个时刻只有一个线程执行该段代码，保证线程安全。 在执行完或者出现异常时自动释放锁。 二、原理：底层是采用Java对象头来存储锁信息的<span class="token punctuation">,</span>并且还支持锁升级。在JVM里的实现都是 基于进入和退出Monitor对象来实现方法同步和代码块同步</code></pre></li><li><p>wait 与 sleep 的区别</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span> 所属的类型不同 <span class="token operator">-</span> <span class="token function">wt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是Object类的实例方法<span class="token punctuation">,</span>调用该方法的线程将进入WTING状态。 <span class="token operator">-</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是Thread类的静态方法<span class="token punctuation">,</span>调用该方法的线程将进入TIMED_WTING状态。<span class="token number">2</span><span class="token punctuation">.</span> 对锁的依赖不同 <span class="token operator">-</span> <span class="token function">wt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>依赖于<span class="token keyword">synchronized</span>锁<span class="token punctuation">,</span>通过监视器进行调用<span class="token punctuation">,</span>调用后线程会释放锁。 <span class="token operator">-</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>不依赖于任何锁<span class="token punctuation">,</span>所以在调用后它也不会释放锁。<span class="token number">3</span><span class="token punctuation">.</span> 返回的条件不同 <span class="token operator">-</span> 调用<span class="token function">wt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>进入等待状态的线程<span class="token punctuation">,</span>需要由<span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>唤醒<span class="token punctuation">,</span>从而返回。 <span class="token operator">-</span> 调用<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>进入超时等待的线程<span class="token punctuation">,</span>需要在超时时间到达后自动返回。</code></pre></li></ul><h2 id="艾姆拜氪"><a href="#艾姆拜氪" class="headerlink" title="艾姆拜氪"></a>艾姆拜氪</h2><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><ul><li><p>假如有N个数据, 要存放到hashmap中, 初始容量要多少 ? </p><pre class=" language-java"><code class="language-java">阿里巴巴开发手册     集合初始化时<span class="token punctuation">,</span> 指定集合初始化值大小说明 <span class="token operator">:</span> HashMap 使用 <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> 初始化正例 <span class="token operator">:</span> initialCapacity <span class="token operator">=</span> <span class="token punctuation">(</span>需要存储的元素个数 <span class="token operator">/</span> 负载因子<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">.</span> 如果暂时无法确定初始值大小<span class="token punctuation">,</span> 请设置为<span class="token number">16</span>反例 <span class="token operator">:</span> HashMap 需要放置<span class="token number">1024</span>个元素<span class="token punctuation">,</span> 由于没有设置容量初始大小<span class="token punctuation">,</span> 随着元素不断增加<span class="token punctuation">,</span> 容量<span class="token number">7</span>次被迫扩大<span class="token punctuation">,</span> resize 需要重建hash表<span class="token punctuation">,</span> 严重影响性能</code></pre><p>为什么需要  + 1 ? </p><pre class=" language-java"><code class="language-java">因为扩容不是在插入前，而是在插入后进行的。如果我们不<span class="token operator">+</span><span class="token number">1</span>，指定为<span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>，则扩容阈值为<span class="token number">8</span><span class="token operator">*</span><span class="token number">0.75</span><span class="token operator">=</span><span class="token number">6</span>在我们插入最后一个即第<span class="token number">6</span>个元素后，会进行自增<span class="token number">6</span>变成<span class="token number">7</span>，<span class="token number">7</span><span class="token operator">></span>阈值<span class="token number">6</span>因此会进行扩容，而我们已经没有元素需要添加了，从而造成额外的一次扩容操作因此初始化时指定的容量应为<span class="token punctuation">(</span>需要的容量<span class="token operator">/</span>负载因子<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        例子 <span class="token operator">:</span>有<span class="token number">6</span>个元素，则HashMap的初始化容量应为<span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">/</span><span class="token number">0.75</span> <span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span>即<span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>，实际容量为比<span class="token number">9</span>大的最近的<span class="token number">2</span>的指数即<span class="token number">16</span></code></pre><p>HashMap的长度始终保持2的n次方</p></li><li><p>多线程同时运行会造成阻塞吗 ?</p><pre class=" language-java"><code class="language-java">线程阻塞的定义在多线程情况下，如果一个线程拥有某个资源的锁，那么这个线程就可以运行资源相关的代码。而其他线程就只能等待其执行完毕后，才能继续争夺资源锁，从而运行相关代码。</code></pre></li><li><p>你用到redis中的哪些数据结构 ?</p></li><li><p>Linux 命令下列出所有进程</p><pre class=" language-java"><code class="language-java">ps <span class="token operator">-</span>a</code></pre></li></ul><h2 id="华勤技术"><a href="#华勤技术" class="headerlink" title="华勤技术"></a>华勤技术</h2><h3 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h3><ul><li><p>整个后端的数据流转过程</p><pre class=" language-java"><code class="language-java"> MVC：本人理解为modal 、 view 、 controller； 当一个http请求过来之后，经过路由映射到controller，controller执行业务层代码，获得数据Modal，然后交给渲染器进行渲染视图view，最后返回给客户端一个modalAndView。 这个是SpringMvc的大致处理流程。     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li><li><p>你的项目是如何实现的鉴权 ? </p></li><li><p>对于Java反射的理解, 什么时候用过反射 ? </p></li><li><p>MySQL 中索引的好处和坏处, 都有哪些索引类型, 用过哪些 ?</p><pre class=" language-java"><code class="language-java">索引就相当于数据库的目录<span class="token punctuation">,</span> 索引是一种特殊的数据库结构，由数据表中的一列或多列组合而成，可以用来快速查询数据表中有某一特定值的记录。优点 <span class="token operator">:</span>    可以大大加快数据的检索速度，这也是创建索引的最主要的原因。    通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。缺点 <span class="token operator">:</span>    通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。    创建索引和维护索引需要空间成本，每一条索引都要占据数据库的物理存储空间，数据量越大，占用及空间也越大（数据表占据的是数据库的数据空间）    会降低表的增删改的效率，因为每次增删改索引需要进行动态维护，导致时间变长。</code></pre><p>有哪些索引类型</p><pre class=" language-java"><code class="language-java">唯一索引 <span class="token operator">:</span>   要求索引列的所有值都只能出现一次，即必须唯一。 普通索引 <span class="token operator">:</span>    要求索引列的所有值都只能出现一次，即必须唯一。主键索引 <span class="token operator">:</span>全文索引 <span class="token operator">:</span>    MySQL可以通过建立全文索引，利用查询关键字和查询列内容之间的相关度进行检索，可以利用全文索引来提高匹配的速度。比如实现全匹配模糊查询。但是实际场景测试mysql的全文索引性能非常不稳定，不建议生产环境使用。需要使用全文检索的地方，还是推荐使用Elasticsearch</code></pre></li><li><p>left join 和 inner join 的区别, 如果有A表 100 条, B表 10 条, A left join B 会有多少条记录 ? </p><pre class=" language-java"><code class="language-java">左外连接 <span class="token operator">:</span> 查询左表所有数据<span class="token punctuation">,</span> 以及两张表交集部分数据内连接 <span class="token operator">:</span> 查询 A<span class="token punctuation">,</span> B交集部分数据<span class="token number">100</span>条<span class="token punctuation">,</span> 因为使用的是左外连接<span class="token punctuation">,</span> 查询左表所有数据<span class="token punctuation">,</span> 以及两张表交集部分数据</code></pre></li><li><p>值传递和引用传递的区别</p></li><li><p>java 中传递数据库对象是引用传递还是值传递 ?</p><pre class=" language-java"><code class="language-java">是引用传递<span class="token punctuation">,</span> 数据库对象在传递给调用参数时<span class="token punctuation">,</span>可以直接修改该地址的内容<span class="token punctuation">,</span> 会影响到实际参数<span class="token punctuation">,</span> 我们所说的增删改查<span class="token punctuation">.</span></code></pre></li></ul><h2 id="吉联科技"><a href="#吉联科技" class="headerlink" title="吉联科技"></a>吉联科技</h2><h3 id="技术面"><a href="#技术面" class="headerlink" title="技术面"></a>技术面</h3><ul><li><p>介绍一下论坛项目</p></li><li><p>项目的主要功能是什么?</p></li><li><p>说说登录模块的流程吧</p></li><li><p>你提到拦截器, 说说拦截器在你项目上的实现吧</p></li><li><p>有优化吗? 微服务了解吗?  — 不了解</p></li><li><p>你刚刚说过ticket是存在cookie的, 那redis中是怎么存的 ?</p></li><li><p>来说说Java基础吧. Java的基本数据类型有哪些?</p></li><li><p>拆箱装箱是什么意思?</p></li><li><p>那拆箱和装箱的作用是什么呢?   —- 答不清楚, 面试官给我解释了一下…..寄</p><pre class=" language-java"><code class="language-java">作用：为了保证通用性和提高系统性能一种最普通的场景是调用一个包含类型为Object的参数的函数（方法<span class="token punctuation">)</span><span class="token punctuation">,</span>该Object可支持任意 类型，以便通用。当你需要将一个值类型传入容器时，就需要装箱了。另一种的用法，就是一个泛型 的容器，同样是为了保证通用，而将元素定义为Object类型的，将值类型的值加入该容器时，需要装箱。</code></pre></li><li><p>你平时有用过什么Java常用类吗?</p></li><li><p>map用得比较多是吧? 讲讲map的数据结构吧.</p></li><li><p>那说说map的扩容机制吧.</p></li><li><p>那说说map是怎么做查询的?   — 答就使用key查value啊….. 面试官不满意哈哈哈哈哈, 又引导了我问下个问题</p></li><li><p>你刚刚答得很浅啊, 说说怎么使用key查的吧? 有什么算法吗?      —- 现在才反应过来是考我getmap()源码….大概和面试官说了一下源码原理</p></li><li><p>你刚刚说到哈希算法, 那说说map中的put原理吧</p></li><li><p>那来讲一下框架吧. 你认为为什么spring会这么火, 就是大家都来用它?</p></li><li><p>你刚刚提到aop和ioc, 那先来说说ioc是什么吧</p></li><li><p>那ioc有什么作用呢?</p></li><li><p>哪里有用到ioc?   — 答JavaBean…..答得不完整</p></li><li><p>aop是什么?</p></li><li><p>哪里有用到aop呢?</p></li><li><p>那mybatis知道吗? 说说mybatis是什么吧.</p></li><li><p>你刚刚说到sql是在xml文件上写的, 那我们写sql语句的时候, 有${}和#{}, 说说他们有什么区别 ?</p></li><li><p>说说中间件吧, Kafka有用到吗? —  没有</p></li><li><p>redis有用到是吧, 那说说redis的常见数据类型吧.</p></li><li><p>他们的使用场景是什么? 你项目中有用到吗? 怎么用的.</p></li><li><p>我看你项目一个是web项目, 还有一个是RPC项目, 都有提到HTTP. 那来说说HTTP是什么吧</p></li><li><p>常见的请求是什么呢?</p></li><li><p>GET请求和POST请求有什么区别呢?</p></li><li><p>那你知道POST请求的具体数据格式吗? —- 答POST请求数据是放在body里面的, 具体的格式不清楚</p></li><li><p>那来说说多线程这方面的知识吧, 进程和线程有什么区别?</p></li><li><p>在我们Windows和Linux系统中, 你认为应用是进程还是线程呢? 那应用里面执行的模块呢?</p></li><li><p>你刚刚提到死锁, 那来说说线性安全是什么意思吧?</p></li><li><p>那怎么保证线性安全呢?</p></li><li><p>你提到有synchronized和volatile以及加LOCK锁, 那我们就来聊聊synchronized吧, 它是什么呢?</p></li><li><p>synchronized的实现方式      —–  答三种, 但是每一点的具体实现答得有点乱, 不知道面试官有没有听懂</p></li><li><p>好的, 那我们来聊聊MySQL数据库吧, 说说事务吧?</p></li><li><p>那事务有多少种隔离级别呢?</p></li><li><p>哪一种性能最好?</p></li><li><p>说说索引是什么吧?</p></li><li><p>你知道有什么索引吗?</p></li><li><p>那按你现在所学的理解, 什么情况下需要索引呢?</p></li><li><p>那什么情况下不需要索引呢?</p></li><li><p>来个场景题吧. 假如现在有一份订单数据, 有订单ID, 订单类型, 订单价格, 订单的创建时间, 说说你是怎么使用索引的呢?   —- 答用订单id作为唯一索引, 面试官否定掉了, 说订单id不唯一, 接着答使用订单创建时间,  面试官说不行, 我们可以使用普通索引啊, 为什么一定使用唯一索引呢……..寄</p></li><li><p>那说说建表关联吧, 多表查询中有内连接和左连接还有右连接, 说说他们的区别吧?</p></li><li><p>他们是怎么使用的呢?</p></li><li><p>来个场景题吧    —– 忘记了, 大概是问多表查询的过程的…….寄</p></li><li><p>group by知道吗? 是啥意思</p></li><li><p>Linux知道吗?   — 赶快说只知道基础命令, 然后快速说了一下查看内存是free, 寻找文件是find, 修改权限是chmod等等, 不能等他问….. 不然就寄了</p></li><li><p>噢噢好的, 那有没有部署过项目呢?   — 答没有哈哈哈哈哈</p></li><li><p>反问 : 进去后部门是什么? 回答我是供应链部门</p></li></ul><h2 id="跟谁学"><a href="#跟谁学" class="headerlink" title="跟谁学"></a>跟谁学</h2><h3 id="一面-3"><a href="#一面-3" class="headerlink" title="一面"></a>一面</h3><ul><li>Java中的集合有哪些 ?</li><li>ArrayList 和 LinkedList 区别</li><li>JVM内存区域</li><li>对象从创建到销毁过程</li><li>什么时候引起 full gc, 有什么危害?</li><li>sql查询优化</li><li>事务的四大特性</li><li>事务如何保证原子性</li><li>事务隔离级别</li><li>@Transactional 如何指定隔离级别</li><li>Spring中 IOC 和 AOP 的理解</li><li>如何进行依赖注入, byName 和 byType 区别</li><li>手写单例模式</li><li>说一下数组和链表的区别</li><li>为什么数组查询比链表快?</li><li>讲讲hashMap</li><li>synchronized 和 Lock 的区别</li><li>为什么有synchronized 还要有lock呢?</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础命令</title>
      <link href="/2023/04/25/mysql-ming-ling/"/>
      <url>/2023/04/25/mysql-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL命令"><a href="#MySQL命令" class="headerlink" title="MySQL命令"></a>MySQL命令</h1><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/image-20230425151326844.png" alt="基本MySQL语句结构"></p><h2 id="增删改数据"><a href="#增删改数据" class="headerlink" title="增删改数据"></a>增删改数据</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><pre class=" language-mysql"><code class="language-mysql">-- 添加数据-- 1.给指定字段添加数据insert into 表名(字段1,字段2...) values(值1,值2...);-- 2.给全部字段添加数据insert into 表名 values(值1,值2...);-- 3.批量添加数据insert into 表名(字段1,字段2...) values(值1,值2...),(值1,值2...),(值1,值2...);insert into 表名 values(值1,值2...),(值1,值2...),(值1,值2...);</code></pre><p> 注意 : </p><ul><li>插入数据时, 指定的字段顺序需要与值的顺序是一 一对应的</li><li>字符串和日期型数据应该包含在引号中</li><li>插入的数据大小, 应该在字段的规定范围内</li></ul><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><pre class=" language-mysql"><code class="language-mysql">-- 修改数据update 表名 set 字段名1 = 值1,字段名2 = 值2,... [where 条件];</code></pre><p>注意 : </p><ul><li>修改语句的条件可以有, 也可以没有, 如果没有条件, 则会修改整张表的所有数据</li></ul><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><pre class=" language-mysql"><code class="language-mysql">-- 删除数据delete from 表名 [where 条件];</code></pre><p>注意 : </p><ul><li>delete 语句的条件可以有, 也可以没有, 如果没有条件, 则会删除整张表的所有数据</li><li>delete 语句不能删除某个字段的值(可以使用update)</li></ul><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><pre class=" language-mysql"><code class="language-mysql">-- 1.查询多个字段select 字段1,字段2,字段3... from 表名;select * from 表名;-- 2.设置别名  as可以省略select 字段1 [as 别名1],字段2 [as 别名2]... from 表名;-- 3.去除重复记录select distinct 字段列表 from 表名;-例子 查询公司员工的上班地址(不要重复)select distinct workaddress from emp;</code></pre><h3 id="条件查询-where"><a href="#条件查询-where" class="headerlink" title="条件查询 where"></a>条件查询 where</h3><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/image-20220922160607153.png" alt="条件运算符"></p><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/image-20220922160615215.png" alt="image-20220922160615215"></p><p>模糊查询说明 : </p><pre class=" language-mysql"><code class="language-mysql">select 字段列表 from 表名 where 条件列表;-- eg:查询姓名为两个字的员工信息select * from employee where name like '__';//两个_-- eg:查询身份证号最后一位是X的员工信息select * from employee where idcard like '%X'; </code></pre><h3 id="分组查询-group-by"><a href="#分组查询-group-by" class="headerlink" title="分组查询 group by"></a>分组查询 group by</h3><pre class=" language-mysql"><code class="language-mysql">select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];</code></pre><p>where 与 having区别</p><ul><li>执行时机不同 : where是分组之前进行过滤, 不满足where条件, 不参与分组; 而having是分组之后对结果进行过滤</li><li>判断条件不同 : where不能对聚合函数进行判断, 而having可以</li></ul><p>注意 : </p><ul><li>执行顺序 : where &gt; 聚合函数 &gt; having</li><li>分组之后, 查询的字段一般为聚合函数和分组字段, 查询其他字段无意义</li></ul><p><strong>例子</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 1.根据性别分组,统计男性员工 和 女性员工的数量select gender,count(*) from emp group by gender;-- 2.查询年龄小于45的员工, 并根据工作地址分组, 获取员工数量大于等于3的工作地址select workaddress,count(*) from emp where age < 45 group by workaddress having count(*) >= 3;</code></pre><h3 id="排序查询-order-by"><a href="#排序查询-order-by" class="headerlink" title="排序查询 order by"></a>排序查询 order by</h3><pre class=" language-mysql"><code class="language-mysql">select 字段列表 from 表名 order by 字段1 排序方式1,字段2 排序方式2...;-- 排序方式# ASC 升序(默认值)# DESC 降序-- 如果是多字段排序, 只有当第一个字段值相同时, 才会根据第二个字段进行排序</code></pre><p><strong>例子</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 1.根据年龄对公司的员工进行升序排序, 年龄相同, 再按照入职时间进行降序排序select * from emp order by age asc, entrydate desc;</code></pre><h3 id="分页查询-limit"><a href="#分页查询-limit" class="headerlink" title="分页查询 limit"></a>分页查询 limit</h3><pre class=" language-mysql"><code class="language-mysql">select 字段列表 from 表名 limit 起始索引,每页显示记录数;</code></pre><p><strong>注意 :</strong> </p><ul><li><p>起始索引从0开始, 起始索引 = (查询页码 - 1) * 每页显示记录数</p><pre class=" language-mysql"><code class="language-mysql">limit (查询页码 - 1)* 每页显示记录数,每页显示记录数</code></pre></li><li><p>分页查询是数据库的方言, 不同数据库有不同的实现</p></li><li><p>如果查询的是第一页数据, 起始索引可以省略, 直接简写为limit 10;</p></li></ul><p><strong>例子</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 1. 查询第二页员工数据,每页展示10条数据select * from emp limit 10,10;</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><blockquote><p>将一列数据作为一个整体, 进行纵向计算</p></blockquote><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/image-20220922160945163.png" alt="聚合函数"></p><pre class=" language-mysql"><code class="language-mysql">select 聚合函数(字段列表) from 表名;</code></pre><p><strong>注意 :</strong> </p><ul><li>null值不参与所有聚合函数运算</li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/image-20220922170801076.png" alt="字符串函数"></p><p><strong>例子</strong></p><pre class=" language-mysql"><code class="language-mysql">-- concat select concat('Hello', 'MySQL');-- lowerselect lower('Hello');-- upperselect upper('Hello');-- lpadselect lpad('01',5,'-');-- rpadselect rpad('01',5,'-');-- trimselect trim(' Hello MySQL ');-- substringselect substring('Hello MySQL',1,5)</code></pre><p><strong>注意 :</strong> </p><ul><li>substring 的起始位置是1 </li></ul><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/image-20220922170817311.png" alt="数值函数"></p><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/image-20220922170824985.png" alt="日期函数"></p><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><blockquote><p>可以在SQL语句中实现条件筛选, 从而提高语句的效率</p></blockquote><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/image-20220922170831005.png" alt="流程控制函数"></p><p><strong>例子</strong></p><pre class=" language-mysql"><code class="language-mysql">-- ifselect if(true,'Ok','Error');-- ifnullselect ifnull('Ok','Default');select ifnull(null,'Default'); -- 返回Default-- 查询emp员工表的员工姓名和工作地址(北京\上海 ===> 一线城市 , 其他 === > 二线城市)select    name,    (case workaddress when '北京' then '一线城市' when '上海' then '一线城市' else '二线城市' end) as '工作地址'from emp;    </code></pre><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="消除笛卡尔积"><a href="#消除笛卡尔积" class="headerlink" title="消除笛卡尔积"></a>消除笛卡尔积</h3><pre class=" language-mysql"><code class="language-mysql">-- 多表查询select * from emp,dept where emp.dept_id = dept.id;</code></pre><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><blockquote><p>相当于查询A, B交集部分数据</p></blockquote><pre class=" language-mysql"><code class="language-mysql">-- 隐式内连接select 字段列表 from 表1,表2 where 条件...;-- 显式内连接select 字段列表 from 表1 [inner] join 表2 on 连接条件...;</code></pre><p><strong>例子</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 1.查询每一个员工的姓名, 及关联的部门的名字(隐式内连接实现)-- 表结构: emp, dept-- 连接条件: emp.dept_id = dept.idselect emp.name,dept.name from emp,dept where emp.dept_id = dept.id;-- 2.查询每一个员工的姓名, 及关联的部门的名称(显式内连接实现)-- 表结构: emp, dept-- 连接条件: emp.dept_id = dept.idselect emp.name,dept.name from emp inner join dept on emp.dept_id = dept.id;</code></pre><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><blockquote><ul><li>左外连接 : 查询左表所有数据, 以及两张表交集部分数据</li><li>右外连接 : 查询右表所有数据, 以及两张表交集部分数据</li></ul></blockquote><pre class=" language-mysql"><code class="language-mysql">-- 左外连接select 字段列表 from 表1 left [outer] join 表2 on 条件...;-- 右外连接select 字段列表 from 表1 right [outer] join 表2 on 条件...;</code></pre><p><strong>例子</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 1.查询emp表的所有数据, 和对应的部门名称(左外连接)-- 表结构: emp, dept-- 连接条件: emp.dept_id = dept.idselect e.*,d.name from emp e left outer join dept d on e.dept.id = d.id;-- 2.查询emp表的所有数据, 和对应的员工信息(右外连接)select d.*,e.* from emp e right outer join dept d on e.dept.id = d.id;</code></pre><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><blockquote><p>当前表与自身的连接查询, 自连接必须使用表别名</p></blockquote><pre class=" language-mysql"><code class="language-mysql">-- 自连接查询, 可以是内连接查询,也可以是外连接查询select 字段列表 from 表A 别名A join 表A 别名B on 条件...;</code></pre><p><strong>例子</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 1. 查询员工 及其所属领导的名字-- 表结构:empselect a.name, name from emp a, emp b where a.managerid = b.id;-- 2. 查询所有员工 emp 及其领导的名字 emp, 如果员工每页领导, 也需要查询出来(要使用外连接)-- 表结构select a.name '员工',b.name '领导' from emp a left join emp b on a.managerid = b.id;</code></pre><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><blockquote><p>对于union查询, 就是把多次查询的结果合并起来, 形成一个新的查询结果集</p></blockquote><pre class=" language-mysql"><code class="language-mysql">select 字段列表 from 表A...union [all]select 字段列表 from 表B...;  -- union all 是直接将结果合并, union 是将结果去重后合并</code></pre><p><strong>例子</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 1.将薪资低于5000的员工 和年龄大于50岁的员工全部查询出来select * from emp where salary < 5000union allselect * from emp where age > 50;</code></pre><p><strong>注意 :</strong> </p><ul><li>对于联合查询的多张表的列数必须保持一致, 字段类型也需要保持一致</li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><blockquote><p>sql语句中嵌套select语句, 称为嵌套查询, 又称子查询</p></blockquote><pre class=" language-mysql"><code class="language-mysql">select * from t1 where column1 = (select column1 from t2);-- 子查询外部的语句可以 insert / update / delete / select 的任何一个</code></pre><p><strong>例子</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 标量子查询-- 常用的操作符 : =, <>, >, <, >=, <=-- 查询"销售部"的所有员工信息-- a.查询'销售部'部门IDselect id from dept where name = '销售部';-- b.根据销售部部门ID,查询员工信息select * from emp where dept_id = 4;-- 把a b两部嵌套在一起,形成子查询select * from emp where dept_id = (select id from dept where name = '销售部');-- 列子查询-- 常用的操作符 : in, not in, any, some, all-- 查询比 财务部 所有人工资都高的员工信息-- a.查询所有 财务部 人员工资select salary from emp where dept_id = (select id from dept where name = '财务部';);-- b.比 财务部 所有人工资都高的员工信息select * from emp where salary > all (select salary from emp where dept_id = (select id from dept where name = '财务部'));-- 行子查询-- 常用的操作符 : =, <>, in, not in-- 查询与"张无忌"的薪资及直属领导相同的员工信息-- a.查询"张无忌"的薪资及直属领导select salary,managerid from emp where name = '张无忌';-- b.查询"张无忌"的薪资及直属领导select * from emp where (salary,managerid) = (12500,1);-- 把a b两部嵌套在一起,形成子查询select * from emp where (salary,managerid) = (select salary,managerid from emp where name = '张无忌');-- 表子查询-- 常用的操作符 :in-- 查询与"鹿杖客", "宋远桥" 的职位和薪资相同的员工信息-- a.查询"鹿杖客", "宋远桥" 的职位和薪资select job,salary from emp where name = '鹿杖客' or name = '宋远桥';-- b.查询与"鹿杖客", "宋远桥" 的职位和薪资相同的员工信息select * from emp where (job,salary) in (elect job,salary from emp where name = '鹿杖客' or name = '宋远桥');-- 查询入职日期是"2006-01-01"之后的员工信息, 及部门信息(把子查询的结果作为一张表来和另一张表进行联合查询)-- a.入职日期是"2006-01-01"之后的员工信息select * from emp where entrydate > '2006-01-01';-- b.查询这部分员工, 对应的部门信息select e.*,d.* from (select * from emp where entrydate > '2006-01-01') e left join dept d on e.dept_id = d.id;</code></pre><p><strong>注意 :</strong> </p><p>根据子查询的结果不同, 分为 : </p><ul><li>标量子查询 (子查询结果为单个值)</li><li>列子查询 (子查询结果为一列)</li><li>行子查询 (子查询结果为一行)</li><li>表子查询 (子查询结果为多行多列)</li></ul><p>根据子查询位置, 分为 : where之后, from之后, select之后</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>罗列了MySQL语句的基本语法。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQTT协议初识</title>
      <link href="/2023/04/25/mqtt-xie-yi-chu-shi/"/>
      <url>/2023/04/25/mqtt-xie-yi-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h1><p>mqtt的工作原理 :</p><p>发布者发布主题会传到服务器, 由服务器下发到订阅该主题的订阅者.并非发布者和订阅者直接对接.</p><h2 id="MQTT协议特点"><a href="#MQTT协议特点" class="headerlink" title="MQTT协议特点"></a>MQTT协议特点</h2><p>MQTT是一个基于<strong>客户端-服务器</strong>的消息发布/订阅传输协议。</p><p>MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。</p><h2 id="发布和订阅"><a href="#发布和订阅" class="headerlink" title="发布和订阅"></a>发布和订阅</h2><p>MQTT使用的发布/订阅消息模式，它提供了一对多的消息分发机制，从而实现与应用程序的解耦。</p><p>这是一种消息传递模式，<strong>消息不是直接从发送器发送到接收器</strong>（即点对点），而是由<code>MQTT server</code>（或称为 MQTT Broker）分发的。</p><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/image-20230425085652008.png" alt="发布与订阅原理"></p><p><strong>MQTT 服务器是发布-订阅架构的核心</strong>。</p><p>客户端可以发布消息（发送方）、订阅消息（接收方）或两者兼而有之。</p><p>客户端（也称为节点）是一种智能设备，如微控制器或具有 TCP/IP 堆栈和实现 MQTT 协议的软件的计算机。</p><p>消息在允许过滤的主题下发布。主题是分层划分的 UTF-8 字符串。不同的主题级别用斜杠<code>/</code>作为分隔符号。</p><p>我们来看看下面的设置。</p><p>光伏发电站是发布者（Publisher）。</p><p>主要主题（Topic）级别是”PV”，这个工厂发布两个子级别”sunshine”和”data”；</p><p>“PV/sunshine”是一个布尔值（true/false，也可以是 1/0），充电站需要它来知道是否应该装载电动汽车（仅在阳光普照时 :)）。</p><p>充电站（EVSE）是订阅者，订阅”PV/sunshine”从服务器获取信息。</p><p>“PV/data” 另一方面，以 kW 为单位传输工厂产生的瞬时功率，并且该主题可以例如通过计算机或平板电脑订阅，以生成一天内传输功率的图表。</p><p>这就是一个简单的MQTT的应用场景，具体如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6d78e85dcf57728a8ca2a991371a34c3.png" alt="光伏发电的MQTT应用"></p><h2 id="QOS"><a href="#QOS" class="headerlink" title="QOS"></a>QOS</h2><p>服务质量是 MQTT 的一个重要特性。当我们使用 TCP/IP 时，连接已经在一定程度上受到保护。但是在无线网络中，中断和干扰很频繁，MQTT 在这里帮助避免信息丢失及其服务质量水平。这些级别在发布时使用。如果客户端发布到 MQTT 服务器，则客户端将是发送者，MQTT 服务器将是接收者。当MQTT服务器向客户端发布消息时，服务器是发送者，客户端是接收者。</p><p><strong>QoS  0</strong></p><p>这一级别会发生消息丢失或重复，消息发布依赖于底层TCP/IP网络。</p><p>至多一次（<strong>qos = 0</strong>），可能会出现丢包的现象。使用在对实时性要求不高的情况。这一级别可应用于如下情景，如环境传感器数据，丢失一次读记录无所谓，因为很快下一次读记录就会产生。</p><p><strong>QoS  1</strong></p><p>QoS 1 承诺消息将至少传送一次给订阅者。</p><p>至少一次（<strong>qos = 1</strong>），保证包会到达目的地，但是可能出现重包。</p><p><strong>QoS  2</strong></p><p>使用 QoS 2，我们保证消息仅传送到目的地一次。为此，带有唯一消息 ID 的消息会存储两次，首先来自发送者，然后是接收者。QoS 级别 2 在网络中具有最高的开销，因为在发送方和接收方之间需要两个流。</p><p>正好一次（<strong>qos = 2</strong>），保证包会到达目的地，且不会出现重包的现象。这一级别可用于如计费系统等场景，在计费系统中，消息丢失或重复可能会导致生成错误的费用。</p><h2 id="MQTT数据包结构"><a href="#MQTT数据包结构" class="headerlink" title="MQTT数据包结构"></a>MQTT数据包结构</h2><ul><li><p>固定头（Fixed header），存在于所有MQTT数据包中，表示数据包类型及数据包的分组类标识；</p></li><li><p>可变头（Variable header），存在于部分MQTT数据包中，数据包类型决定了可变头是否存在及其具体内容；</p><ul><li>较常的应用是做为包的标识</li></ul></li><li><p>消息体（Payload），存在于部分MQTT数据包中，表示客户端收到的具体内容；</p><ul><li>CONNECT、SUBSCRIBE、SUBACK、UNSUBSCRIBE四种类型的消息 有消息体：<ul><li><code>CONNECT</code>，消息体内容主要是：客户端的ClientID、订阅的Topic、Message以及用户名和密码</li><li><code>SUBSCRIBE</code>，消息体内容是一系列的要订阅的主题以及<code>QoS</code>。</li><li><code>SUBACK</code>，消息体内容是服务器对于<code>SUBSCRIBE</code>所申请的主题及<code>QoS</code>进行确认和回复。</li><li><code>UNSUBSCRIBE</code>，消息体内容是要取消订阅的主题。</li></ul></li></ul></li></ul><h2 id="使用MQTT进行交互"><a href="#使用MQTT进行交互" class="headerlink" title="使用MQTT进行交互"></a>使用MQTT进行交互</h2><blockquote><p>当应用数据通过MQTT网络发送时，MQTT会把与之相关的服务质量（QoS）和主题名（Topic）相关连。</p></blockquote><p><strong>在MQTT客户端上干什么？</strong></p><ul><li>发布其他客户端会订阅的信息</li><li>订阅其它客户端发布的消息</li><li>退订或删除应用程序的消息</li><li>断开与服务器连接。</li></ul><p><strong>MQTT服务器又干什么？</strong></p><ul><li>接受来自客户的网络连接</li><li>向订阅的客户转发应用程序消息</li></ul><p><strong>MQTT协议中的方法</strong></p><ul><li>（1）Connect。等待与服务器建立连接。</li><li>（2）Disconnect。等待MQTT客户端完成所做的工作，并与服务器断开TCP/IP会话。</li><li>（3）Subscribe。等待完成订阅。</li><li>（4）UnSubscribe。等待服务器取消客户端的一个或多个topics订阅。</li><li>（5）Publish。MQTT客户端发送消息请求，发送完成后返回应用程序线程。</li></ul><h2 id="MQTT如何实现订阅-发布消息模型"><a href="#MQTT如何实现订阅-发布消息模型" class="headerlink" title="MQTT如何实现订阅-发布消息模型?"></a>MQTT如何实现订阅-发布消息模型?</h2><p><strong>MQTT如何管理连接?</strong></p><p>MQTT 是工作在TCP / TLS 协议之上的，是基于连接的，因此在进行主题订阅或消息发布之前，需要先建立连接。MQTT Broker 为了保证网络安全，一般会对请求连接的Client 进行身份验证，因此CONNECT 报文可以携带身份验证信息。MQTT Client 与MQTT Broker 建立连接的过程如下：</p><p><img src="https://img-blog.csdnimg.cn/20210511172638684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NjIxMDc4,size_16,color_FFFFFF,t_70#pic_center" alt="MQTT Client 与Broker 建立连接过程"></p><p><strong>MQTT如何传递消息?</strong></p><p>MQTT 传递消息是基于订阅-发布模型的，Client 与Broker 建立连接后，如果想接收消息，需要先订阅自己感兴趣的主题topic，一个Client 可以订阅多个主题topic。MQTT Client 如果想对外发布消息，消息都需要指定主题topic，Broker 需要通过topic 确定要将该消息分发给哪些Client（MQTT Broker 为每个topic 维护一个订阅者列表）。MQTT Client 向Broker 订阅感兴趣主题topic 的过程如下：</p><p><img src="https://img-blog.csdnimg.cn/20210511233948695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NjIxMDc4,size_16,color_FFFFFF,t_70#pic_center" alt="MQTT Client 向Broker 订阅感兴趣主题的流程"></p><p>MQTT 为了适应多种应用场景，支持不同的消息传递服务等级QoS，有些不重要的消息即便对方没有收到也影响不大，有些重要的消息则需要确认对方接收到了。还有些特殊场景，比如支付场景，不仅要求对方确认收到该消息，而且要求该消息的传递是幂等的，也即相同的消息发送多次跟发送一次是一样的结果，不至于出现重复支付的情况。<br>MQTT Client 取消订阅不感兴趣的主题时，通过UNSUBSCRIBE 报文告知Broker 要取消订阅哪些主题，报文中比较常用的参数是topic。Broker 也会通过UNSUBACK 报文通知Client 取消订阅主题的结果，报文中比较常用的参数是Reason Code。取消订阅的过程和报文格式跟订阅过程类似，这里就不赘述了。</p><p>MQTT Client 订阅感兴趣的主题后，如果其它Client 在该topic 上发布消息时，Broker 就可以将该主题上的消息转发给它的订阅者。MQTT Client 在指定主题上发布消息的过程如下：</p><p><img src="https://img-blog.csdnimg.cn/20210511234308904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NjIxMDc4,size_16,color_FFFFFF,t_70#pic_center" alt="MQTT Client 向Broker 发布某主题的消息"></p><p>前面介绍MQTT Client 订阅主题时也指定了QoS，Broker 实际发送给订阅者的消息服务等级还要看消息发布者将消息发送给Broker 的服务等级。也即，Publisher 到Subscribers 传递消息的服务等级等于发布报文中的QoS 和订阅报文中QoS 的最小值。</p><p>某个主题的消息从Publisher 经Broker 到Subscribers，采用不同的消息QoS 服务等级，传递消息的报文交互也不同，MQTT 支持的三种QoS 服务等级下，报文的交互过程对比如下：</p><ul><li>QoS 0 (At most once)：Publisher / Broker 只管发布消息，不关心对方是否收到（类似于UDP 协议，没有确认重传机制），QoS 0 的消息发送速率比较高，但消息可能会丢失。常用于对消息丢失不敏感的场景，比如传感器发布状态数据，中间几次数据丢失没关系；</li><li>QoS 1 (At least once)：Publisher / Broker 通过PUBACK 报文确认对方收到了发布的消息，若一段时间内未收到对方的PUBACK 报文则继续重发该消息（重发的消息DUP 标识位设置为1，Packet Identifier 字段值不变），QoS 0 的消息保证对方接收到，但消息可能会重复（Broker / Subscribers 发送PUBACK 报文后再收到相同Packet Identifier 的消息也是按新消息处理的），比如下发给执行器的命令，需要确认命令被响应了；</li><li>QoS 2 (Exactly once)：Publisher / Broker 不仅要通过PUBREC 报文确认对方接收到了发布的消息，还要通过报文PUBREL 和PUBCOMP 的二次交互保证对方接收的消息不重复。这要求接收者Broker / Subscribers 先暂存该消息，等接收到了PUBREL 报文后再将消息递交给上层或转发（消息接收者会忽略PUBLISH 报文中相同Packet Identifier 的消息），QoS 0 的消息对硬件计算存储资源的要求较高、消息延迟也较高，比如在计费支付系统中，每笔订单需要且只能处理一次。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210512013948940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NjIxMDc4,size_16,color_FFFFFF,t_70" alt="MQTT Quality of Service"></p><blockquote><p><strong>PUBREC</strong>字面意思为Assured publish received，作为订阅者/服务器对QoS level = 2的发布PUBLISH消息的发送方的响应，确认已经收到，为QoS level = 2消息流的第二个消息。 和PUBACK相比，除了消息类型不同外，其它都是一样<strong>。</strong></p><p><strong>PUBREL</strong> Qos level = 2的协议流的第三个消息，有PUBLISH消息的发布者发送，参与方接收。</p><p><strong>PUBCOMP</strong> 作为QoS level = 2消息流第四个，也是最后一个消息，由收到PUBREL的一方向另一方做出的响应消息。完整的消息一览，和PUBREL一致，除了消息类型。</p></blockquote><p>消息接收者Broker / Subscribers 在接收QoS 等级大于0（也即QoS 1 或QoS 2）的消息时，需要在本地暂存该消息（QoS 0 的消息本地不暂存，直接转发或递交给上层应用），QoS 1 的消息需要在本地存储到发送PUBACK 报文后，QoS 2 的消息需要在本地存储到接收PUBREL 报文后。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这只是MQTT的基本理论知识，而更深层的理解需要不断实践。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basis of computer engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下tomcat的catalina.out日志文件过大处理方法</title>
      <link href="/2023/04/24/catalina.out-ri-zhi-wen-jian-guo-da-chu-li/"/>
      <url>/2023/04/24/catalina.out-ri-zhi-wen-jian-guo-da-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="问题情景"><a href="#问题情景" class="headerlink" title="问题情景"></a>问题情景</h2><p>在linux下运行tomcat会碰到catalina.out日志文件一直增大的问题</p><blockquote><p>有用Tomcat的，绝对都会遇到这样一个问题：catalina.out文件过大。</p><p>它是Tomcat默认生成的日志文件，会随着时间的推移，逐渐增大，不断的增长，甚至达到几G，几十G的大小。由于文件过大，不仅占系统的存储，我们还将无法使用过常规的编辑工具进行查看，严重影响系统的维护工作。</p></blockquote><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><blockquote><p>先来看看Tomcat中catalina.out、catalina.log、localhost.log、access.log的区别吧！</p></blockquote><h3 id="catalina-out-日志"><a href="#catalina-out-日志" class="headerlink" title="catalina.out 日志"></a>catalina.out 日志</h3><p>catalina.out 日志文件是 Tomcat 的标准输出（stdout）和标准出错（stderr）输出的“目的地”。我们在应用里使用<code>System.out</code>打印的内容都会输出到这个日志文件中。另外，如果我们在应用里使用其他的日志框架，配置了向 Console 输出日志，则也会输出到这个文件。</p><blockquote><p><strong>注意点</strong>：随着系统上线的时间越来越长， catalina.out 会变得很大，所以最好还是要设定一些定时任务来清理归档这个日志文件。</p></blockquote><h3 id="catalina-YYYY-MM-DD-log-日志"><a href="#catalina-YYYY-MM-DD-log-日志" class="headerlink" title="catalina.YYYY-MM-DD.log 日志"></a>catalina.YYYY-MM-DD.log 日志</h3><p>catalina.{yyyy-MM-dd}.log 是 Tomcat 自己运行的一些日志，主要记录 Tomcat 在启动和暂停时的运行内容。</p><h3 id="localhost-YYYY-MM-DD-log"><a href="#localhost-YYYY-MM-DD-log" class="headerlink" title="localhost.YYYY-MM-DD.log"></a>localhost.YYYY-MM-DD.log</h3><p>localhost.{yyyy-MM-dd}.log 主要是应用初始化(listener, filter, servlet)未处理的异常最后被 Tomcat 捕获而输出的日志,它也是包含 Tomcat 的启动和暂停时的运行日志,但它没有 catalina.YYYY-MM-DD.log 日志全。</p><h3 id="localhost-access-log-YYYY-MM-DD-txt"><a href="#localhost-access-log-YYYY-MM-DD-txt" class="headerlink" title="localhost_access_log.YYYY-MM-DD.txt"></a>localhost_access_log.YYYY-MM-DD.txt</h3><p>Tomcat 的请求访问日志，请求的时间，请求的类型，请求的资源和返回的状态码都有记录。配置这个日志非常有必要，可以让我们清楚的看清请求的状况。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>CentOS6.5后自带logrotate程序，可以解决catalina.out的日志轮转问题</p></blockquote><p>&lt;1&gt;在/etc/logrotate.d/目录下新建一个tomcat的文件</p><pre class=" language-shell"><code class="language-shell">cat >/etc/logrotate.d/tomcat ------------ /opt/apache-tomcat-9.0.65/logs/catalina.out{            要轮转的文件    copytruncate                                创建新的catalina.out副本，截断源catalina.out文件    daily                                       每天进行catalina.out文件的轮转    rotate 7                                    至多保留7个副本    missingok                                   文件丢失了，轮转不报错    compress                                    使用压缩    size 16M                                    当catalina.out文件大于16MB，就轮转}</code></pre><p>其他参数：</p><pre class=" language-shell"><code class="language-shell">compress                                   通过gzip 压缩转储以后的日志nocompress                                 不做gzip压缩处理copytruncate                               用于还在打开中的日志文件，把当前日志备份并截断；是先拷贝再清空的方式，拷贝和清空之间有一个时间差，可能会丢失部分日志数据。nocopytruncate                             备份日志文件不过不截断create mode owner group                    轮转时指定创建新文件的属性，如create 0777 nobody nobodynocreate                                   不建立新的日志文件delaycompress                              和compress 一起使用时，转储的日志文件到下一次转储时才压缩nodelaycompress                            覆盖 delaycompress 选项，转储同时压缩。missingok                                  如果日志丢失，不报错继续滚动下一个日志errors address                             专储时的错误信息发送到指定的Email 地址ifempty                                    即使日志文件为空文件也做轮转，这个是logrotate的缺省选项。notifempty                                 当日志文件为空时，不进行轮转mail address                               把转储的日志文件发送到指定的E-mail 地址nomail                                     转储时不发送日志文件olddir directory                           转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统noolddir                                   转储后的日志文件和当前日志文件放在同一个目录下sharedscripts                              运行postrotate脚本，作用是在所有日志都轮转后统一执行一次脚本。如果没有配置这个，那么每个日志轮转后都会执行一次脚本prerotate                                  在logrotate转储之前需要执行的指令，例如修改文件的属性等动作；必须独立成行postrotate                                 在logrotate转储之后需要执行的指令，例如重新启动 (kill -HUP) 某个服务！必须独立成daily                                      指定转储周期为每天weekly                                     指定转储周期为每周monthly                                    指定转储周期为每月rotate count                               指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份dateext                                    使用当期日期作为命名格式dateformat .%s                             配合dateext使用，紧跟在下一行出现，定义文件切割后的文件名，必须配合dateext使用，只支持 %Y %m %d %s 这四个参数size(或minsize) log-size                   当日志文件到达指定的大小时才转储，log-size能指定bytes(缺省)及KB (sizek)或</code></pre><p>&lt;2&gt;当执行以上操作时是自动执行的，也可手动切割</p><pre class=" language-shell"><code class="language-shell">logrotate /etc/logrotate.conf</code></pre><p>如果只轮转tomcat配置文件，要指定文件</p><pre class=" language-shell"><code class="language-shell">logrotate --force /etc/logrotate.d/tomcat</code></pre><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li><p>每天晚上 cron 定时任务会扫码目录 <code>/etc/cron.daily/</code></p></li><li><p>触发<code>/etc/cron.daily/logrotate</code>脚本，即运行脚本：</p><pre class=" language-shell"><code class="language-shell">/usr/sbin/logrotate /etc/logrotate.conf</code></pre></li><li><p><code>/etc/logrotate.conf</code>会扫码所有<code>/etc/logrotate.d/</code>目录的脚本</p></li><li><p>触发<code>/etc/logrotate.d/tomcat</code>上面新建的配置</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>对于Linux中，内存快满了解决的方法</p><ol><li>先查看内存使用情况</li><li>进入磁盘挂载的目录 / ，查看各个文件的占用大小</li><li>查看哪一个文件比较大（一层一层找）一般删除的是积累了很久很大的日志文件</li></ol></blockquote><p>具体命令如下：</p><p>查看内存使用情况：</p><pre class=" language-shell"><code class="language-shell">df -h</code></pre><p>进入磁盘挂载的目录/，查看各个文件的占用大小：</p><pre class=" language-shell"><code class="language-shell">cd /du -sh *</code></pre><p>查看哪一个文件比较大（一层一层找）:</p><pre class=" language-shell"><code class="language-shell">du -sh *</code></pre><p>而这个方法仅仅只是找到哪个文件占用的磁盘空间大而已。在实际中我们还会出现IO读写高等问题。</p><p>这些问题具体参考文章 ： <strong>Linux系统中负载较高&amp;磁盘I/O %util特别高问题排查思路与解决方法</strong></p><ul><li><a href="https://blog.51cto.com/linhuchong/5241886">https://blog.51cto.com/linhuchong/5241886</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 各种折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输入网址到网页发生了什么？</title>
      <link href="/2023/04/18/shu-ru-wang-zhi-dao-wang-ye-fa-sheng-liao-shi-me/"/>
      <url>/2023/04/18/shu-ru-wang-zhi-dao-wang-ye-fa-sheng-liao-shi-me/</url>
      
        <content type="html"><![CDATA[<h2 id="问题情景"><a href="#问题情景" class="headerlink" title="问题情景"></a>问题情景</h2><p>我在看完图解HTTP和图解TCP后对整个计算机网络的脉络有了一些了解。但是对于输入网址到网页这中间到底发生了什么？我只能说出个大概，却不能清楚的知道这中间的流程。</p><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><blockquote><p>所以画了个思维导图~</p><p>lol</p></blockquote><p><img src="https://gitee.com/dd-smile/figurebed/raw/master/img/2.png" alt="思维导图"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>先解析URL，生成HTTP请求消息。</li><li>然后通过DNS服务器查询域名对应的IP地址，本地DNS服务器会查询有没有这个域名的信息，如果有就直接返回，否则就要去根域名服务器，顶级域名服务器和权威域名服务器依次询问。</li><li>在知道了IP地址后，我们就要开始准备传输了，首先是进行TCP的可靠传输，经过三次握手建立连接后，就要委托IP模块将数据封装成网络包发送给通信对象，也就是加上IP头部。</li><li>有了IP头部就还需要用于两点传输的MAC头部。在这个过程中，如果我们只知道IP地址，而不知道MAC地址，就需要使用ARP协议在以太网进行广播的形式询问。</li><li>接下来就是通过交换机和路由器进行传输到服务器了。</li><li>服务器收到数据包后，会扒开数据包的MAC头部，查看是否和服务器自己的MAC地址符合，接着扒开数据包的IP头和TCP头部。发现TCP头部里面有个端口号，HTTP的服务器正在监听这个端口号。</li><li>于是服务器就知道HTTP进程想要这个包。 于是将包发放HTTP进程。服务器的HTTP进程看到后，知道这个请求是想要访问一个页面，于是把这个网页封装到HTTP响应报文里面。同样的加上TCP，IP，MAC头部。</li><li>客户端收到服务器的响应数据包，客户端也会开始扒皮。最后把响应报文交给浏览器去渲染页面。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basis of computer engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hexo引入图床,手机和web不显示图片的问题</title>
      <link href="/2023/04/10/hexo-bu-xian-shi-tu-pian-wen-ti/"/>
      <url>/2023/04/10/hexo-bu-xian-shi-tu-pian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="问题情景"><a href="#问题情景" class="headerlink" title="问题情景"></a>问题情景</h2><p>使用hexo博客，写了一篇带图的文章，结果发现图挂了…之前看博客扫到hexo博客显示本地图片可能会有问题，于是选了图床图片的方式插图，结果还是没能幸免，好在搜索了半天，解决了这个问题，这里做个记录，帮助后面遇到问题的同学。</p><blockquote><p>Hexo使用图床的方式加载在blog中加载图片，会在非本人的电脑或者手机端报“html访问图片资源403问题(http referrer)”，导致采用图床方式加载的图片全部无法加载。</p></blockquote><h3 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h3><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><ol><li><p>检查图床图片的链接：</p><p>点进去发现图片正常显示，排除图床服务器问题。</p></li><li><p>用Chrome打开博文，右键检查或者查看网页源码：</p><p>找到图床图片链接，点击发生403(Forbidden)错误，找到问题根源。</p></li></ol><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>403 forbidden，说明了这个网络资源这样获取是被拒绝的，那么通过简单的谷歌，找到了相关的解决方法，并去实际尝试：</p><p>解决方法 ：只需要在markdown文章开头添加一个<code>&lt;meta name="referrer" content="no-referrer" /&gt;</code></p><blockquote><p>如果上述方式不起作用的话，可能需要全局去添加。</p></blockquote><p><strong>butterfly主题</strong></p><blockquote><p>文件路径参考自己安装路径</p></blockquote><p>在G:\blog\themes\butterfly\layout\includes目录下有一个head.pug文件，修改该文件的meta信息，会使生成的所有页面都带有该head。在head.pug文件中添加如下内容，结果参见图片。</p><pre class=" language-shell"><code class="language-shell">meta(name="referrer" content="no-referrer")</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/13838098-1b07689b2e132b5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/656/format/webp" alt="添加的内容"></p><p><strong>yilia主题</strong></p><p>在G:\blog\themes\yilia\layout_partial目录下有一个head.ejs，同样在head.ejs文件中添加如下meta信息即可</p><p><code>&lt;meta name="referrer" content="no-referrer" /&gt;</code></p><p>然后就是<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>上传博客了，这一次分别在电脑和手机端打开文章，图片显示正常，问题解决。</p><p>在G:\blog\public\2023目录下就是所有23年生成的blog，找到该目录下的任意一个index.html，用文本编辑器打开就可以看到已经自动生成了referrer标签了。</p><h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><p>http请求体的header中有一个referrer字段，用来表示发起http请求的源地址信息，这个referrer信息是可以省略但是不可修改的，就是说你只能设置是否带上这个referrer信息，不能定制referrer里面的值。</p><p>服务器端在拿到这个referrer值后就可以进行相关的处理，比如图片资源，可以通过referrer值判断请求是否来自本站，若不是则返回403或者重定向返回其他信息，从而实现图片的防盗链。上面出现403就是因为，请求的是别人服务器上的资源，但把自己的referrer信息带过去了，被对方服务器拦截返回了403。</p><p>在前端可以通过meta来设置referrer policy(来源策略)，具体可以设置哪些值以及对应的结果参考<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referrer-Policy">这里</a>。所以针对上面的403情况的解决方法，就是把referrer设置成<code>no-referrer</code>，这样发送请求不会带上referrer信息，对方服务器也就无法拦截了。</p><p>浏览器中referrer默认的值是<code>no-referrer-when-downgrade</code>，就是除了降级请求的情况以外都会带上referrer信息。降级请求是指https协议的地址去请求http协议，所以上面403的情况还有另一种解决方法就是，请求的图片地址换成http协议，自己的地址使用http协议，这样降级请求也不会带上referrer。</p><blockquote><p>简单的说 ：</p></blockquote><ol><li>HTML的 标签提供了 HTML 文档的元数据。元数据不会显示在客户端，但是会被浏览器解析。这也是为什么加在mardown文章里不会看到这段代码的原因。</li><li>HTML 的 name 属性规定了元数据的名称，这里我们用到的是referer属性，这个属性的作用是让服务器判断来源页面，即用户是从哪来的，很多时候referer被当做防盗链来使用，服务器根据你的访问来源判断是否应该让你下载这个资源，如果你的来源不和规范，比如是个恶意爬虫，那么就会产生403错误。</li><li>到这里，<code>content="no-referrer"</code>的意义就呼之欲出了，既然我们想拿到这个资源但被服务器认出来之后又被拒绝了，那么伪装一下，不告诉服务器不就行了？所以，这里content的no-referer就是表示不发送引用数据，隐藏自己的来源信息。这样，图片就能正常显示了。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://hj24.life/posts/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/">https://hj24.life/posts/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/</a></li><li><a href="https://www.jianshu.com/p/5b58ecce6443">https://www.jianshu.com/p/5b58ecce6443</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 各种折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用wiki.js</title>
      <link href="/2023/04/07/wiki/"/>
      <url>/2023/04/07/wiki/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows下运行"><a href="#Windows下运行" class="headerlink" title="Windows下运行"></a>Windows下运行</h2><blockquote><p>Windows下使用Docker Desktop快速安装。</p><p>需要注意的是Docker Desktop在Windows安装要求有：</p><ul><li><p>在BIOS开启虚拟化</p></li><li><p>在Windows上启用WSL 2功能。</p></li></ul><blockquote><p>使用 WSL 在 Windows 上安装 Linux</p></blockquote><ul><li><p>官方文档 ：<a href="https://learn.microsoft.com/en-us/windows/wsl/install">https://learn.microsoft.com/en-us/windows/wsl/install</a></p></li><li><p>WSL2迁移Docker镜像存储位置</p></li></ul><blockquote><p>由于 Docker 镜像默认存储在C盘中，C盘空间会越来越小。所以需要进行迁移操作</p></blockquote><ul><li><p>查看 Docker 官网说明，发现原来启用 WSL 后，Docker 运行数据都在 WSL 发行版中，因此镜像存储位置只能由 WSL 管理。</p><p>安装 Docker 后，Docker 会自动创建 2 个发行版：</p><p>docker-desktop： 存储在 %LOCALAPPDATA%\Docker\wsl\distro<br>docker-desktop-data： 存储在 %LOCALAPPDATA%\Docker\wsl\data（占用空间的元凶）</p></li><li><p>具体迁移步骤如下：</p></li><li><p>停止 Docker 进程</p></li><li><p>关闭所有发行版： <code>wsl --shutdown</code></p></li><li><p>导出 docker-desktop-data 发行版： <code>wsl --export docker-desktop-data D:\wsl\docker\tmp\docker-desktop-data.tar</code>                 需要先创建文件夹，防止系统找不到指定路径</p></li><li><p>注销 docker-desktop-data 发行版： <code>wsl --unregister docker-desktop-data</code></p></li><li><p>导入 docker-desktop-data 到期望迁移的目录： <code>wsl --import docker-desktop-data D:\wsl\docker\data\ D:\wsl\docker\tmp\docker-desktop-data.tar --version 2</code> （迁移目录 <code>D:\wsl\docker\data\</code> 可根据个人需求修改）</p></li><li><p>（可选）删除第 3 步导出的临时文件： D:\wsl\docker\tmp\docker-desktop-data.tar<br>（可选）另一个 Docker 发行版 docker-desktop 可使用同样方式迁移，但是其占用空间很小，不迁移亦可</p><ul><li>执行脚本可以查看附件1</li></ul></li></ul></blockquote><p>Docker Desktop的新版本无法使用。会出现WSL中的Ubuntu超时，故把版本换成 4.15.0</p><p>旧版本官网地址 ： <a href="https://docs.docker.com/desktop/release-notes/">https://docs.docker.com/desktop/release-notes/</a></p><h3 id="1-安装Docker桌面"><a href="#1-安装Docker桌面" class="headerlink" title="1.安装Docker桌面"></a>1.安装Docker桌面</h3><p>安装完毕后，创建一个wiki文件夹，在此文件中创建 <code>docker-compose.yaml</code> 并进行配置</p><pre class=" language-shell"><code class="language-shell">version: "3"services:  db:    image: postgres:11-alpine  # 如果初始化一直报错, 请降级11为9版本. (特别注意)    environment:      POSTGRES_DB: wiki      POSTGRES_PASSWORD: wikijsrocks      POSTGRES_USER: wikijs    logging:      driver: "none"    restart: unless-stopped    volumes:      - db-data:/var/lib/postgresql/data  wiki:    image: requarks/wiki:2    depends_on:      - db    environment:      DB_TYPE: postgres      DB_HOST: db      DB_PORT: 5432      DB_USER: wikijs      DB_PASS: wikijsrocks      DB_NAME: wiki    restart: unless-stopped    ports:      - "3000:3000" # 这里设置docker内部和外部的端口,比如你改成"80:3000"服务器默认输入ip/域名后就能直接访问了.      - "443:3443" # 添加默认的https映射,可不添加volumes:  db-data:</code></pre><p>这个文件简单地定义了一个PostgreSQL数据库和Wiki.js容器。</p><h3 id="2-打开命令提示符"><a href="#2-打开命令提示符" class="headerlink" title="2.打开命令提示符"></a>2.打开命令提示符</h3><p>在Windows下，进入刚刚创建的wiki文件夹中，在地址栏中输入cmd进行启动命令提示符</p><pre class=" language-shell"><code class="language-shell">docker compose up -d</code></pre><h3 id="3-启动Wiki-js"><a href="#3-启动Wiki-js" class="headerlink" title="3.启动Wiki.js"></a>3.启动Wiki.js</h3><p>打开浏览器并导航到 <a href="http://localhost/">http://localhost</a> 已完成安装并使用 Wiki.js</p><h2 id="Wiki-js页面配置"><a href="#Wiki-js页面配置" class="headerlink" title="Wiki.js页面配置"></a>Wiki.js页面配置</h2><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><ol><li><p><strong>浏览http://&lt;域名或IP地址&gt;:3000</strong></p><p><img src="https://img2023.cnblogs.com/blog/222300/202303/222300-20230311172607756-261293704.png" alt="Wiki初始化配置界面"></p><p>输入管理员邮箱、密码和Wiki.js网站域名，点击”INSTALL”系统将进行初始化工作(包括创建相关的数据库表)。</p></li><li><p><strong>开放注册功能</strong> ：</p><p>需要注意的是，如果使用Local方式，需要注册者邮箱开启STMP功能。</p></li><li><p>具体页面配置查看官网 ：<a href="https://docs.requarks.io/">https://docs.requarks.io/</a></p></li></ol><h2 id="Linux下运行"><a href="#Linux下运行" class="headerlink" title="Linux下运行"></a>Linux下运行</h2><p>查看文档 ：</p><ul><li><a href="http://imbajin.com/2019-11-26-%E7%94%A8Wiki.js%E6%9D%A5%E4%BC%98%E9%9B%85%E7%9A%84%E7%AE%A1%E7%90%86%E6%96%87%E6%A1%A3/">http://imbajin.com/2019-11-26-%E7%94%A8Wiki.js%E6%9D%A5%E4%BC%98%E9%9B%85%E7%9A%84%E7%AE%A1%E7%90%86%E6%96%87%E6%A1%A3/</a>      用Wiki.js来优雅的管理文档</li><li><a href="https://george.betterde.com/technology/20220602.html">https://george.betterde.com/technology/20220602.html</a>    使用 Wiki.js 管理企业内部文档</li><li><a href="https://laosu.ml/2022/01/03/%E8%BD%BB%E9%87%8F%E4%BD%86%E5%8A%9F%E8%83%BD%E5%BC%BA%E5%A4%A7%E7%9A%84Wiki.js/">https://laosu.ml/2022/01/03/%E8%BD%BB%E9%87%8F%E4%BD%86%E5%8A%9F%E8%83%BD%E5%BC%BA%E5%A4%A7%E7%9A%84Wiki.js/</a>         轻量但功能强大的Wiki.js</li></ul><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><h3 id="附件1"><a href="#附件1" class="headerlink" title="附件1"></a>附件1</h3><blockquote><p>PowerShell 一键迁移脚本</p></blockquote><pre class=" language-shell"><code class="language-shell"># wsl2_move_docker_image.ps1 # Docker 镜像存储位置一键迁移脚本（适用于 WSL2 版本） # # Powershell Script 3.0+ # --------------------------------------------------------------------------------------- # 脚本使用方式（需使用管理员权限执行）: # .\wsl2_move_docker_image.ps1 -target "D:\wsl\docker" # --------------------------------------------------------------------------------------- # # target: 期望迁移的目录param([string]$target="D:\wsl\docker") Write-Host "Stop docker ..." net stop "com.docker.service" Write-Host "Stop wsl ..." wsl --shutdown Write-Host "Move docker-desktop-data image ..." wsl --export docker-desktop-data $target\tmp\docker-desktop-data.tar wsl --unregister docker-desktop-data wsl --import docker-desktop-data $target\data\ $target\tmp\docker-desktop-data.tar --version 2 Remove-Item $target\tmp\docker-desktop-data.tar -recurse Write-Host "Move docker-desktop image ..." wsl --export docker-desktop $target\tmp\docker-desktop.tar wsl --unregister docker-desktop wsl --import docker-desktop $target\distro\ $target\tmp\docker-desktop.tar --version 2 Remove-Item $target\tmp\docker-desktop.tar -recurse Write-Host "Finish."</code></pre>]]></content>
      
      
      <categories>
          
          <category> 各种折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot入门</title>
      <link href="/2022/01/11/springboot/"/>
      <url>/2022/01/11/springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h1 id="第一章-JavaConfig"><a href="#第一章-JavaConfig" class="headerlink" title="第一章  JavaConfig"></a>第一章  JavaConfig</h1><ol><li><p>为什么要使用 Spring Boot</p><p>因为Spring， SpringMVC 需要使用的大量的配置文件 （xml文件）</p><p>还需要配置各种对象，把使用的对象放入到spring容器中才能使用对象</p><p>需要了解其他框架配置规则。</p></li><li><p>SpringBoot 就相当于 不需要配置文件的Spring+SpringMVC。 常用的框架和第三方库都已经配置好了。</p><p>拿来就可以使用了。</p></li><li><p>SpringBoot开发效率高，使用方便多了</p></li></ol><h2 id="1-1-JavaConfig"><a href="#1-1-JavaConfig" class="headerlink" title="1.1 JavaConfig"></a>1.1 JavaConfig</h2><p>JavaConfig: 使用java类作为xml配置文件的替代， 是配置spring容器的纯java的方式。 在这个java类这可以创建java对象，把对象放入spring容器中（注入到容器）， </p><p>使用两个注解：</p><p>1）@Configuration ： 放在一个类的上面，表示这个类是作为配置文件使用的。</p><p>2）@Bean：声明对象，把对象注入到容器中。</p><pre class=" language-java"><code class="language-java">例子：<span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Configuration:表示当前类是作为配置文件使用的。 就是用来配置容器的 *       位置：在类的上面 * *  SpringConfig这个类就相当于beans.xml */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建方法，方法的返回值是对象。 在方法的上面加入@Bean     * 方法的返回值对象就注入到容器中。     *     * @Bean: 把对象注入到spring容器中。 作用相当于&lt;bean>     *     *     位置：方法的上面     *     *     说明：@Bean,不指定对象的名称，默认是方法名是 id     *     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Student <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Student s1  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 指定对象在容器中的名称（指定&lt;bean>的id属性）     * @Bean的name属性，指定对象的名称（id）     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"lisiStudent"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Student <span class="token function">makeStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Student s2  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-2-ImporResource"><a href="#1-2-ImporResource" class="headerlink" title="1.2 @ImporResource"></a>1.2 @ImporResource</h2><p>@ImportResource 作用导入其他的xml配置文件， 等于 在xml 中这样写</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resources</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>其他配置文件<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">,</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-PropertyResource"><a href="#1-3-PropertyResource" class="headerlink" title="1.3 @PropertyResource"></a>1.3 @PropertyResource</h2><p>@PropertyResource: 读取properties属性配置文件。 使用属性配置文件可以实现外部化配置 ，</p><p>在程序代码之外提供数据。</p><p>步骤：</p><ol><li><p>在resources目录下，创建properties文件， 使用k=v的格式提供数据</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">tiger.name</span><span class="token punctuation">=</span><span class="token attr-value">东北老虎</span><span class="token attr-name">tiger.age</span><span class="token punctuation">=</span><span class="token attr-value">2</span></code></pre></li><li><p>在PropertyResource 指定properties文件的位置</p></li><li><p>使用@Value（value=”${key}”）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"tiger"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tiger</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${tiger.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${tiger.age}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Tiger{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">,</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:config.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.bjpowernode.vo"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//包扫描</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h1 id="第二章-Spring-Boot"><a href="#第二章-Spring-Boot" class="headerlink" title="第二章 Spring Boot"></a>第二章 Spring Boot</h1><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><p>SpringBoot是Spring中的一个成员， 可以简化Spring，SpringMVC的使用。 他的核心还是IOC容器。</p><p>特点：</p><ul><li><p>Create stand-alone Spring applications</p><p> 创建spring应用</p></li><li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p><p>内嵌的tomcat， jetty ， Undertow </p></li><li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p><p>提供了starter起步依赖，简化应用的配置。   </p><p>比如使用MyBatis框架 ， 需要在Spring项目中，配置MyBatis的对象 SqlSessionFactory ， Dao的代理对象</p><p>在SpringBoot项目中，在pom.xml里面, 加入一个 mybatis-spring-boot-starter依赖</p></li><li><p>Automatically configure Spring and 3rd party libraries whenever possible</p><p>尽可能去配置spring和第三方库。叫做自动配置（就是把spring中的，第三方库中的对象都创建好，放到容器中， 开发人员可以直接使用）</p></li><li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p><p> 提供了健康检查， 统计，外部化配置</p></li><li><p>Absolutely no code generation and no requirement for XML configuration</p><p>不用生成代码， 不用使用xml，做配置</p></li></ul><h2 id="2-2-创建Spring-Boot项目"><a href="#2-2-创建Spring-Boot项目" class="headerlink" title="2.2 创建Spring Boot项目"></a>2.2 创建Spring Boot项目</h2><h3 id="2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用"><a href="#2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用" class="headerlink" title="2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用"></a>2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用</h3><p>使用的地址： <a href="https://start.spring.io/">https://start.spring.io</a></p><h3 id="2-2-1-使用国内的地址"><a href="#2-2-1-使用国内的地址" class="headerlink" title="2.2.1  使用国内的地址"></a>2.2.1  使用国内的地址</h3><p><a href="https://start.springboot.io/">https://start.springboot.io</a></p><h2 id="2-3-注解的使用"><a href="#2-3-注解的使用" class="headerlink" title="2.3  注解的使用"></a>2.3  注解的使用</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>符合注解：由<span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span>        <span class="token number">1</span><span class="token punctuation">.</span>@SpringBootConfiguration    <span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> Configuration<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    <span class="token keyword">boolean</span> <span class="token function">proxyBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>说明：使用了<span class="token annotation punctuation">@SpringBootConfiguration</span>注解标注的类，可以作为配置文件使用的，    可以使用Bean声明对象，注入到容器</code></pre><p>2.@EnableAutoConfiguration</p><p>启用自动配置， 把java对象配置好，注入到spring容器中。例如可以把mybatis的对象创建好，放入到容器中</p><p>3.@ComponentScan</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span> 扫描器，找到注解，根据注解的功能创建对象，给属性赋值等等。默认扫描的包： <span class="token annotation punctuation">@ComponentScan</span>所在的类所在的包和子包。    </code></pre><h2 id="2-4-SpringBoot的配置文件"><a href="#2-4-SpringBoot的配置文件" class="headerlink" title="2.4 SpringBoot的配置文件"></a>2.4 SpringBoot的配置文件</h2><p>配置文件名称： application</p><p>扩展名有： properties( k=v) ;  yml ( k: v)</p><p>使用application.properties,   application.yml</p><p>例1：application.properties设置 端口和上下文</p><pre class=" language-xml"><code class="language-xml">#设置端口号server.port=8082#设置访问应用上下文路径， contextpathserver.servlet.context-path=/myboot</code></pre><p>例2： application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /myboot2</code></pre><h2 id="2-5-多环境配置"><a href="#2-5-多环境配置" class="headerlink" title="2.5 多环境配置"></a>2.5 多环境配置</h2><p>有开发环境， 测试环境， 上线的环境。</p><p>每个环境有不同的配置信息， 例如端口， 上下文件， 数据库url，用户名，密码等等</p><p>使用多环境配置文件，可以方便的切换不同的配置。</p><p>使用方式： 创建多个配置文件， 名称规则： application-环境名称.properties(yml)</p><p>创建开发环境的配置文件： application-dev.properties(  application-dev.yml )</p><p>创建测试者使用的配置： application-test.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#application主配置文件</span><span class="token comment" spellcheck="true">#激活使用哪个配置文件</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev //开发环境</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">test //测试环境</span></code></pre><h2 id="2-6-ConfigurationProperties"><a href="#2-6-ConfigurationProperties" class="headerlink" title="2.6 @ConfigurationProperties"></a>2.6 @ConfigurationProperties</h2><p>@ConfigurationProperties: 把配置文件的数据映射为java对象。</p><p>属性：prefix 配置文件中的某些key的开头的内容。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"school"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchoolInfo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String website<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getWebsite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> website<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWebsite</span><span class="token punctuation">(</span>String website<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>website <span class="token operator">=</span> website<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"SchoolInfo{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", website='"</span> <span class="token operator">+</span> website <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>application.properties</p><pre class=" language-pro"><code class="language-pro">#配置端口号server.port=8082#context-pathserver.servlet.context-path=/myboot#自定义key=valueschool.name=动力节点school.website=www.bjpowernode.comschool.address=北京的大兴区site=www.bjpowernode.com</code></pre><h2 id="2-7-使用jsp"><a href="#2-7-使用jsp" class="headerlink" title="2.7  使用jsp"></a>2.7  使用jsp</h2><p>SpringBoot不推荐使用jsp ，而是使用模板技术代替jsp</p><p>使用jsp需要配置：</p><p>1） 加入一个处理jsp的依赖。 负责编译jsp文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>如果需要使用servlet， jsp，jstl的功能</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>创建一个存放jsp的目录，一般叫做webapp</li></ol><p>​    index.jsp</p><ol start="4"><li>需要在pom.xml指定jsp文件编译后的存放目录。</li></ol><p>  META-INF/resources</p><p>5）创建Controller， 访问jsp</p><p>6）在application.propertis文件中配置视图解析器</p><h2 id="2-8-使用容器"><a href="#2-8-使用容器" class="headerlink" title="2.8 使用容器"></a>2.8 使用容器</h2><p>你想通过代码，从容器中获取对象。</p><p>通过SpringApplication.run(Application.class, args); 返回值获取容器。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方法原型 :</span><span class="token keyword">public</span> <span class="token keyword">static</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> primarySource<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>primarySource<span class="token punctuation">}</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ConfigurableApplicationContext <span class="token operator">:</span> 接口，是ApplicationContext的子接口<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationContext</span></code></pre><h2 id="2-9-ComnandLineRunner-接口-，-ApplcationRunner接口"><a href="#2-9-ComnandLineRunner-接口-，-ApplcationRunner接口" class="headerlink" title="2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口"></a>2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口</h2><blockquote><p>开发中可能会有这样的情景。需要在容器启动后执行一些内容。比如读取配置文件，数据库连接之类的。</p></blockquote><p>这两个接口都 有一个run方法。 执行时间在容器对象创建好后， 自动执行run（）方法。</p><p>可以完成自定义的在容器对象创建好的一些操作。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>ApplicationArguments args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="第三章-Web组件"><a href="#第三章-Web组件" class="headerlink" title="第三章 Web组件"></a>第三章 Web组件</h1><p>讲三个内容： 拦截器， Servlet ，Filter</p><h2 id="3-1-拦截器"><a href="#3-1-拦截器" class="headerlink" title="3.1 拦截器"></a>3.1 拦截器</h2><p>拦截器是SpringMVC中一种对象，能拦截器对Controller的请求。</p><p>拦截器框架中有系统的拦截器， 还可以自定义拦截器。  实现对请求预先处理。</p><p>实现自定义拦截器：</p><ol><li><p>创建类实现SpringMVC框架的HandlerInterceptor接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>                            <span class="token comment" spellcheck="true">//请求</span>                            HttpServletRequest request<span class="token punctuation">,</span>                            <span class="token comment" spellcheck="true">//应答</span>                           HttpServletResponse response<span class="token punctuation">,</span>                            <span class="token comment" spellcheck="true">//被拦截的控制器对象</span>                           Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>2.需在SpringMVC的配置文件中，声明拦截器</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        &lt;mvc:path="url" />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>拦截器类全限定名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot中注册拦截器：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//才会起作用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加拦截器对象， 注入到容器中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建拦截器对象</span>        HandlerInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定拦截的请求uri地址</span>        String path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/user/**"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定不拦截的地址</span>        String excludePath  <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/user/login"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>excludePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-Servlet"><a href="#3-2-Servlet" class="headerlink" title="3.2  Servlet"></a>3.2  Servlet</h2><p>在SpringBoot框架中使用Servlet对象。</p><p>使用步骤：</p><ol><li>创建Servlet类。 创建类继承HttpServlet</li><li>注册Servlet ，让框架能找到Servlet</li></ol><p> 例子：</p><p>1.创建自定义Servlet</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建Servlet类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无论如何,都使用doPost</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//使用HttpServletResponse输出数据，应答结果</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定数据格式</span>        PrintWriter out  <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===执行的是Servlet=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>注册Servlet</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplictionConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义方法， 注册Servlet对象</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//public ServletRegistrationBean(T servlet, String... urlMappings)</span>        <span class="token comment" spellcheck="true">//第一个参数是 Servlet对象， 第二个是url地址</span>        <span class="token comment" spellcheck="true">//ServletRegistrationBean bean =</span>                <span class="token comment" spellcheck="true">//new ServletRegistrationBean( new MyServlet(),"/myservlet");</span>        ServletRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;url-pattern></span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-过滤器Filter"><a href="#3-3-过滤器Filter" class="headerlink" title="3.3 过滤器Filter"></a>3.3 过滤器Filter</h2><p>Filter是Servlet规范中的过滤器，可以处理请求， 对请求的参数， 属性进行调整。 常常在过滤器中处理字符编码</p><p>在框架中使用过滤器：</p><ol><li>创建自定义过滤器类</li><li>注册Filter过滤器对象</li></ol><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 自定义过滤器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了MyFilter，doFilter "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注册Filter</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplicationConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        FilterRegistrationBean bean  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-字符集过滤器"><a href="#3-4-字符集过滤器" class="headerlink" title="3.4 字符集过滤器"></a>3.4 字符集过滤器</h2><p>CharacterEncodingFilter : 解决post请求中乱码的问题</p><p>在SpringMVC框架中， 在web.xml 注册过滤器。 配置他的属性。 </p><p>spring boot</p><p>第一种方式：</p><p>使用步骤：</p><ol><li><p>配置字符集过滤器</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSystemConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注册Servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MyServlet myServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletRegistrationBean reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>myServlet<span class="token punctuation">,</span><span class="token string">"/myservlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注册Filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        FilterRegistrationBean reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用框架中的过滤器类</span>        CharacterEncodingFilter filter  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定使用的编码方式</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定request ， response都使用encoding的值</span>        filter<span class="token punctuation">.</span><span class="token function">setForceEncoding</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reg<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定 过滤的url地址</span>        reg<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>修改application.properties文件， 让自定义的过滤器起作用</p></li></ol><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#SpringBoot中默认已经配置了CharacterEncodingFilter。 编码默认ISO-8859-1</span><span class="token comment" spellcheck="true">#设置enabled=false 作用是关闭系统中配置好的过滤器， 使用自定义的CharacterEncodingFilter</span><span class="token attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre><p>第二种方式</p><p>指定系统框架自带的过滤器 ,不需要注册Filter</p><p>修改application.properties文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9001</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/myboot</span><span class="token comment" spellcheck="true">#让系统的CharacterEncdoingFilter生效</span><span class="token attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#指定使用的编码方式</span><span class="token attr-name">server.servlet.encoding.charset</span><span class="token punctuation">=</span><span class="token attr-value">utf-8</span><span class="token comment" spellcheck="true">#强制request，response都使用charset属性的值</span><span class="token attr-name">server.servlet.encoding.force</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><h1 id="第四章-ORM-操作-MySQL"><a href="#第四章-ORM-操作-MySQL" class="headerlink" title="第四章 ORM 操作 MySQL"></a>第四章 ORM 操作 MySQL</h1><p>使用MyBatis框架操作数据，  在SpringBoot框架集成MyBatis</p><p>使用步骤：</p><ol><li><p>mybatis起步依赖 ： 完成mybatis对象自动配置， 对象放在容器中</p></li><li><p>pom.xml 指定把src/main/java目录中的xml文件包含到classpath中</p></li><li><p>创建实体类Student</p></li><li><p>创建Dao接口 StudentDao , 创建一个查询学生的方法 </p></li><li><p>创建Dao接口对应的Mapper文件， xml文件， 写sql语句</p></li><li><p>创建Service层对象， 创建StudentService接口和他的实现类。 去调用dao对象的方法。完成数据库的操作</p></li><li><p>创建Controller对象，访问Service。</p></li><li><p>写application.properties文件</p><p>配置数据库的连接信息。</p></li></ol><h3 id="第一种方式-：-Mapper"><a href="#第一种方式-：-Mapper" class="headerlink" title="第一种方式 ： @Mapper"></a>第一种方式 ： @Mapper</h3><p>@Mapper：放在dao接口的上面， 每个接口都需要使用这个注解。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Mapper：告诉MyBatis这是dao接口，创建此接口的代理对象。 *     位置：在类的上面 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>    Student <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"stuId"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="第二种方式-MapperScan"><a href="#第二种方式-MapperScan" class="headerlink" title="第二种方式  @MapperScan"></a>第二种方式  @MapperScan</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @MapperScan: 找到Dao接口和Mapper文件 *     basePackages：Dao接口所在的包名 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.bjpowernode.dao"</span><span class="token punctuation">,</span><span class="token string">"com.bjpowernode.mapper"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="第三种方式：-Mapper文件和Dao接口分开管理"><a href="#第三种方式：-Mapper文件和Dao接口分开管理" class="headerlink" title="第三种方式： Mapper文件和Dao接口分开管理"></a>第三种方式： Mapper文件和Dao接口分开管理</h3><p> 现在把Mapper文件放在resources目录下</p><p>1）在resources目录中创建子目录 （自定义的）,例如mapper目录</p><p>2）把mapper.xml文件放到 mapper目录中</p><p>3）在application.properties文件中，指定mapper文件的目录</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#指定mapper文件的位置</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mapper/*.xml</span><span class="token comment" spellcheck="true">#指定mybatis的日志</span><span class="token attr-name">mybatis.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre><ol start="4"><li>在pom.xml中指定 把resources目录中的文件 ， 编译到目标目录中</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--resources插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h3 id="第四个-事务"><a href="#第四个-事务" class="headerlink" title="第四个  事务"></a>第四个  事务</h3><p>Spring框架中的事务：</p><p>1） 管理事务的对象： 事务管理器（接口， 接口有很多的实现类）</p><p>​      例如：使用Jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager</p><p>2 ) 声明式事务：  在xml配置文件或者使用注解说明事务控制的内容</p><p>​     控制事务： 隔离级别，传播行为， 超时时间</p><p>3）事务处理方式：</p><p>​     1 ） Spring框架中的@Transactional</p><p>​     2 )    aspectj框架可以在xml配置文件中，声明事务控制的内容</p><p>​    </p><p>SpringBoot中使用事务： 上面的两种方式都可以。</p><p>步骤 : </p><p>1）在业务方法的上面加入@Transactional ,  加入注解后，方法有事务功能了。</p><p>2）明确的在 主启动类的上面 ，加入@EnableTransactionManager</p><p>例子：</p><pre class=" language-java"><code class="language-java">Services实现类    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/** * @Transactional: 表示方法的有事务支持 *       默认：使用库的隔离级别， REQUIRED 传播行为； 超时时间  -1 *       抛出运行时异常，回滚事务 */</span><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addStudent</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务方法addStudent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rows  <span class="token operator">=</span>  studentDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行sql语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//抛出一个运行时异常， 目的是回滚事务</span>    <span class="token comment" spellcheck="true">//int m   = 10 / 0 ;</span>    <span class="token keyword">return</span> rows<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//control类</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> StudentService service<span class="token punctuation">;</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addStudent"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">addStudent</span><span class="token punctuation">(</span>String naem<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">{</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">addStudent</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"添加学生: "</span><span class="token operator">+</span>rows<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第五章-接口架构风格-—RESTful"><a href="#第五章-接口架构风格-—RESTful" class="headerlink" title="第五章 接口架构风格 —RESTful"></a>第五章 接口架构风格 —RESTful</h1><p>接口： API（Application Programming Interface，应用程序接口）是一些预先定义的接口（如函数、HTTP接口），或指<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F/224122">软件系统</a>不同组成部分衔接的约定。 用来提供<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>与开发人员基于某<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6">软件</a>或硬件得以访问的一组<a href="https://baike.baidu.com/item/%E4%BE%8B%E7%A8%8B/2390628">例程</a>，而又无需访问源码，或理解内部<a href="https://baike.baidu.com/item/%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/9905789">工作机制</a>的细节。</p><p>接口（API）： 可以指访问servlet， controller的url，   调用其他程序的 函数</p><p>架构风格： api组织方式（样子）</p><p>   就是一个传统的：    <a href="http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26">http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26</a> </p><p>​                                      在地址上提供了 访问的资源名称addStudent, 在其后使用了get方式传递参数。</p><h3 id="5-1-REST"><a href="#5-1-REST" class="headerlink" title="5.1  REST"></a>5.1  REST</h3><p>RESTful架构风格</p><p>1)REST :  （英文： Representational State Transfer , 中文： 表现层状态转移)。</p><p>   REST：是一种接口的架构风格和设计的理念，不是标准。</p><p>   优点： 更简洁，更有层次</p><p>   表现层状态转移: </p><p>​         表现层就是视图层， 显示资源的， 通过视图页面，jsp等等显示操作资源的结果。</p><p>​          状态： 资源变化</p><p>​         转移： 资源可以变化的。 资源能创建，new状态，  资源创建后可以查询资源， 能看到资源的内容，</p><p>这个资源内容 ，可以被修改， 修改后资源 和之前的不一样。  </p><p>2）REST中的要素：</p><p>   用REST表示资源和对资源的操作。  在互联网中，表示一个资源或者一个操作。 </p><p>   资源使用url表示的， 在互联网， 使用的图片，视频， 文本，网页等等都是资源。</p><p>   资源是用名词表示。</p><p>  对资源： </p><p>​        查询资源： 看，通过url找到资源。 </p><p>​        创建资源： 添加资源</p><p>​        更新资源：更新资源 ，编辑</p><p>​        删除资源： 去除</p><p>​       </p><p> 资源使用url表示，通过名词表示资源。</p><p>​     在url中，使用名词表示资源， 以及访问资源的信息,  在url中，使用“ / “ 分隔对资源的信息</p><p>​     <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p> 使用http中的动作（请求方式）， 表示对资源的操作（CURD）</p><p>   GET:  查询资源  –  sql select</p><p>​                 处理单个资源： 用他的单数方式</p><p>​                  <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p>​                 <a href="http://localhost:8080/myboot/student/1001/1">http://localhost:8080/myboot/student/1001/1</a></p><p>​                处理多个资源：使用复数形式</p><p>​                  <a href="http://localhost:8080/myboot/students/1001/1002">http://localhost:8080/myboot/students/1001/1002</a></p><p>​                </p><p>   POST: 创建资源  – sql insert</p><p>​                <a href="http://localhost:8080/myboot/student">http://localhost:8080/myboot/student</a></p><p>​                在post请求中传递数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>   PUT： 更新资源  –  sql  update</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student/1<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>   DELETE: 删除资源  – sql delete</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student/1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除1的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p> 需要的分页，  排序等参数，依然放在  url的后面， 例如 </p><p> <a href="http://localhost:8080/myboot/students?page=1&amp;pageSize=20">http://localhost:8080/myboot/students?page=1&amp;pageSize=20</a></p><p>3） 一句话说明REST： </p><p>​    使用url表示资源 ，使用http动作操作资源。</p><ol start="4"><li>注解</li></ol><p>  @PathVariable :  从url中获取数据</p><p>  @GetMapping:    支持的get请求方式，  等同于 @RequestMapping( method=RequestMethod.GET)</p><p>  @PostMapping:  支持post请求方式 ，等同于 @RequestMapping( method=RequestMethod.POST)</p><p>  @PutMapping:  支持put请求方式，  等同于 @RequestMapping( method=RequestMethod.PUT)</p><p>   @DeleteMapping: 支持delete请求方式，  等同于 @RequestMapping( method=RequestMethod.DELETE)</p><p>  @RestController:  符合注解， 是@Controller 和@ResponseBody组合。</p><p>​               在类的上面使用@RestController ， 表示当前类者的所有方法都加入了 @ResponseBody</p><ol start="5"><li><p>Postman : 测试工具</p><p>使用Postman : 可以测试 get ，post ， put ，delete 等请求</p></li></ol><h3 id="5-2-在页面中或者ajax中，支持put，delete请求"><a href="#5-2-在页面中或者ajax中，支持put，delete请求" class="headerlink" title="5.2  在页面中或者ajax中，支持put，delete请求"></a>5.2  在页面中或者ajax中，支持put，delete请求</h3><p>在SpringMVC中 有一个过滤器， 支持post请求转为put ,delete</p><p>过滤器： org.springframework.web.filter.HiddenHttpMethodFilter</p><p>作用： 把请求中的post请求转为 put ， delete</p><p>实现步骤：</p><ol><li>application.properties(yml) : 开启使用 HiddenHttpMethodFilter 过滤器</li><li>在请求页面中，包含 _method参数， 他的值是 put， delete  ，  发起这个请求使用的post方式</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的注册界面</title>
      <link href="/2021/10/19/fang-qq-de-zhu-ce-jie-mian/"/>
      <url>/2021/10/19/fang-qq-de-zhu-ce-jie-mian/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安卓开发"><a href="#安卓开发" class="headerlink" title="安卓开发"></a>安卓开发</h1><h4 id="实现一个仿QQ的注册界面"><a href="#实现一个仿QQ的注册界面" class="headerlink" title="实现一个仿QQ的注册界面"></a>实现一个仿QQ的注册界面</h4><ol><li>相对布局RelativeLayout</li><li>线性布局LinearLayout</li><li>drawable中selector标签的使用(用来实现Button的点击效果)</li><li>EditText的属性标签使用</li><li>TextView的属性标签使用</li><li>ImageView的属性标签的使用</li></ol><h3 id="1-设计分析"><a href="#1-设计分析" class="headerlink" title="1.设计分析"></a>1.设计分析</h3><ul><li><p>控件分析</p><table><thead><tr><th align="center">看到的控件</th><th align="center">业务功能</th><th align="center">实际控件</th></tr></thead><tbody><tr><td align="center">企鹅图标</td><td align="center">无</td><td align="center">ImageView</td></tr><tr><td align="center">“QQ”文本</td><td align="center">无</td><td align="center">TextView</td></tr><tr><td align="center">账号输入框</td><td align="center">编辑输入账号(只能输入数字)</td><td align="center">EditText</td></tr><tr><td align="center">密码输入框</td><td align="center">编辑输入密码(只能输入数字)</td><td align="center">EditText</td></tr><tr><td align="center">注册按钮</td><td align="center">执行注册</td><td align="center">Button</td></tr><tr><td align="center">“阅读并同意”文本</td><td align="center">无(颜色为白色)</td><td align="center">TextView</td></tr><tr><td align="center">“服务条款”</td><td align="center">无(颜色为黑色)</td><td align="center">TextView</td></tr></tbody></table></li><li><p>布局分析</p><p>使用相对布局大框架中嵌入线性布局</p><p>示意图如下:相对布局为红色,线性布局为黑色</p><p><img src="https://img-blog.csdnimg.cn/3f2456d0f14c418ba0e8684fbd662861.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="布局分析"></p></li></ul><h3 id="2-编程中出现的问题"><a href="#2-编程中出现的问题" class="headerlink" title="2.编程中出现的问题"></a>2.编程中出现的问题</h3><ul><li>Button的点击效果颜色没有反应</li></ul><p>提示不兼容.(应该是版本问题)</p><p>解决办法如下:改为红色圈圈中的Bridge即可</p><p><img src="https://img-blog.csdnimg.cn/376d474cdff0460ba85526db74597c39.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="不兼容问题"></p><h3 id="3-Button的点击效果实现"><a href="#3-Button的点击效果实现" class="headerlink" title="3.Button的点击效果实现"></a>3.Button的点击效果实现</h3><ol><li><p>在drawable下面创建一个xml文件:bt_bg.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>selector xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>按下时的图形 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"true"</span>   android<span class="token operator">:</span>drawable<span class="token operator">=</span><span class="token string">"@drawable/bg2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 松开时的图形 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"false"</span>   android<span class="token operator">:</span>drawable<span class="token operator">=</span><span class="token string">"@drawable/bg1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>selector<span class="token operator">></span></code></pre></li><li><p>在activity_main.xml文件中去实现</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>Button        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bt_bg"</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li><li><p>在颜色点击效果的基础上实现Button的圆角效果</p><pre class=" language-java"><code class="language-java">#在drawable下面创建一个xml文件<span class="token operator">:</span>bt_bg3<span class="token punctuation">.</span>xml    <span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>selector xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item android<span class="token operator">:</span>state_pressed<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义当button 处于pressed 状态时的形态。<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>shape<span class="token operator">></span>            <span class="token operator">&lt;</span>solid android<span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"#FF00FF"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置按钮的四个角为弧形 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> android<span class="token operator">:</span>radius 弧形的半径 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>corners android<span class="token operator">:</span>radius<span class="token operator">=</span><span class="token string">"20dip"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> padding：Button里面的文字与Button边界的间隔 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>padding android<span class="token operator">:</span>bottom<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>left<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>right<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>top<span class="token operator">=</span><span class="token string">"10dp"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>shape<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义button默认时的形态<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>shape<span class="token operator">></span>            <span class="token operator">&lt;</span>solid android<span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"#000000"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置按钮的四个角为弧形 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> android<span class="token operator">:</span>radius 弧形的半径 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>corners android<span class="token operator">:</span>radius<span class="token operator">=</span><span class="token string">"20dip"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> padding：Button里面的文字与Button边界的间隔 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>padding android<span class="token operator">:</span>bottom<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>left<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>right<span class="token operator">=</span><span class="token string">"10dp"</span> android<span class="token operator">:</span>top<span class="token operator">=</span><span class="token string">"10dp"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>shape<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>selector<span class="token operator">></span>#xml文件中应用                    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bt_bg3"</span></code></pre></li></ol><h3 id="activity-main-xml源码如下"><a href="#activity-main-xml源码如下" class="headerlink" title="activity_main.xml源码如下"></a>activity_main.xml源码如下</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>RelativeLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span>    xmlns<span class="token operator">:</span>tools<span class="token operator">=</span><span class="token string">"http://schemas.android.com/tools"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    tools<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">".MainActivity"</span>    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/fengmian"</span><span class="token operator">></span>   #APP界面的背景图    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tubiao"</span>         android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span>        android<span class="token operator">:</span>layout_marginStart<span class="token operator">=</span><span class="token string">"25dp"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"80dp"</span>        android<span class="token operator">:</span>layout_marginLeft<span class="token operator">=</span><span class="token string">"25dp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ImageView  #左上角QQ图标            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/tubiao"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"QQ"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"36sp"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"43dp"</span>        android<span class="token operator">:</span>layout_below<span class="token operator">=</span><span class="token string">"@+id/tubiao"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>RelativeLayout            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ImageView                android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/mobile"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"20dp"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/ipone"</span><span class="token operator">></span>    #输入账号的手机图标            <span class="token operator">&lt;</span><span class="token operator">/</span>ImageView<span class="token operator">></span>            <span class="token operator">&lt;</span>EditText                android<span class="token operator">:</span>layout_toRightOf<span class="token operator">=</span><span class="token string">"@+id/mobile"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"@string/input_mobile"</span>                android<span class="token operator">:</span>inputType<span class="token operator">=</span><span class="token string">"number"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>EditText<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span>        <span class="token operator">&lt;</span>RelativeLayout            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ImageView                android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/mima"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"20dp"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/mima"</span><span class="token operator">></span>    #输入密码的密码矢量图            <span class="token operator">&lt;</span><span class="token operator">/</span>ImageView<span class="token operator">></span>            <span class="token operator">&lt;</span>EditText                android<span class="token operator">:</span>layout_toRightOf<span class="token operator">=</span><span class="token string">"@+id/mima"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>                android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"@string/input_password"</span>                android<span class="token operator">:</span>inputType<span class="token operator">=</span><span class="token string">"number"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>EditText<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span>        <span class="token operator">&lt;</span>Button            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"38dp"</span>            android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"22dp"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/login"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"20sp"</span>            android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/bty_ys"</span><span class="token operator">></span>   实现Button的点击效果        <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span>        android<span class="token operator">:</span>layout_centerHorizontal<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>layout_alignParentBottom<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>layout_marginBottom<span class="token operator">=</span><span class="token string">"42dp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/login_message"</span>            android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@android:color/white"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"@string/service"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span></code></pre><h3 id="strings-xml源码"><a href="#strings-xml源码" class="headerlink" title="strings.xml源码"></a>strings.xml源码</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>resources<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"app_name"</span><span class="token operator">></span>qq<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"input_mobile"</span><span class="token operator">></span>输入手机号<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"input_password"</span><span class="token operator">></span>输入密码<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"login"</span><span class="token operator">></span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"login_message"</span><span class="token operator">></span>阅读并同意<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"service"</span><span class="token operator">></span>服务条款<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>resources<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五子棋程序设计带来的坐标系思考</title>
      <link href="/2021/10/18/wu-zi-qi-cheng-xu-she-ji-dai-lai-de-zuo-biao-xi-si-kao/"/>
      <url>/2021/10/18/wu-zi-qi-cheng-xu-she-ji-dai-lai-de-zuo-biao-xi-si-kao/</url>
      
        <content type="html"><![CDATA[<h1 id="五子棋程序设计带来的坐标系思考"><a href="#五子棋程序设计带来的坐标系思考" class="headerlink" title="五子棋程序设计带来的坐标系思考"></a>五子棋程序设计带来的坐标系思考</h1><ol><li><h3 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h3><p>棋盘大小:15*15</p><p>空棋盘开局,黑棋先下,白棋后下,一次只能下一子.棋子下在交叉点上,棋子下在棋盘上之后,不能移动.</p><p>当相同颜色的五颗棋子连在一起的时候,就认为胜负已分.连在一起的方法有4个:水平,垂直,左上右下,左下右上;如果整个棋盘都摆满棋子之后,仍旧不分胜负,则认为和局.</p></li><li><h3 id="编程遇到的问题"><a href="#编程遇到的问题" class="headerlink" title="编程遇到的问题"></a>编程遇到的问题</h3><ol><li><h4 id="怎么样定义棋盘的坐标"><a href="#怎么样定义棋盘的坐标" class="headerlink" title="怎么样定义棋盘的坐标"></a>怎么样定义棋盘的坐标</h4><p>编程的时候数组或者列表的下标都是从0开始的,但是五子棋棋盘的坐标是从1开始的,如何解决两者之间的不协调?</p><p>第一种方法:把每个二维数组或列表的索引值全部加1,比如说五子棋棋盘第4行第6列,则对应的坐标是arr[3] [5].</p><p>第二种方法:直接忽略x=0和y=0这一行一列.分配内存时,直接分配16*16的内存空间做为棋盘即可.</p><ul><li>经过敲代码后发现,第一种方法需要来回切换,比较繁琐,代码量增加.因此采用第二种方法</li></ul></li><li><h4 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h4><p>对于计算机来说,一般会把左上角作为坐标系原点.从左往右是水平方向y,从上往下是垂直方向x</p><p>比如(4,6)表示第4行第6列,如下图:</p><p><img src="https://img-blog.csdnimg.cn/e1142dabff20449ba48dc5248ecde8f6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="计算机坐标系"></p><p>对于五子棋棋盘来说,4个角落的坐标点分别为:</p><ul><li>左上角:(1,1)</li><li>左下角:(15,1)</li><li>右上角:(1,15)</li><li>右下角:(15,15)</li></ul></li><li><h4 id="胜负判断"><a href="#胜负判断" class="headerlink" title="胜负判断"></a>胜负判断</h4><p>相同颜色的五颗棋子连在一起,则胜负已分.有以下几种极端情况:</p><ul><li>从左到右:判断(x,y-4)~(x,y+4)这9个坐标中是否有连续5颗棋子连在一起</li><li>从上到下:判断(x-4,y)~(x+4,y)这9个坐标中是否有连续5颗棋子连在一起</li><li>左上右下:判断(x-4,y-4)~(x+4,y+4)这9个坐标中是否有连续5颗棋子连在一起</li><li>左下右上:判断(x+4,y-4)~(x-4,y+4)这9个坐标中是否有连续5颗棋子连在一起</li></ul></li></ol></li><li><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><p>创建一个棋盘类</p><p>chessboard.py</p><pre class=" language-py"><code class="language-py">#棋盘类class ChessBoard:    # 棋盘大小    BOARD_SIZE = 15    # 初始化    def __init__(self):        self.board = []        for i in range(ChessBoard.BOARD_SIZE+1):            tmp = []            for j in range(ChessBoard.BOARD_SIZE+1):                tmp.append(0)            self.board.append(tmp)    #清空棋盘    def initBoard(self):        for i in range(1,ChessBoard.BOARD_SIZE+1):            for j in range(1,ChessBoard.BOARD_SIZE+1):                self.board[i][j] = '+'  # 实现方法initBoard(),对棋盘进行初始化,把所有的空格都设置成'+'符号    # 打印棋盘    def printBoard(self):        # 打印列号        print('  ',end=' ')        for i in range(1,ChessBoard.BOARD_SIZE+1):            ch = chr(96+i)            print(ch,end=' ')        print()        # 打印行号和棋盘        for i in range(1,ChessBoard.BOARD_SIZE+1):            # 打印行号            print('%2d' % i,end=' ')            # 打印棋盘            for j in range(1,ChessBoard.BOARD_SIZE+1):                print(self.board[i][j],end=' ')            print()    # 放置棋子    # 参数1 pos位置坐标 类型是长度为2的列表或元组    # 参数2 color棋子颜色    def setChess(self,pos,color):        x = pos[0]        y = pos[1]        self.board[x][y] = color    # 放置棋子    def setChessMan(self,chessMan):            pos = chessMan.getPos()            color = chessMan.getColor()            self.setChess(pos,color)    # 根据位置读取棋子的颜色    def getChess(self,pos):        x,y = pos        return self.board[x][y]    # 判断某个坐标点是否为空    def isEmpty(self,pos):        chess = self.getChess(pos)        if chess == '+':            return True        #非空即黑或白        return False</code></pre><p>创建一个棋子类</p><p>chessman.py</p><pre class=" language-py"><code class="language-py">#棋子类class ChessMan:    # 初始化    def __init__(self):        self.color = 'x'        self.pos = (0,0)    # 设置颜色    def setColor(self,color):        self.color = color    # 获取颜色    def getColor(self):        return self.color    # 设置位置    def setPos(self,pos):        self.pos = pos    # 获取位置    def getPos(self):        return self.pos</code></pre><p>测试代码</p><p>main.py</p><pre class=" language-py"><code class="language-py"># from 文件名 import 类名from chessboard import *from chessman import *# 测试打印棋盘def test1():    board = ChessBoard()    board.initBoard()    board.printBoard()#测试摆放棋子def test2():    board = ChessBoard()    board.initBoard()    #测试setChess()摆放棋子    board.setChess((3,5),'x')    #测试setChessMan()摆放棋子    chessMan = ChessMan()    chessMan.setColor('o')    chessMan.setPos((4,6))    board.setChessMan(chessMan)    board.printBoard()    ret = board.isEmpty((3,6))    print(ret)if __name__ == '__main__':  # 相当于一个入口,当其他模块被调用的时候,先运行此模块    test2()</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis入门</title>
      <link href="/2021/08/09/mybatis/"/>
      <url>/2021/08/09/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="JDK-静态代理"><a href="#JDK-静态代理" class="headerlink" title="JDK - 静态代理"></a>JDK - 静态代理</h2><blockquote><p>静态代理要求目标和代理对象实现同一个业务接口. 代理对象中的核心功能是由目标来完成的, 代理对象负责增强功能.</p></blockquote><h3 id="什么是静态代理"><a href="#什么是静态代理" class="headerlink" title="什么是静态代理"></a>什么是静态代理</h3><p>  它是代理模式的一种.<br>  它具备以下特点:</p><ol><li>目标对象和代理对象实现同一个业务接口</li><li>目标对象必须实现接口</li><li>代理对象在程序运行前就已经存在</li><li>能够灵活的进行目标对象的切换,却无法进行功能的灵活处理(使用动态代理解决此问题)</li></ol><h3 id="静态代理的实现"><a href="#静态代理的实现" class="headerlink" title="静态代理的实现"></a>静态代理的实现</h3><p>  业务功能:请明星进行节目表演.<br>  明星刘德华:目标对象(无法直接访问)<br>  刘德华助理:代理对象(我们可以访问,他还可以跟明星对接)<br>  我们      :客户端对象</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>业务接口 : </p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//规定的唱歌的业务功能</span>    <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>目标对象 : </p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     *   目标对象:刘德华,实现业务接口中的功能,进行唱歌表演     */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStarLiu</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是刘德华,我正在表演唱歌............"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>代理对象 : </p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Agent</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//类中的成员变量设计为接口</span>    <span class="token keyword">public</span> Service target<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//目标对象</span>    <span class="token comment" spellcheck="true">//传入目标对象,方法的参数设计为接口</span>    <span class="token keyword">public</span> <span class="token function">Agent</span><span class="token punctuation">(</span>Service target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"预订时间.........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"预订场地.........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//切记切记:业务功能必须由目标对象亲自实现</span><span class="token comment" spellcheck="true">//        SuperStarLiu liu = new SuperStarLiu();</span><span class="token comment" spellcheck="true">//        liu.sing();</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        SuperStarZhou zhou = new SuperStarZhou();</span><span class="token comment" spellcheck="true">//        zhou.sing();</span>        <span class="token comment" spellcheck="true">//面向接口编程:调用时,接口指向实现类</span>        target<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结算费用.........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端对象 : </p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//测试功能</span>    <span class="token comment" spellcheck="true">//        SuperStarLiu liu = new SuperStarLiu();</span>    <span class="token comment" spellcheck="true">//        liu.sing();</span>    <span class="token comment" spellcheck="true">//        Agent agent = new Agent();</span>    <span class="token comment" spellcheck="true">//        agent.sing();</span>            <span class="token comment" spellcheck="true">//有接口和实现类,必须使用接口指向实现类(规范)</span>            Service agent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Agent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            agent<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h6 id="注意-什么是面向接口编程"><a href="#注意-什么是面向接口编程" class="headerlink" title="注意 : 什么是面向接口编程"></a>注意 : 什么是面向接口编程</h6><p>类中的成员变量设计为接口, 方法的形参设计为接口, 方法的返回值设计为接口, 调用时接口指向实现类.</p><h2 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK - 动态代理"></a>JDK - 动态代理</h2><blockquote><p>代理对象在程序运行的过程中动态在内存构建.可以灵活的进行业务功能的切换.</p></blockquote><h3 id="什么是动态代理"><a href="#什么是动态代理" class="headerlink" title="什么是动态代理"></a>什么是动态代理</h3><ol><li>目标对象必须实现业务接口</li><li>JDK代理对象不需要实现业务接口</li><li>JDK动态代理的对象在程序运行前不存在.在程序运行时动态的在内存中构建</li><li>JDK动态代理灵活的进行业务功能的切换</li><li>本类中的方法(非接口中的方法)不能被代理</li></ol><h3 id="动态代理用到的类和接口"><a href="#动态代理用到的类和接口" class="headerlink" title="动态代理用到的类和接口"></a>动态代理用到的类和接口</h3><h5 id="1-Proxy类"><a href="#1-Proxy类" class="headerlink" title="1. Proxy类"></a>1. Proxy类</h5><p>它是java.lang.reflect.Proxy包下的类. 它有一个方法Proxy.newProxyInstance(…..)专门用来生成动态代理对象.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//类加载器</span>                                      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//目标对象实现的所有接口</span>                                      InvocationHandler h<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//它就类似于Agent的功能,代理的功能和目标对象的业务功能调用在这</span>        <span class="token keyword">throws</span> IllegalArgumentException    <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h5 id="2-Method类"><a href="#2-Method类" class="headerlink" title="2. Method类"></a>2. Method类</h5><p>反射用的类,用来进行目标对象的方法的反射调用.</p><p>method对象接住我们正在调用的方法sing(),show()</p><p>method==sing(),show()</p><p>method.invoke();==&gt;手工调用目标方法   sing();    show();</p><h5 id="3-InvocationHandler接口"><a href="#3-InvocationHandler接口" class="headerlink" title="3. InvocationHandler接口"></a>3. InvocationHandler接口</h5><p>它是实现代理和业务功能的.我们在调用时使用匿名内部实现.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义一个接口</span><span class="token keyword">interface</span> <span class="token class-name">Service</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Service service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哈哈哈.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    service<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="动态代理的实现"><a href="#动态代理的实现" class="headerlink" title="动态代理的实现"></a>动态代理的实现</h3><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//类中的成员变量设计为接口,目标对象</span>    Service target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//传入目标对象</span>    <span class="token keyword">public</span> <span class="token function">ProxyFactory</span><span class="token punctuation">(</span>Service target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回动态代理对象</span>    <span class="token keyword">public</span> Object <span class="token function">getAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">//ClassLoader loader, 类加载器,完成目标对象的加载</span>            target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//Class&lt;?>[] interfaces,目标对象实现的所有接口</span>            target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//InvocationHandler h,实现代理功能的接口 ,我们传入的是匿名内部实现</span>            <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>                    <span class="token comment" spellcheck="true">//创建代理对象</span>                    Object proxy<span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//method就是目标方法sing(),show()</span>                    Method method<span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//目标方法的参数</span>                    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//代理功能</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"预订时间........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//代理功能</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"预订场地........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//主业务功能实现</span>                    <span class="token comment" spellcheck="true">//target.sing();还是写死了方法的调用, 不成</span>                    <span class="token comment" spellcheck="true">//sing(),show(),one()</span>                    Object obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//代理功能</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结算费用........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//切记:这个是目标方法的返回值</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类 : </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ProxyFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SuperStarLiu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Service agent <span class="token operator">=</span> <span class="token punctuation">(</span>Service<span class="token punctuation">)</span>factory<span class="token punctuation">.</span><span class="token function">getAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    agent<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>接口能够指向所有的实现类.</p></blockquote><p>如果在测试类中把<code>Service agent = (Service)factory.getAgent();</code> 换成<code>ServiceImpl agent = (ServiceImpl)factory.getAgent();</code> 是不行的.</p><ul><li>因为此时的 ServiceImpl 对象不是 之前的 ServiceImpl 对象, 而是被代理类增强后, 有增强功能的 ServiceImpl 对象, ServiceImpl类无法接住此对象.</li><li>使用接口可以指向新的实现.</li></ul><h2 id="一个简易MyBatis框架"><a href="#一个简易MyBatis框架" class="headerlink" title="一个简易MyBatis框架"></a>一个简易MyBatis框架</h2><p>常用的框架SSM</p><p>Spring : 它是整合其它框架的框架. 它的核心是IOC和AOP.</p><p>SpringMVC : 它是Spring家族的一员, 专门用来优化控制器的.提供了极简单数据提交, 数据携带, 页面跳转等功能.</p><p>MyBatis : 是持久化层的一个框架. 用来进行数据库访问的优化. 专注于sql语句. 极大简化了JDBC的访问.</p><h3 id="添加框架的步骤"><a href="#添加框架的步骤" class="headerlink" title="添加框架的步骤 :"></a>添加框架的步骤 :</h3><ol><li><p>新建库建表</p></li><li><p>新建maven项目</p></li><li><p>修改目录, 添加缺失的目录</p></li><li><p>修改pom.xml文件, 添加MyBatis的依赖, 添加MySQL的依赖</p></li><li><p>修改pom.xml文件, 添加资源文件的指定</p></li><li><p>在idea中添加数据库的可视化</p></li><li><p>添加jdbc.properties配置文件(数据库的配置)</p><pre class=" language-java"><code class="language-java">jdbc<span class="token punctuation">.</span>driverClassName<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverjdbc<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>ssm<span class="token operator">?</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span>Asia<span class="token operator">/</span>Shanghai<span class="token operator">&amp;</span>allowPublicKeyRetrieval<span class="token operator">=</span><span class="token boolean">true</span>jdbc<span class="token punctuation">.</span>username<span class="token operator">=</span>rootjdbc<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token number">123456</span></code></pre></li><li><p>添加SqlMapConfig.xml文件(<strong>MyBatis的核心配置文件</strong>)</p><blockquote><p>注意文件头</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--读取jdbc属性文件--></span>    <span class="token comment" spellcheck="true">&lt;!--设置日志输出--></span>    <span class="token comment" spellcheck="true">&lt;!--注册实体类别名--></span>    <span class="token comment" spellcheck="true">&lt;!--配置环境变量--></span>    <span class="token comment" spellcheck="true">&lt;!--注册mapper.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>具体实现</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--读取属性文件(jdbc.properties)        属性:            resource:从resource目录下找指定名称的文件加载(相对路径)            url:使用绝对路径加载属性文件    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置数据库的环境变量(数据库连接配置)        default:使用下面的environment标签的id属性进行指定配置    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--在公司开发时用的配置            id:就是提供给environment的default属性使用        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--配置事务管理器 - transactionManager                type:指定事务管理的方式(追源码可知道有两种选项:jdbc/managed                    JDBC:事务的控制交给程序员来出来                    MANAGED:由容器(spring)来管理事务            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--配置数据源 - dataSource                type:指定不同的配置方式(追源码可知有三种属性:jndi/pooled/unpooled                    JNDI:java命名目录接口在服务器(tomcat)端进行数据库连接池的管理                    POOLED:使用数据库连接池                    UNPOOLED:不使用数据库连接池            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--配置数据库连接池的基本参数                    private String driver;                    private String url;                    private String username;                    private String password;                --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--在家开发时用的配置--></span><span class="token comment" spellcheck="true">&lt;!--        &lt;environment id="home">            &lt;transactionManager type="">&lt;/transactionManager>            &lt;dataSource type="">&lt;/dataSource>        &lt;/environment>--></span>        <span class="token comment" spellcheck="true">&lt;!--上线时用的配置--></span><span class="token comment" spellcheck="true">&lt;!--        &lt;environment id="online">            &lt;transactionManager type="">&lt;/transactionManager>            &lt;dataSource type="">&lt;/dataSource>        &lt;/environment>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册mapper.xml文件        resource:从resource目录下找指定名称的文件进行注册        url:使用绝对路径注册        class:动态代理方式下的注册    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建实体类Student, 用来封装数据</p><blockquote><p>当前使用的是实体类的成员变量和数据库中的列名相同, 完成映射</p><p>在后续也可以使用别名进行成员变量和数据库列名的映射 =&gt; 详见 resultMap的简单用法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//做添加的时候, 因为id是自增的, 所以不用给值</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String email<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String email<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", email='"</span> <span class="token operator">+</span> email <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>添加完成学生表的增删改查的功能的StudentMapper.xml文件</p><blockquote><p>注意文件头</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--    mapper:是整个文件的大标签,用来开始和结束xml文件    属性:        namespace:指定命名空间(相当于包名),用来区分不同mapper.xml文件中相同的id属性        --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>csd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--查询语句,用到查询时,直接调用id就行--></span>        <span class="token comment" spellcheck="true">&lt;!--完成查询全部学生的功能            resultType:指定查询返回的结果集的类型,如果是集合,则必须是泛型的类型            parameterType:如果有参数,则通过它来指定参数的类型        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--用来写sql语句--></span>        select id,name,email,age from student;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建测试类, 进行功能测试</p><pre class=" language-Java"><code class="language-Java">public class MyTest {    @Test    public void testA() throws IOException {        //使用文件流读取核心配置文件SqlMapConfig.xml        InputStream in = Resources.getResourceAsStream("SqlMapConfig.xml");        //创建SqlSessionFactory工厂        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in);        //取出sqlSession对象        SqlSession sqlSession = factory.openSession();        //完成查询操作        List<Student> list = sqlSession.selectList("csd.getAll");        list.forEach(student -> System.out.println(student));        //关闭sqlSession        sqlSession.close();    }}</code></pre></li></ol><h3 id="增删改查的功能"><a href="#增删改查的功能" class="headerlink" title="增删改查的功能"></a>增删改查的功能</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>StudentMapper.xml中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--按主键ID查询--></span>    <span class="token comment" spellcheck="true">&lt;!--  原先的方法是 :public Student getById(Integer id){}           mybatis中映射关系查表得 int => Integer    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--#{}表示占位符,也就是在jdbc中的 ?--></span>        select id,name,email,age from student where id=#{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--模糊查询--></span>    <span class="token comment" spellcheck="true">&lt;!--原先的方法是 List&lt;Student> getByName(String name){}        mybatis中映射关系查表得 string => String    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--${}表示字符串拼接,有两个尖角 '' 只能使用${} --></span>        select id,name,email,age from student where name like '%${name}%';    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用文件流读取核心配置文件SqlMapConfig.xml</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SqlSessionFactory工厂</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出sqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成查询操作  (按主键ID查询)</span>        Student stu <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"csd.getById"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭sqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用文件流读取核心配置文件SqlMapConfig.xml</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SqlSessionFactory工厂</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出sqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成查询操作  (模糊查询)</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"csd.getByName"</span><span class="token punctuation">,</span> <span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭sqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p>StudentMapper.xml中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--增加学生--></span>    <span class="token comment" spellcheck="true">&lt;!--原先的方法是 int insert(Student stu){}        增删改中, mybatis自动返回, 没有resultType    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into student(name,email,age) values(#{name},#{email},#{age});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用文件流读取核心配置文件SqlMapConfig.xml</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SqlSessionFactory工厂</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出sqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//增加学生  使用到Student的除主键外的全参构造器</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"csd.insert"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"刘六"</span><span class="token punctuation">,</span><span class="token string">"123@qq.com"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要手动提交</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭sqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>StudentMapper.xml中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--按主键删除学生--></span>    <span class="token comment" spellcheck="true">&lt;!--原先的方法是 int delete(Integer id){}--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from student where id = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用文件流读取核心配置文件SqlMapConfig.xml</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SqlSessionFactory工厂</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出sqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除学生</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"csd.delete"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要手动提交</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭sqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>StudentMapper.xml中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--按主键更新学生数据--></span>    <span class="token comment" spellcheck="true">&lt;!--原先的方法是 int update(Student stu)--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update student set name=#{name},email=#{email},age=#{age} where id=#{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用文件流读取核心配置文件SqlMapConfig.xml</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SqlSessionFactory工厂</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出sqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更新学生数据    使用到了Student类的全参构造器</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"csd.update"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"刘拉拉"</span><span class="token punctuation">,</span><span class="token string">"456@qq.com"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要手动提交</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭sqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="MyBatis对象分析"><a href="#MyBatis对象分析" class="headerlink" title="MyBatis对象分析"></a>MyBatis对象分析</h2><ol><li><p>Resources类</p><p>用来解析SqlMapConfig.xml文件, 创建出相应的对象</p></li><li><p>SqlSessionFactory接口</p></li><li><p>SqlSession接口</p></li></ol><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><h3 id="实体类别名注册"><a href="#实体类别名注册" class="headerlink" title="实体类别名注册"></a>实体类别名注册</h3><p>在写sql语句时, 有返回值类型需要重复写, 我们这里可以给它在SqlMapConfig.xml文件中起别名, 注意使用标签的顺序.</p><blockquote><p>在<a href="http://mybatis.org/dtd/mybatis-3-config.dtd%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%A0%87%E7%AD%BE%E9%A1%BA%E5%BA%8F%E6%98%AF">http://mybatis.org/dtd/mybatis-3-config.dtd我们可以看到标签顺序是</a> : <!--ELEMENT configuration (properties?, settings?, typeAliases?, typeHandlers?, objectFactory?, objectWrapperFactory?, reflectorFactory?, plugins?, environments?, databaseIdProvider?, mappers?)--></p></blockquote><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--注册实体类别名,用于重复使用--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--单个实体类别名注册--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans.Student<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAlias</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--批量注册别名            别名是类名的驼峰命名法  Student => student      StudentOne  =>  studentOne        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.beans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><h3 id="测试类的优化"><a href="#测试类的优化" class="headerlink" title="测试类的优化"></a>测试类的优化</h3><p>在写测试类中, 我们发现有重复代码需要不断的实现. 那么我们可以使用@Before与@After注解</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> SqlSession sqlSession<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>   <span class="token comment" spellcheck="true">//在所有的Test方法前先执行以下代码</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用文件流读取核心配置文件SqlMapConfig.xml</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SqlSessionFactory工厂</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出sqlSession对象</span>        sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>  <span class="token comment" spellcheck="true">//在所有Test方法后执行以下代码</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">closeSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//关闭sqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="设置日志输出"><a href="#设置日志输出" class="headerlink" title="设置日志输出"></a>设置日志输出</h3><p>在SqlMapConfig.xml文件设置</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--设置日志输出底层执行的代码--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><h3 id="优化mapper-xml注册"><a href="#优化mapper-xml注册" class="headerlink" title="优化mapper.xml注册"></a>优化mapper.xml注册</h3><p>在SqlMapConfig.xml文件设置</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--注册mapper.xml--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;mapper class="com.bjpowernode.mapper.UserMapper">&lt;/mapper>--></span>        <span class="token comment" spellcheck="true">&lt;!--批量注册--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><h2 id="如何访问数据访问层"><a href="#如何访问数据访问层" class="headerlink" title="如何访问数据访问层"></a>如何访问数据访问层</h2><blockquote><p>在三层架构中, 业务逻辑层要通过接口访问数据访问层的功能, 动态代理可以实现</p></blockquote><h3 id="动态代理的实现规范"><a href="#动态代理的实现规范" class="headerlink" title="动态代理的实现规范"></a>动态代理的实现规范</h3><blockquote><p>使用动态代理时, Mapper.xml ( sql语句不能使用select来进行增删改, 必须根据当前sql语句的使用场景使用, 而普通方法可以使用select完成增删改查 )</p></blockquote><ol><li> UsersMapper.xml文件与UsersMapper.java的接口必须同一个目录下.</li><li> UsersMapper.xml文件与UsersMapper.java的接口的文件名必须一致,后缀不管.</li><li> UserMapper.xml文件中标签的id值与与UserMapper.java的接口中方法的名称完全一致.</li><li> UserMapper.xml文件中标签的parameterType属性值与与UserMapper.java的接口中方法的参数类型完全一致.</li><li> UserMapper.xml文件中标签的resultType值与与UserMapper.java的接口中方法的返回值类型完全一致.</li><li> UserMapper.xml文件中namespace属性必须是接口的完全限定名称com.bjpowernode.mapper.UsersMapper</li><li>在SqlMapConfig.xml文件中注册mapper文件时,使用class=接口的完全限定名称com.bjpowernode.mapper.UsersMapper.</li></ol><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>建表Users</p></li><li><p>新建maven工程</p></li><li><p>修改目录</p></li><li><p>修改pom.xml文件, 添加依赖</p></li><li><p>添加jdbc.properties文件到resources目录下</p></li><li><p>添加SqlMapConfig.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--读取jdbc属性文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--设置日志输出--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册实体类别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.pojo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置环境变量--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册mapper.xml--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Users</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Users{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", userName='"</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", birthday="</span> <span class="token operator">+</span> birthday <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserName</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Date <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>Date birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Users</span><span class="token punctuation">(</span>String userName<span class="token punctuation">,</span> Date birthday<span class="token punctuation">,</span> String sex<span class="token punctuation">,</span> String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Users</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String userName<span class="token punctuation">,</span> Date birthday<span class="token punctuation">,</span> String sex<span class="token punctuation">,</span> String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>添加mapper文件夹, 新建UsersMapper接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Users<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据访问层的接口,规定的数据库中可以进行的各种操作 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询所有用户</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>在mapper文件夹下, 新建UsersMapper.xml文件, 完成增删改查功能</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        //查询所有用户        List&lt;Users> getAll();    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,username,birthday,sex,address from users;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetAll01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取出动态代理的对象,完成接口中方法的调用,实则是调用xml文件中标签的功能</span>        UserMapper userMapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//xml相当于接口的实现类,getAll被动态代理出来</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users1 <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在@Test前面添加注解@Before和@After</span></code></pre></li></ol><h4 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h4><blockquote><p>使用接口类, 让xml实现接口, 从而达到动态代理来访问数据访问层</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Users<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据访问层的接口,规定的数据库中可以进行的各种操作 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询所有用户</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据用户主键查用户</span>    Users <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据用户名模糊查询</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用户的更新</span>    <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>Users users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//增加用户</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Users users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据主键删除用户</span>    <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--根据主键查找用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,username,birthday,sex,address from users where id = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--根据用户名模糊查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,username,birthday,sex,address from users where username like '%${username}%';    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetById01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Users users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users1 <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//注意使用注解进行重复代码封装</span></code></pre><h4 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h4><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--增加用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into users(username, birthday, sex, address) values (#{userName},#{birthday},#{sex},#{address});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//时间刷子</span>    SimpleDateFormat simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用来完成生日的格式转换</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token string">"牛奶"</span><span class="token punctuation">,</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-1-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--删除用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from users where id=#{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="更新-1"><a href="#更新-1" class="headerlink" title="更新"></a>更新</h4><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--用户的更新--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update users set username=#{userName},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        Users u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"豆奶"</span><span class="token punctuation">,</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2000-3-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"北京"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="与"><a href="#与" class="headerlink" title="#{} 与 ${}"></a>#{} 与 ${}</h3><h4 id="占位符"><a href="#占位符" class="headerlink" title="#{} 占位符"></a>#{} 占位符</h4><p>传参大部分使用#{}传参,它的底层使用的是PreparedStatement对象,是安全的数据库访问 ,防止sql注入.</p><p>#{ } 里面如何写? 看paramenterType参数的类型</p><ol><li><p>如果parameterType的类型是简单类型(8种基本(封装)+String),则#{}里随便写.</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  ===>入参类型是简单类型        select id,username,birthday,sex,address        from users        where id=#{zar}  ===>随便写 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  </code></pre></li><li><p>parameterType的类型是实体类的类型,则#{}里只能是类中成员变量的名称,而且区分大小写. </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  ===>入参是实体类        insert into users (username, birthday, sex, address) values(#{userName},#{birthday},#{sex},#{address})  ==>成员变量名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="字符串拼接或字符串替换"><a href="#字符串拼接或字符串替换" class="headerlink" title="${} 字符串拼接或字符串替换"></a>${} 字符串拼接或字符串替换</h4><ol><li><p>字符串拼接,一般用于模糊查询中.建议少用,因为有sql注入的风险. </p><p>也分两种情况, 同样看parameterType的类型</p></li><li><p>字符串替换</p><p>需求 : 模糊地址和用户查询</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> username <span class="token operator">like</span> <span class="token string">'%小%'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> address <span class="token operator">like</span> <span class="token string">'%市%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 两个查询语句只有两处不同,可以优化</span></code></pre></li></ol><h4 id="优化模糊查询"><a href="#优化模糊查询" class="headerlink" title="优化模糊查询"></a>优化模糊查询</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    //优化后的模糊查询    List&lt;Users> getByNameGood(String name);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByNameGood<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,username,birthday,sex,address        from users        where username like concat('%',#{name},'%')//把${}换成#{}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="优化多个参数的模糊查询"><a href="#优化多个参数的模糊查询" class="headerlink" title="优化多个参数的模糊查询"></a>优化多个参数的模糊查询</h4><p>接口类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//模糊地址和用户查询的方法</span>List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getByNameOrAddress</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"columnName"</span><span class="token punctuation">)</span>  <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>为了在sql语句中使用的名称            String columnName<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"columnValue"</span><span class="token punctuation">)</span>   <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>为了在sql语句中使用的名称            String columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>UsersMapper.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    //模糊地址和用户查询    //如果参数超过一个,则parameterType不写    List&lt;Users> getByNameOrAddress(    @Param("columnName")    ===>为了在sql语句中使用的名称    String columnName,    @Param("columnValue")   ===>为了在sql语句中使用的名称    String columnValue);                                        //columnName列名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByNameOrAddress<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,username,birthday,sex,address        from users        where ${columnName} like concat('%',#{columnValue},'%')  ==>  使用${}来替换列名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> ==> 使用的是@Param注解里的名称</code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByNameOrAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> list <span class="token operator">=</span> uMapper<span class="token punctuation">.</span><span class="token function">getByNameOrAddress</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"小"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按用户名(列名)来模糊查询</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="parameterType总结"><a href="#parameterType总结" class="headerlink" title="parameterType总结 :"></a>parameterType总结 :</h5><ul><li>如果参数超过一个,则parameterType不写</li><li>如果不是实体类和简单类型, 则parameterType不写</li></ul><h5 id="resultType总结"><a href="#resultType总结" class="headerlink" title="resultType总结 :"></a>resultType总结 :</h5><ol><li>增删改中, mybatis自动返回, 没有resultType</li></ol><h2 id="返回主键标签"><a href="#返回主键标签" class="headerlink" title="返回主键标签"></a>返回主键标签</h2><blockquote><p>在完成插入操作后, 将生成的主键信息通过实体类对象返回, 在进行后续<strong>关联</strong>插入操作时, 不用再次访问数据库</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f349cbb8b7944e6b85911b6c3a4bb7be.png" alt="流程分析"></p><h3 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--增加用户,返回主键--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AFTER<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select last_insert_id();    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span>        insert into users(username, birthday, sex, address) values (#{userName},#{birthday},#{sex},#{address});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    &lt;selectKey>标签的参数详解:    keyProperty: users对象的哪个属性来接返回的主键值(id)    resultType:返回的主键的类型    order:在插入语句执行前,还是执行后返回主键的值--></span></code></pre><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><blockquote><p>这是一个全球唯一随机字符串,由36个字母数字中划线组.</p></blockquote><p>java中</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UUID uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>MySQL中</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><blockquote><p>可以定义代码片段,可以进行逻辑判断,可以进行循环处理(批量处理),使条件判断更为简单.</p></blockquote><h3 id="标签sql与include"><a href="#标签sql与include" class="headerlink" title="标签sql与include"></a>标签sql与include</h3><ol><li><sql> : 用来定义代码片段,可以将所有的列名,或复杂的条件定义为代码片段,供使用时调用.</sql></li><li><include> : 用来引用<sql>定义的代码片段.</sql></include></li></ol><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--定义代码片段--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id,username,birthday,sex,address    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        //查询所有用户        List&lt;Users> getAll();    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from users;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="标签if与where"><a href="#标签if与where" class="headerlink" title="标签if与where"></a>标签if与where</h3><ol><li><if> : 进行条件判断</if></li><li><where> : 进行多条件判断, 在查询, 删除, 更新时使用</where></li></ol><h4 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//按指定的条件进行多条件查询</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getByCondition</span><span class="token punctuation">(</span>Users users<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //按指定的条件进行多条件查询    List&lt;Users> getByCondition(Users users);    根据实体类中的成员变量是否有值来决定是否添加条件    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from users        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName !<span class="token punctuation">=</span> null and userName !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and username like concat('%',#{userName},'%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and birthday = #{birthday}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null and sex !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and sex = #{sex}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null and address !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and address like concat('%',#{address},'%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getByCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        Users users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给什么赋值就是查什么</span>        users<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getByCondition</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users1 <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="标签set"><a href="#标签set" class="headerlink" title="标签set"></a>标签set</h3><ol><li><set> : 有选择的进行更新处理, 至少更新一列</set></li></ol><blockquote><p>当我们在进行更新操作的时候, 如果按照以前的方法进行更新, 想要只更新一个名字时, 会发现修改了名字后, 其他没有赋值的列也被更新了(为null)</p></blockquote><h4 id="实现步骤-3"><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//有选择性的更新</span>    <span class="token keyword">int</span> <span class="token function">updateBySet</span><span class="token punctuation">(</span>Users users<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //有选择性的更新    int updateBySet(Users users);    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBySet<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update users        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName !<span class="token punctuation">=</span> null and userName !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                username = #{userName},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                birthday = #{birthday},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null and sex !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                sex = #{sex},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null and address !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                address = #{address},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        where id = #{id};  ==>注意不用漏掉    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Users users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"泉州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateBySet</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="标签foreach"><a href="#标签foreach" class="headerlink" title="标签foreach"></a>标签foreach</h3><ol><li><foreach> : 用来进行循环遍历,完成循环条件查询,批量删除(经常用),批量增加(偶尔用),批量更新(很少用).</foreach></li></ol><h4 id="实现步骤-4"><a href="#实现步骤-4" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//查询多个指定id用户的信息</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getByIds</span><span class="token punctuation">(</span>Integer arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //查询多个指定id用户的信息    List&lt;Users> getByIds(Integer arr[]);    当前使用的参数是数组, 所以foreach当中的collecting是arrays    如果是list集合就是list    是map集合就是map    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByIds<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from users        where id in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getByIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getByIds</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="foreach标签参数详解"><a href="#foreach标签参数详解" class="headerlink" title="foreach标签参数详解"></a>foreach标签参数详解</h4><ul><li>collection:用来指定入参的类型,如果是List集合,则为list,如果是Map集合,则为map,如果是数组,则为array.</li><li>item:每次循环遍历出来的值或对象</li><li>separator:多个值或对象或语句之间的分隔符</li><li>open:整个循环外面的前括号 </li><li>close:整个循环外面的后括号</li></ul><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><h4 id="实现步骤-5"><a href="#实现步骤-5" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//批量删除</span>    <span class="token keyword">int</span> <span class="token function">deleteAll</span><span class="token punctuation">(</span>Integer arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //批量删除    int deleteAll(Integer arr[]);    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteAll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from users where id in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="批量增加"><a href="#批量增加" class="headerlink" title="批量增加"></a>批量增加</h3><h4 id="实现步骤-6"><a href="#实现步骤-6" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//批量增加</span>    <span class="token keyword">int</span> <span class="token function">insertAll</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //批量增加    int insertAll(List list);    注意要使用u.userName....    因为是封装到对象u中去    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertAll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into users(username, birthday, sex, address) values        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            (#{u.userName},#{u.birthday},#{u.sex},#{u.address})        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        Users users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"广东"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Users users1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"广东1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Users users2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"广东2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Users users3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"广东3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users1<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users2<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insertAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="指定参数位置-使用下标"><a href="#指定参数位置-使用下标" class="headerlink" title="指定参数位置(使用下标)"></a>指定参数位置(使用下标)</h3><blockquote><p>如果入参是多个,可以通过指定参数位置进行传参. 是实体包含不住的条件.实体类只能封装住成员变量的条件.如果某个成员变量要有区间范围内的判断,或者有两个值进行处理,则实体类包不住.</p><p>例如:查询指定日期范围内的用户信息.</p></blockquote><h4 id="如何指定"><a href="#如何指定" class="headerlink" title="如何指定"></a>如何指定</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//查询指定日期范围内的用户信息</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getByDate</span><span class="token punctuation">(</span>Date begin<span class="token punctuation">,</span> Date end<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //查询指定日期范围内的用户信息    List&lt;Users> getByDate(Date begin, Date end);    有默认的下标, 从0开始, 也就是从arg0开始    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByDate<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from users        where birthday between #{arg0} and #{arg1};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        Date begin <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date end <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-12-31"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getByDate</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="指定参数位置-Param指定参数位置"><a href="#指定参数位置-Param指定参数位置" class="headerlink" title="指定参数位置(@Param指定参数位置)"></a>指定参数位置(@Param指定参数位置)</h3><ul><li><strong>详见 : 优化多个参数的模糊查询示例</strong></li></ul><h3 id="指定参数位置-入参是map"><a href="#指定参数位置-入参是map" class="headerlink" title="指定参数位置(入参是map)"></a>指定参数位置(入参是map)</h3><blockquote><p>如果入参超过一个以上, 使用map封装查询条件, 更有语义, 查询条件更明确.</p></blockquote><h4 id="实现步骤-7"><a href="#实现步骤-7" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//入参是map, 查询指定日期范围内的用户信息</span>    List<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">getByMap</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //入参是map, 查询指定日期范围内的用户信息    List&lt;Users> getByMap(Map map);    Map里面的成员变量是啥    #{birthdaybegin} 与 #{birthdayend} : 就是map中的key    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getByMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from users        where birthday between #{birthdaybegin} and #{birthdayend};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        Date begin <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date end <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1999-12-31"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"birthdaybegin"</span><span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"birthdayend"</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Users<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>users <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="返回一行Map"><a href="#返回一行Map" class="headerlink" title="返回一行Map"></a>返回一行Map</h4><blockquote><p>如果返回的数据实体类无法包含, 可以使用map返回多张表中的若干数据. 返回后这些数据之间没有任何关系. 就是Object类型. <strong>返回的map的key就是列名或别名.</strong></p></blockquote><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//返回一行map   返回姓名和地址封装到map中</span>    Map <span class="token function">getReturnMapOne</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //返回一行map    Map getReturnMapOne(Integer id);    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getReturnMapOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select username,address from users        where id = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReturnMapOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Map map <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getReturnMapOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="返回多行Map"><a href="#返回多行Map" class="headerlink" title="返回多行Map"></a>返回多行Map</h4><p>接口类</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//返回多行map</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">></span> <span class="token function">getMulMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在UsersMapper.xml文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    //返回多行map    List&lt;Map> getMulMap();    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getMulMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select username,address from users    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetMulMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getMulMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>map <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="resultMap的简单用法"><a href="#resultMap的简单用法" class="headerlink" title="resultMap的简单用法"></a>resultMap的简单用法</h3><blockquote><p>在之前我们提到实体类中的成员变量需要和数据库中的列名相同, 以此来完成映射</p></blockquote><p>在这里我们要介绍的是还有两种方法可以完成映射</p><ol><li><p>使用别名进行成员变量和数据库列名的映射</p><ul><li><p>我们可以在写sql语句时, 使用别名(给数据库中的列名起别名)来完成数据库列名与实体类成员变量的名称一致</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookmap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select bookid id,bookname name from book;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>使用resultMap</p><ul><li><p>在之前我们的返回类型都是使用<code>resultType</code> , 但是当出现实体类成员变量与数据库列名不一致时, 我们就不能单纯的使用它了, 需要在sql语句起别名, 那么有没有其他的方法呢 ? </p></li><li><p>我们可以使用<code>resultMap</code> 来自定义</p></li><li><p>举例 : 查询所有图书, 图书的实体类与数据库列名不同</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实体类</span><span class="token keyword">private</span> Integer id<span class="token punctuation">;</span> <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库列名</span><span class="token comment" spellcheck="true">//  bookid 与 bookname</span></code></pre></li><li><p>实现步骤</p><p>在UsersMapper.xml文件中</p><ul><li><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--使用resultMap完成手工映射--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookmap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--主键绑定 property指的是实体类的成员变量, column指的是数据库中的列名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--非主键绑定--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookmap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select bookid,bookname from book;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul></li></ol><h2 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h2><h3 id="一对多关联关系"><a href="#一对多关联关系" class="headerlink" title="一对多关联关系"></a>一对多关联关系</h3><p>  客户和订单就是典型的一对多关联关系.<br>  一个客户名下可以有多个订单.<br>  客户表是一方,订单表是多方.客户一中持有订单的集合.<br>  使用一对多的关联关系,可以满足查询客户的同时查询该客户名下的所有订单.</p><h4 id="实现步骤-8"><a href="#实现步骤-8" class="headerlink" title="实现步骤"></a>实现步骤</h4><h5 id="1-创建实体类"><a href="#1-创建实体类" class="headerlink" title="1.创建实体类"></a>1.<strong>创建实体类</strong></h5><p>客户实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//客户名下的所有订单信息</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Customer{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", ordersList="</span> <span class="token operator">+</span> ordersList <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> <span class="token function">getOrdersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ordersList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrdersList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ordersList <span class="token operator">=</span> ordersList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Customer</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ordersList <span class="token operator">=</span> ordersList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>订单实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String orderNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double orderPrice<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Orders{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", orderNumber='"</span> <span class="token operator">+</span> orderNumber <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", orderPrice="</span> <span class="token operator">+</span> orderPrice <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOrderNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderNumber</span><span class="token punctuation">(</span>String orderNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Double <span class="token function">getOrderPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderPrice</span><span class="token punctuation">(</span>Double orderPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderPrice <span class="token operator">=</span> orderPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String orderNumber<span class="token punctuation">,</span> Double orderPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderPrice <span class="token operator">=</span> orderPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-创建Mapper文件"><a href="#2-创建Mapper文件" class="headerlink" title="2.创建Mapper文件"></a>2.<strong>创建Mapper文件</strong></h5><blockquote><p>我们现在需要由客户来查信息, 所以创建的是CustomerMapper</p></blockquote><p>CustomerMapper接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数据访问层的接口,规定的数据库中可以进行的各种操作 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据客户ID查询客户所有信息,并且返回客户的所有订单信息</span>    Customer <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>CustomerMapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper.CustomerMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    //根据客户ID查询客户所有信息,并且返回客户的所有订单信息    Customer getById(Integer id);    select 字段列表 from 表1 left [outer] join 表2 on 条件...;    ofType指泛型的类型 ==> //客户名下的所有订单信息,一方持有多方的集合                          private List&lt;Orders> ordersList;    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customermap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--主键绑定,注意数据库中id已经起了别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--非主键绑定--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--ordersList绑定, 返回的订单信息是集合--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ordersList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--主键绑定,注意数据库中id已经起了别名--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--非主键绑定--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderNumber<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderNumber<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderPrice<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderPrice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customermap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select c.id cid,c.name,c.age,o.id oid,o.orderNumber,o.orderPrice,o.customer_id        from customer c left outer join orders o on c.id = o.customer_id        where c.id = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h5 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.<strong>测试</strong></h5><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByIdCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Customer customer <span class="token operator">=</span> customerMapper<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="多对一关联关系"><a href="#多对一关联关系" class="headerlink" title="多对一关联关系"></a>多对一关联关系</h3><p>  订单和客户就是多对一关联.<br>  站在订单的方向查询订单的同时将客户信息查出.<br>  订单是多方,会持有一方的对象.客户是一方.</p><h4 id="实现步骤-9"><a href="#实现步骤-9" class="headerlink" title="实现步骤"></a>实现步骤</h4><h5 id="1-创建实体类-1"><a href="#1-创建实体类-1" class="headerlink" title="1.创建实体类"></a>1.<strong>创建实体类</strong></h5><p>客户实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//客户名下的所有订单信息,一方持有多方的集合</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Customer{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", ordersList="</span> <span class="token operator">+</span> ordersList <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> <span class="token function">getOrdersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ordersList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrdersList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ordersList <span class="token operator">=</span> ordersList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Customer</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ordersList <span class="token operator">=</span> ordersList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>订单实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String orderNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double orderPrice<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//关联下此订单的客户信息, 多方持有一方的对象</span>    <span class="token keyword">private</span> Customer customer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Orders{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", orderNumber='"</span> <span class="token operator">+</span> orderNumber <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", orderPrice="</span> <span class="token operator">+</span> orderPrice <span class="token operator">+</span>                <span class="token string">", customer="</span> <span class="token operator">+</span> customer <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOrderNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderNumber</span><span class="token punctuation">(</span>String orderNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Double <span class="token function">getOrderPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderPrice</span><span class="token punctuation">(</span>Double orderPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderPrice <span class="token operator">=</span> orderPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Customer <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> customer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustomer</span><span class="token punctuation">(</span>Customer customer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customer <span class="token operator">=</span> customer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String orderNumber<span class="token punctuation">,</span> Double orderPrice<span class="token punctuation">,</span> Customer customer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderPrice <span class="token operator">=</span> orderPrice<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customer <span class="token operator">=</span> customer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-创建Mapper文件-1"><a href="#2-创建Mapper文件-1" class="headerlink" title="2.创建Mapper文件"></a>2.<strong>创建Mapper文件</strong></h5><blockquote><p>我们现在需要由订单来查信息, 所以创建的是OredrsMapper</p></blockquote><p>OredrsMapper接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数据访问层的接口,规定的数据库中可以进行的各种操作 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrdersMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据订单ID查询订单所以信息, 并返回该订单所属客户的信息</span>    Orders <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>OredrsMapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper.OrdersMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    //根据订单ID查询订单所以信息, 并返回该订单所属客户的信息    Orders getById(Integer id);    javaType指的是类型 ==> //关联下此订单的客户信息, 多方持有一方的对象                          private Customer customer;    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ordersmap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--主键绑定,注意数据库中id已经起了别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--非主键绑定--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderNumber<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderNumber<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderPrice<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderPrice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--customer绑定,返回的是客户对象--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--主键绑定,注意数据库中id已经起了别名--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--非主键绑定--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ordersmap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select o.id oid,o.orderNumber,o.orderPrice,o.customer_id,c.id cid,c.name,c.age        from orders o join customer c on c.id = o.customer_id        where o.id = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h5 id="3-测试-1"><a href="#3-测试-1" class="headerlink" title="3.测试"></a>3.测试</h5><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetByIdOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Orders orders <span class="token operator">=</span> ordersMapper<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="一对一与多对多关联关系"><a href="#一对一与多对多关联关系" class="headerlink" title="一对一与多对多关联关系"></a>一对一与多对多关联关系</h3><blockquote><p>无论是什么关联关系，如果某方持有另一方的集合，则使用<collection>标签完成映射，如果某方持有另一方的对象，则使用<association>标签完成映射。</association></collection></p></blockquote><h4 id="多对多关联"><a href="#多对多关联" class="headerlink" title="多对多关联"></a>多对多关联</h4><p>需要使用中间表来进行过渡</p><blockquote><p>多对多关联中，需要通过中间表化解关联关系。中间表描述两张主键表的关联。中间表没有对应的实体类。Mapper.xml文件中也没有中间表的对应标签描述，只是在查询语句中使用中间表来进行关联。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/8b14674e7b0342bbaf2ca4b0013f1a46.png" alt="多对多关联"></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>多个操作同时完成,或同时失败称为事务处理.<br> 事务有四个特性:一致性,持久性,原子性,隔离性.</p></blockquote><p>在MyBatis框架中设置事务 : mybatis核心配置文件中</p><p><transactionmanager type="JDBC"></transactionmanager>  ===&gt;程序员自己控制处理的提交和回滚</p><p>在测试类中, 取出对象的时候, 可以设置成自动提交</p><ul><li><code>sqlSession = factory.openSession(); </code> ===&gt;默认是手工提交事务,设置为false也是手工提交事务,如果设置为true,则为自动提交.</li><li><code>sqlSession = factory.openSession(true); </code> ===&gt;设置为自动提交,在增删改后不需要<code>commit();</code></li></ul><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><blockquote><p>MyBatis框架提供两级缓存,一级缓存和二级缓存.默认开启一级缓存.</p><p>我们有专门的缓存框架redis</p><p>缓存就是为了提高查询效率</p></blockquote><p>使用缓存后, 查询的流程 : </p><p>查询时先到缓存里查,如果没有则查询数据库,放缓存一份,再返回客户端.下次再查询的时候直接从缓存返回,不再访问数据库.如果数据库中发生commit()操作,则清空缓存.</p><p>一级缓存使用的是SqlSession的作用域,同一个sqlSession共享一级缓存的数据.<br>二级缓存使用的是mapper的作用域,不同的sqlSession只要访问的同一个mapper.xml文件,则共享二级缓存作用域.</p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><blockquote><p>ORM(Object Relational Mapping):对象关系映射</p></blockquote><p>java语言中以对象的方式操作数据,存到数据库中是以表的方式进行存储,对象中的成员变量与表中的列之间的数据互换称为映射.整个这套操作就是ORM.</p><p>持久化的操作：将对象保存到关系型数据库中 ,将关系型数据库中的数据读取出来以对象的形式封装</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring入门</title>
      <link href="/2021/07/15/spring/"/>
      <url>/2021/07/15/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><ul><li>Spring 的核心是控制反转(IOC) 和面向切面编程(AOP).</li><li>Spring 的主要作用就是为代码“解耦”，降低代码间的耦合度。好比连衣裙和普通衣服, 连衣裙如果破了要整件脱下来修补, 而普通衣服则是裤子破了, 脱裤子, 上衣破了, 脱上衣.</li></ul><h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC - 控制反转"></a>IOC - 控制反转</h2><p>由Spring容器进行对象的创建和依赖注入. 程序员在使用时直接取出使用.</p><ul><li><p>正转 : 由程序员进行对象的创建和依赖注入称为正转. 程序员说了算</p><pre class=" language-java"><code class="language-java">Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//程序员创建对象</span>stu<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//程序员进行赋值</span>stu<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>反转 : 由Spring容器创建对象和依赖注入称为反转, 将控制权从程序员手中夺走, 给Spring容器, 称为反转. 容器说了算</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id <span class="token operator">=</span> <span class="token string">"stu"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.csd.Student"</span><span class="token operator">></span>   <span class="token comment" spellcheck="true">//Spring容器负责对象的创建</span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"张三"</span><span class="token operator">></span>     <span class="token comment" spellcheck="true">//Spring容器依赖注入值</span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre></li></ul><h2 id="编写一个spring"><a href="#编写一个spring" class="headerlink" title="编写一个spring"></a>编写一个spring</h2><blockquote><p>基于xml的IOC</p></blockquote><h3 id="需要配置依赖"><a href="#需要配置依赖" class="headerlink" title="需要配置依赖"></a>需要配置依赖</h3><p>pom.xml中 : </p><p>引入一个坐标, 会自动引入该项目的其他子项目</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--spring的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><ul><li><p>在pom.xml中的插件build中添加 (防止资源出错)</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="将写好的的类注册到Bean中"><a href="#将写好的的类注册到Bean中" class="headerlink" title="将写好的的类注册到Bean中"></a>将写好的的类注册到Bean中</h3><p>编写完基本信息后到main下的resource下创建一个spring config(applicationContext.xml)</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li><p>创建一个学生类, 注意Spring无法自己创建类型.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用类型的成员变量,学生所在的学校</span>        <span class="token comment" spellcheck="true">//要有无参构造器,spring才能启动</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生的无参构造器被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>在applicationContext.xml配置中添加bean标签</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--创建学生对象    等同于 Student stu = new Student();    id: 就是创建对象的名称    class: 就是创建对象的类型,底层通过反射构建对象    启动容器的同时,创建对象    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.csdexample.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>在测试类中测试spring创建的学生类对象</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SrudentSpring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//spring创建对象</span>        <span class="token comment" spellcheck="true">//如果想要从spring容器中取出对象,则要先创建容器,并启动</span>        <span class="token comment" spellcheck="true">//创建容器对象</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出学生对象</span>        Student stu <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="如何赋值"><a href="#如何赋值" class="headerlink" title="如何赋值"></a>如何赋值</h3><p>前面我们已经创建好对象了, 但是我们发现要对它进行赋值时, 单纯的使用<code>property</code>, 会出现报错. 下面我们谈谈基于xml的IOC如何给创建的对象赋值</p><ul><li><p>使用setter注入</p><blockquote><p>注入分为简单类型注入和引用类型注入</p><p>简单类型注入值使用value属性</p><p>引用类型注入值使用ref属性</p><p>必须要注意:使用setter注入必须提供无参的构造方法,必须提供setXXX()方法.</p></blockquote><pre class=" language-xml"><code class="language-xml">   <span class="token comment" spellcheck="true">&lt;!--创建学校对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.csdexample.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>清华大学<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>海淀区<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--创建学生对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.csdexample.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    ===>简单类型注入        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  ===>引用类型注入 在前面创建过的对象,都可以注入    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用构造方法注入</p><ol><li><p>使用构造方法的参数名称进行注入值</p><p>​    创建一个学校类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">School</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"School{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    在spring核心配置文件中</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--创建学校对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.pojo.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>北京大学<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>海定区<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用构造方法参数的下标注入值</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--创建学生对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.pojo3.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>钱七<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>  ==>引用类型注入    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用默认的构造方法的参数的顺序注入值</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--创建学生对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stuSequence<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.pojo3.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>陈十<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    ==>引用类型注入    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><h2 id="spring接管三层架构"><a href="#spring接管三层架构" class="headerlink" title="spring接管三层架构"></a>spring接管三层架构</h2><blockquote><p>界面层,业务逻辑层,数据访问层(模拟, 没有使用到myBatis)</p><p>基于注解的IOC</p></blockquote><p><strong>spring不能创建接口的对象, 只能创建实现类的对象</strong></p><h3 id="什么是基于注解的IOC"><a href="#什么是基于注解的IOC" class="headerlink" title="什么是基于注解的IOC"></a>什么是基于注解的IOC</h3><ul><li><p>基于注解的IOC,必须要在Spring的核心配置文件中添加包扫描.</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--创建包扫描,只需要写到包就行了,不用写到具体的类--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre></li></ul><p>与基于xml相比, 只是换汤不换药.</p><p>药 : 创建对象并依赖注入</p><p>汤 : xml 与 注解annotation</p><ol><li><p>创建对象的注解</p><ul><li>@Component : 可以创建任意对象.创建的对象的默认名称是类名的驼峰命名法.也可以指定对象的名称 <code>@Component("指定名称")</code></li><li>@Controller : 专门用来创建控制器的对象,这种对象可以接收用户的请求,可以返回处理结果给客户端.</li><li>@Service : 专门用来创建业务逻辑层的对象,负责向下访问数据访问层,处理完毕后的结果返回给界面层.</li><li>@Repository : 专门用来创建数据访问层的对象,负责数据库中的增删改查所有操作.</li><li>注意如果在数据访问层使用@Mapper, 那么注入对象需要使用@Resource注解.</li></ul></li><li><p>依赖注入的注解</p><ul><li><p>值类型的注入   (8种基本类型+String)</p><p>@Value : 用来给简单类型注入值</p></li><li><p>引用类型的注入</p><ul><li><p>@Autowired : 使用类型注入值,从整个Bean工厂中搜索同源类型的对象进行注入.</p></li><li><p>@Autowired </p><p>@Qualifier : 使用名称注入值,从整个Bean工厂中搜索相同名称的对象进行注入.</p></li></ul></li></ul></li></ol><h3 id="编写一个基于注解的Spring"><a href="#编写一个基于注解的Spring" class="headerlink" title="编写一个基于注解的Spring"></a>编写一个基于注解的Spring</h3><blockquote><p>使用@Component</p></blockquote><h4 id="1-配置依赖与准备工作"><a href="#1-配置依赖与准备工作" class="headerlink" title="1.配置依赖与准备工作"></a>1.配置依赖与准备工作</h4><p>与基于xml的IOC相同</p><h4 id="2-创建学生类"><a href="#2-创建学生类" class="headerlink" title="2.创建学生类"></a>2.创建学生类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>s01<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span>   <span class="token comment" spellcheck="true">//需要添加包扫描来识别该注解    交给spring去创建对象,就是在容器启动时创建</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生类的无参构造器被调用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-在applicationContext-xml中添加包扫描"><a href="#3-在applicationContext-xml中添加包扫描" class="headerlink" title="3.在applicationContext.xml中添加包扫描"></a>3.在applicationContext.xml中添加包扫描</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建容器</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"s01/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出对象</span>        Student stu <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="5-如何赋值"><a href="#5-如何赋值" class="headerlink" title="5.如何赋值"></a>5.如何赋值</h4><ul><li><h6 id="不管是基于xml的IOC还是基于注解的IOC-在引用类型注入时-如果使用按类型注入值的方法-都要知道只有是同源类型才可以注入"><a href="#不管是基于xml的IOC还是基于注解的IOC-在引用类型注入时-如果使用按类型注入值的方法-都要知道只有是同源类型才可以注入" class="headerlink" title="不管是基于xml的IOC还是基于注解的IOC, 在引用类型注入时, 如果使用按类型注入值的方法, 都要知道只有是同源类型才可以注入"></a>不管是基于xml的IOC还是基于注解的IOC, 在引用类型注入时, 如果使用按类型注入值的方法, 都要知道只有是同源类型才可以注入</h6><ul><li>被注入的类型与注入的类型(子)是父子类</li><li>被注入的类型与注入的类型(实现类)是接口和实现类</li><li>被注入的类型与注入的类型是完全相同的类型</li></ul></li></ul><h6 id="按类型注入"><a href="#按类型注入" class="headerlink" title="按类型注入"></a>按类型注入</h6><ol><li><p>创建学校类和学生类   直接使用Value赋值(入门)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//学校类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"北京大学"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//注意双引号不能少</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"海定区"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">School</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学校类的无参构造器被调用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"School{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//学生类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用 引用类型按类型注入 方法</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", school="</span> <span class="token operator">+</span> school <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在applicationContext.xml中添加包扫描</p></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest02</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAnnotation01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建容器</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"s02/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出对象</span>        Student stu <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h6 id="按名称注入"><a href="#按名称注入" class="headerlink" title="按名称注入"></a>按名称注入</h6><ol><li><p>创建学校类和学生类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//学校类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//此时School的名称就是school</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"北京大学"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//注意双引号不能少</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"海定区"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">School</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学校类的无参构造器被调用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//学生类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用 引用类型按名称注入 方法</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"school"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>在applicationContext.xml中添加包扫描</p></li></ol><h6 id="有父子类的情况下按类型与按名称注入"><a href="#有父子类的情况下按类型与按名称注入" class="headerlink" title="有父子类的情况下按类型与按名称注入"></a>有父子类的情况下按类型与按名称注入</h6><ol><li><p>创建学校的子类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在有父子类的情况下,使用按类型注入,就意味着有多个可注入的对象.此时按照名称进行二次筛选,选中与被注入对象相同名称的对象进行注入.</span><span class="token comment" spellcheck="true">//如果有父子类的情况下,使用名称注入值, 直接按名称进行注入值</span><span class="token comment" spellcheck="true">//学校的子类, 用于测试有父子类的情况下注入值</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SonSchool</span> <span class="token keyword">extends</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"清华附中小学"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"海定区"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SonSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学校的子类的无参构造器被调用...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"SonSchool{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在applicationContext.xml中添加包扫描</p></li></ol><h3 id="基于注解的三层架构"><a href="#基于注解的三层架构" class="headerlink" title="基于注解的三层架构"></a>基于注解的三层架构</h3><blockquote><p>@Controller:专门用来创建控制器的对象(Servlet),这种对象可以接收用户的请求,可以返回处理结果给客户端.</p><p>@Service:专门用来创建业务逻辑层的对象,负责向下访问数据访问层,处理完毕后的结果返回给界面层.</p><p>@Repository:专门用来创建数据访问层的对象,负责数据库中的增删改查所有操作.</p></blockquote><h3 id="添加包扫描的方式"><a href="#添加包扫描的方式" class="headerlink" title="添加包扫描的方式"></a>添加包扫描的方式</h3><ol><li><p>单个包扫描(推荐使用)</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.service.impl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre></li><li><p>多个包扫描, 多个包之间以逗号或空格或分号分隔</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller com.bjpowernode.service ,com.bjpowernode.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre></li><li><p>扫描根包(不推荐)</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><p>会降低容器启动的速度, 导致多做无用功</p></li></ol><h2 id="Spring配置文件的拆分"><a href="#Spring配置文件的拆分" class="headerlink" title="Spring配置文件的拆分"></a>Spring配置文件的拆分</h2><blockquote><p>当项目越来越大,需要多人合作开发,一个配置就存在很大隐患.</p></blockquote><h5 id="拆分配置文件的策略"><a href="#拆分配置文件的策略" class="headerlink" title="拆分配置文件的策略"></a>拆分配置文件的策略</h5><ul><li><p>按层拆(界面层, 业务层, 数据层)</p><pre class=" language-xml"><code class="language-xml">      applicationContext_controller.xml                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uController<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.UsersController<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bController<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.BookController<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      applicationContext_service.xml                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.UsersService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.BookService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      applicationContext_mapper.xml                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.UsersMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.BookMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>按功能拆</p><pre class=" language-xml"><code class="language-xml">      applicationContext_users.xml                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uController<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.UsersController<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.UsersService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.UsersMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      applicationContext_book.xml              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bController<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.BookController<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.BookService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller.BookMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ul><h5 id="配置文件的整合"><a href="#配置文件的整合" class="headerlink" title="配置文件的整合"></a>配置文件的整合</h5><blockquote><p>最后访问的是整合后的配置文件</p></blockquote><ul><li><p>单个文件导入</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicatoinContext_mapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicatoinContext_service.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicatoinContext_controller.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span></code></pre></li><li><p>批量导入</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicatoinContext_*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP - 面向切面编程"></a>AOP - 面向切面编程</h2><blockquote><p>就是将切面提取出来,单独开发,在需要调用的方法中通过动态代理的方式进行织入.</p></blockquote><p>面向切面编程只是面向对象编程的一种补充. 用AOP减少重复代码, 专注业务实现</p><p><img src="https://img-blog.csdnimg.cn/1f3ff7177b2245249364280b9140e13b.png" alt="AOP"></p><h2 id="手写AOP框架"><a href="#手写AOP框架" class="headerlink" title="手写AOP框架"></a>手写AOP框架</h2><h3 id="版本一-业务和切面紧耦合在一起-没有拆分"><a href="#版本一-业务和切面紧耦合在一起-没有拆分" class="headerlink" title="版本一 : 业务和切面紧耦合在一起, 没有拆分"></a>版本一 : 业务和切面紧耦合在一起, 没有拆分</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 图书购买业务和事务切面耦合在一起 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务开启..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图书购买业务功能实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务提交..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务回滚..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="版本二-使用子类代理的方式拆分业务和切面"><a href="#版本二-使用子类代理的方式拆分业务和切面" class="headerlink" title="版本二 : 使用子类代理的方式拆分业务和切面"></a>版本二 : 使用子类代理的方式拆分业务和切面</h3><p>父类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用子类代理的方式进行图书业务和事务切面的拆分 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//父类专注完成自己的业务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图书购买功能实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>子类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 子类就是代理类,将父类的图书购买功能添加事务切面 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SonBookServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">BookServiceImpl</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//事务切面</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务开启..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//主业务实现, 还是父类自己去实现</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//事务切面</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务提交..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务回滚..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest02</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BookServiceImpl service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SonBookServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="版本三-使用静态代理拆分业务和切面-业务和业务接口已拆分-但是切面紧耦合在业务中"><a href="#版本三-使用静态代理拆分业务和切面-业务和业务接口已拆分-但是切面紧耦合在业务中" class="headerlink" title="版本三 : 使用静态代理拆分业务和切面. 业务和业务接口已拆分.但是切面紧耦合在业务中"></a>版本三 : 使用静态代理拆分业务和切面. 业务和业务接口已拆分.但是切面紧耦合在业务中</h3><ul><li><p>静态代理梳理</p><p><img src="https://img-blog.csdnimg.cn/c43f3a8f67e94ed19aca88b43d7b0ae7.png" alt="静态代理版本三分析"></p></li></ul><p>业务接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 业务接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Service_</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//规定业务功能</span>    <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>目标对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 目标对象, 实现业务接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Service_</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图书购买业务功能实现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代理类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 代理对象 * 静态代理已经实现了目标对象的灵活切换 * 图书购买业务, 商品购买业务 等等... */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookAgent</span> <span class="token keyword">implements</span> <span class="token class-name">Service_</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设计成员变量的类型为接口, 为灵活切换目标对象</span>    <span class="token keyword">public</span> Service_ target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用构造方法传入目标对象</span>    <span class="token keyword">public</span> <span class="token function">BookAgent</span><span class="token punctuation">(</span>Service_ target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//切面功能</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务开启"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//业务功能</span>            target<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//切面功能</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务回滚..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest03</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Service_ agent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookAgent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BookServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        agent<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="版本四-使用静态代理拆分业务和业务接口-切面和切面接口"><a href="#版本四-使用静态代理拆分业务和业务接口-切面和切面接口" class="headerlink" title="版本四 : 使用静态代理拆分业务和业务接口,切面和切面接口"></a>版本四 : 使用静态代理拆分业务和业务接口,切面和切面接口</h3><ul><li><p>流程分析</p><p><img src="https://img-blog.csdnimg.cn/6ae82a2350004c0f98cc8bb245e7f26e.png" alt="静态代理版本四分析"></p></li></ul><p>在版本三的基础上, 新增加切面接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 切面的接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Aop_</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用default, 用来允许空实现, 这样可以灵活切换事务和日志等...</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>切面接口的目标对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 事务 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransAop</span> <span class="token keyword">implements</span> <span class="token class-name">Aop_</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务开启...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务提交........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务回滚................"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    或者 <span class="token operator">:</span> <span class="token comment" spellcheck="true">/** * 日志输出 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAop</span> <span class="token keyword">implements</span> <span class="token class-name">Aop_</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置日志输出..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>业务与切面的代理类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>proxy4<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 代理对象 * 静态代理已经实现了目标对象的灵活切换 * 图书购买业务, 商品购买业务 等等... */</span><span class="token comment" spellcheck="true">//这里实现业务接口Service_是因为要实现buy方法, 而切面接口使用到了default, 可以空实现,</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookAgent</span> <span class="token keyword">implements</span> <span class="token class-name">Service_</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设计成员变量的类型为接口, 为灵活切换目标对象</span>    <span class="token comment" spellcheck="true">//传入目标(业务)对象,切面对象</span>    <span class="token keyword">public</span> Service_ target<span class="token punctuation">;</span>    <span class="token keyword">public</span> Aop_ aop<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用构造方法传入目标对象</span>    <span class="token keyword">public</span> <span class="token function">BookAgent</span><span class="token punctuation">(</span>Service_ target<span class="token punctuation">,</span> Aop_ aop<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aop <span class="token operator">=</span> aop<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//切面功能</span>            aop<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在业务功能之前      可以是事务, 日志 等....</span>            <span class="token comment" spellcheck="true">//业务功能</span>            target<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//切面功能</span>            aop<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在业务功能之后</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            aop<span class="token punctuation">.</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在业务有异常时</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest04</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Service_ service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookAgent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BookServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="如何切入多个切面"><a href="#如何切入多个切面" class="headerlink" title="如何切入多个切面"></a>如何切入多个切面</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest04</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Service_ service1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookAgent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BookServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//代理类实现了业务接口</span>        Service_ service2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookAgent</span><span class="token punctuation">(</span>service1<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LogAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代理套代理</span>        service1<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="版本五-使用动态代理完成第四个版本的优化"><a href="#版本五-使用动态代理完成第四个版本的优化" class="headerlink" title="版本五 : 使用动态代理完成第四个版本的优化"></a>版本五 : 使用动态代理完成第四个版本的优化</h3><p>把静态代理类 BookAgent 改成动态代理类 Agent </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>proxy5<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 动态代理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Agent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getAgent</span><span class="token punctuation">(</span>Service_ target<span class="token punctuation">,</span>Aop_ aop<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回生成的动态代理对象</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                <span class="token comment" spellcheck="true">//类加载器</span>                target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//目标对象实现的所有接口</span>                target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//代理功能实现</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>                            <span class="token comment" spellcheck="true">//生成的代理对象</span>                            Object proxy<span class="token punctuation">,</span>                            <span class="token comment" spellcheck="true">//正在被调用的目标方法buy(), show()等等....</span>                            Method method<span class="token punctuation">,</span>                            <span class="token comment" spellcheck="true">//目标方法的参数</span>                            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                        Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//切面</span>                            aop<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//业务</span>                            obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//切面</span>                            aop<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//切面</span>                            aop<span class="token punctuation">.</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest05</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//得到动态代理对象</span>        Service_ agent <span class="token operator">=</span> <span class="token punctuation">(</span>Service_<span class="token punctuation">)</span> Agent<span class="token punctuation">.</span><span class="token function">getAgent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BookServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        agent<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Spring原生AOP的实现"><a href="#Spring原生AOP的实现" class="headerlink" title="Spring原生AOP的实现"></a>Spring原生AOP的实现</h2><blockquote><p>了解, 实际干活使用AspectJ框架</p></blockquote><p>  Spring支持AOP的编程，常用的有以下几种：</p><ol><li>Before通知：在目标方法被调用前调用，涉及接口org.springframework.aop.MethodBeforeAdvice; </li><li>After通知：在目标方法被调用后调用，涉及接口为org.springframework.aop.AfterReturningAdvice; </li><li>Throws通知：目标方法抛出异常时调用，涉及接口org.springframework.aop.ThrowsAdvice; </li><li>Around通知：拦截对目标对象方法调用，涉及接口为org.aopalliance.intercept.MethodInterceptor。</li></ol><p>AOP常用的术语 : </p><ol><li>切面:就是那些重复的,公共的,通用的功能称为切面,例如:日志,事务,权限.</li><li>连接点:就是目标方法.因为在目标方法中要实现目标方法的功能和切面功能.</li><li>切入点(Pointcut):指定切入的位置,多个连接点构成切入点.切入点可以是一个目标方法,可以是一个类中的所有方法,可以是某个包下的所有类中的方法.</li><li>目标对象:操作谁,谁就是目标对象.</li><li>通知(Advice):来指定切入的时机.是在目标方法执行前还是执行后还是出错时,还是环绕目标方法切入切面功能.</li></ol><h2 id="AspectJ框架"><a href="#AspectJ框架" class="headerlink" title="AspectJ框架"></a>AspectJ框架</h2><blockquote><p>AspectJ 是一个优秀面向切面的框架，它扩展了 Java 语言，提供了强大的切面实现。它因为是基于java语言开发的,所以无缝扩展.easy to learn and use（易学易用）.</p></blockquote><h3 id="AspectJ常见通知类型"><a href="#AspectJ常见通知类型" class="headerlink" title="AspectJ常见通知类型"></a>AspectJ常见通知类型</h3><p>  AspectJ 中常用的通知有四种类型：</p><ol><li>前置通知@Before</li><li>后置通知@AfterReturning</li><li>环绕通知@Around   (功能最强大, 事务用最多)</li><li>最终通知@After    (无论方法是否执行成功, 都会通知)</li><li>定义切入点@Pointcut(了解)   (用于简化切面表达式)</li></ol><h3 id="什么是切面表达式"><a href="#什么是切面表达式" class="headerlink" title="什么是切面表达式"></a>什么是切面表达式</h3><ul><li><p>规范的公式 : </p><p><code>execution(访问权限  方法返回值  方法声明(参数)  异常类型)</code></p></li><li><p>简化后的公式 : </p><p><code>execution( 方法返回值  方法声明(参数) )</code></p></li><li><p>用到的符号</p><p>*       代表任意个任意的字符(通配符)</p><p>..       如果出现在方法的参数中, 则代表任意参数</p><p>​         如果出现在路径中, 则代表本路径及其所有的子路径</p></li></ul><h6 id="举例"><a href="#举例" class="headerlink" title="举例 :"></a>举例 :</h6><blockquote><p>方法只能出现在类中, 不能出现在包中</p></blockquote><ul><li><code>execution(public * *(..))</code>  : 任意的公共方法</li><li><code>execution(* set*(..))</code> : 任何一个以“set”开头的方法</li><li><code>execution(* com.xyz.service.impl.*.*(..))</code> : 任意的返回值类型,在com.xyz.service.impl包下的任意类的任意方法的任意参数    (注意方法不能出现在包中, 只能出现在类中)</li><li><code>execution(* com.xyz.service..*.*(..))</code> : 任意的返回值类型 ,在com.xyz.service及其子包下的任意类的任意方法的任意参数  </li></ul><h3 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h3><blockquote><p>AspectJ的前置通知@Before</p><p>在目标方法执行前切入切面功能.在切面方法中不可以获得目标方法的返回值,只能得到目标方法的签名(就是方法名, 参数之类).</p></blockquote><p><img src="https://img-blog.csdnimg.cn/3842086097d240968082c9cafcbee9b5.png" alt="前置通知"></p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><blockquote><p>需要在pom.xml文件下添加spring的依赖与aspectj的依赖</p></blockquote><p>  1)创建业务接口类<br>  2)创建业务实现类<br>  3)创建切面类,实现切面方法<br>  4)在applicationContext.xml文件中进行切面绑定</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>业务接口类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>s01<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 业务接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>业务实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>s01<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 业务实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSome的业务功能被实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>s01<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 此类为切面类, 包含各种切面方法 * */</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment" spellcheck="true">//交给Aspect的框架去识别切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 所有的切面功能都要放在切面方法来实现的     * 可以将各种切面都在此类进行开发     *     * 前置通知的切面方法的规范     * 1)访问权限是public     * 2)方法的返回值是void     * 3)方法名称自定义     * 4)方法没有参数, 如果有也只能是JoinPoint类型     * 5)必须使用@Before注解来声明切入的时机是前切功能和切入点     *   参数:value  指定切入点表达式     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public String com.bjpowernode.s01.SomeServiceImpl.doSome(String,int ))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面方法中的前置通知功能实现............"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--创建业务对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s01.SomeServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--创建切面对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s01.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--绑定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//启动容器</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"s01/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出代理对象</span>        SomeService someService <span class="token operator">=</span> <span class="token punctuation">(</span>SomeService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"someService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> someService<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="基于注解方式实现"><a href="#基于注解方式实现" class="headerlink" title="基于注解方式实现"></a>基于注解方式实现</h4><p>业务实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>s01<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 业务实现类 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSome的业务功能被实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>s01<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 此类为切面类, 包含各种切面方法 * */</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment" spellcheck="true">//交给Aspect的框架去识别切面类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public String com.bjpowernode.s01.SomeServiceImpl.doSome(String,int ))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面方法中的前置通知功能实现............"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--基于注解的方式要添加包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--绑定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><h5 id="1-前置通知的切面方法中方法的参数-JoinPoint-的用法"><a href="#1-前置通知的切面方法中方法的参数-JoinPoint-的用法" class="headerlink" title="1.前置通知的切面方法中方法的参数 JoinPoint 的用法"></a>1.前置通知的切面方法中方法的参数 <strong>JoinPoint</strong> 的用法</h5><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution( * com.bjpowernode.s01.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span>JoinPoint jp<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面方法中的前置通知功能实现............"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法的签名:"</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法的参数:"</span><span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-AspectJ框架切换JDK动态代理和CGLib动态代理"><a href="#2-AspectJ框架切换JDK动态代理和CGLib动态代理" class="headerlink" title="2.AspectJ框架切换JDK动态代理和CGLib动态代理"></a>2.AspectJ框架切换JDK动态代理和CGLib动态代理</h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--applicationContext.xml配置文件中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span>  ===>默认是JDK动态代理,取出来时必须使用接口类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span>  ==>设置为CGLib子类代理,可以使用接口和实现类来接</code></pre><p><strong>使用接口来接,永远不出错.</strong></p><h3 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h3><blockquote><p>AspectJ的后置通知@AfterReturning</p><p>可以得到业务方法的返回值</p></blockquote><p><img src="https://img-blog.csdnimg.cn/9b4d23e728e04d9087f1274d2da4ea67.png" alt="后置通知"></p><h4 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>业务接口类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>业务实现类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSome业务被实现...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 后置通知的方法规范     * 方法权限是public     * 方法没有返回值     * 方法名称自定义     * 方法有参数(也可以没有参数,如果目标方法没有返回值,则可以写无参的方法,但一般会写有参,     * 这样可以处理无参可以处理有参),这个切面方法的参数就是目标方法的返回值     * 使用的注解是  @AfterReturning注解表明是后置通知     *  value:指定切入点表达式     *  returning:指定目标方法的返回值的名称,则名称必须与切面方法的参数名称一致.     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(String com.bjpowernode.s02.*.*(..))"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"obj"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前面方法的后置功能被实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--添加包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--绑定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//启动容器</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"s02/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出代理对象</span>        SomeService someService <span class="token operator">=</span> <span class="token punctuation">(</span>SomeService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"someServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> someService<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="后置通知中无法改变目标方法返回值示例"><a href="#后置通知中无法改变目标方法返回值示例" class="headerlink" title="后置通知中无法改变目标方法返回值示例"></a>后置通知中无法改变目标方法返回值示例</h4><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//切面类中</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(String com.bjpowernode.s02.*.*(..))"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"obj"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前面方法的后置功能被实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断目标方法的返回值是不是八种基本类型或String类型, 如果是则不可以改变. 当前例子使用String类型演示</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                obj <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试结果 : </p><p><img src="https://img-blog.csdnimg.cn/3b9433b020a14b9f97ce11a51cb15c89.png" alt="测试结果"></p><h4 id="后置方法中可以改变目标方法返回值示例"><a href="#后置方法中可以改变目标方法返回值示例" class="headerlink" title="后置方法中可以改变目标方法返回值示例"></a>后置方法中可以改变目标方法返回值示例</h4><p>新建一个Student类完成测试</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试返回值为引用类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>业务实现类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 业务实现类 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Student <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSome业务被实现...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//切面类中</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(Student com.bjpowernode.s02.*.*(..))"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"obj"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前面方法的后置功能被实现..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断目标方法的返回值是不是引用类型类型, 如果是则可以改变. 当前例子使用String类型演示</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"在切面方法中目标方法的返回值是"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试结果 : </p><p><img src="https://img-blog.csdnimg.cn/fa869dfe1aad475fa4852a5bdf5d2403.png" alt="测试结果"></p><h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><blockquote><p>AspectJ的环绕通知@Around</p><p>它是通过拦截目标方法的方式 ,在目标方法前后增强功能的通知.它是功能最强大的通知,一般事务使用此通知.它可以轻易的改变目标方法的返回值.</p></blockquote><p><img src="https://img-blog.csdnimg.cn/d271d2c994e84ca4b3fbff40af0fd2be.png" alt="环绕通知"></p><h4 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>业务接口类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>业务实现类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法doSome()被调用...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知方法的规范     * 访问权限是public     * 切面方法有返回值, 此返回值就是目标方法的返回值     * 方法名称自定义     * 方法有参数, 参数就是目标方法     * 回避异常 Throwable     * 使用@Around注解声明是环绕通知     *      参数 value : 指定切入点表达式     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.bjpowernode.s03.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">myAround</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//前切功能实现</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知的前切功能实现...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//目标方法调用</span>        Object obj <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//后切功能实现</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知的后切功能实现...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--添加包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.s03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--绑定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//启动容器</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"s03/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出代理对象</span>        SomeService someService <span class="token operator">=</span> <span class="token punctuation">(</span>SomeService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"someServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> someService<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="最终通知"><a href="#最终通知" class="headerlink" title="最终通知"></a>最终通知</h3><blockquote><p>AspectJ的最终通知@After</p><p>无论目标方法是否正常执行,最终通知的代码都会被执行.</p></blockquote><h4 id="实现步骤-3"><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>1.业务接口类</p><p>2.业务实现类</p><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 最终通知的方法规范     * 访问权限是public     * 方法没有返回值     * 方法名称自定义     * 方法没有参数,如果有也只能是JoinPoint     *   参数 :     *       value : 指定切入点表达式     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.bjpowernode.s04.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终方法被实现....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.配置文件applicationContext.xml</p><p>5.测试类</p><h3 id="定义切入点别名"><a href="#定义切入点别名" class="headerlink" title="定义切入点别名"></a>定义切入点别名</h3><blockquote><p>一个方法添加多个通知</p><p>给切入点表达式起别名,  如果多个切面切入到同一个切入点,可以使用别名简化开发.<br>  使用@Pointcut注解,创建一个空方法,此方法的名称就是别名.</p></blockquote><p>切面类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知方法被实现....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myCut()"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"obj"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterReturning</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知方法被实现....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知方法被实现....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">myAround</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知的前置方法被实现....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知的后置方法被实现....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义切入点表达式的别名</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.bjpowernode.s04.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行顺序如下 : </p><p><img src="https://img-blog.csdnimg.cn/1eb433cd158f4df3be666e70ed661914.png" alt="测试结果"></p><h2 id="SM整合"><a href="#SM整合" class="headerlink" title="SM整合"></a>SM整合</h2><blockquote><p>将MyBatis与Spring进行整合, 主要解决的问题是将SqlSessionFactory对象交由Spring来管理.</p></blockquote><h3 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h3><ol><li><p>建表</p></li><li><p>新建项目, 选择quickstart模板</p></li><li><p>修改pom.xml文件, 添加相关的依赖</p></li><li><p>添加MyBatis相应的模板(也就是直接一直粘贴复制的头文件)</p></li><li><p>添加MyBatis核心配置文件(SqlMapConfig.xml文件), 并拷贝jdbc.properties属性文件到resource目录下</p><p>SqlMapConfig.xml文件 : </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span> <span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--读取属性文件中数据库的配置,    被spring接管, 在applicationContext_mapper.xml中配置了    --></span><span class="token comment" spellcheck="true">&lt;!--    &lt;properties resource="db.properties">&lt;/properties>--></span>    <span class="token comment" spellcheck="true">&lt;!--设置日志输出语句,显示相应操作的sql语名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册实体类别名,    被spring接管, 在applicationContext_mapper.xml中配置了    --></span><span class="token comment" spellcheck="true">&lt;!--    &lt;typeAliases>        &lt;package name="com.bjpowernode.pojo">&lt;/package>    &lt;/typeAliases>--></span>    <span class="token comment" spellcheck="true">&lt;!--    配置数据库的环境变量(数据库连接配置)    jdbc数据源,被spring接管, 在applicationContext_mapper.xml中配置了    --></span><span class="token comment" spellcheck="true">&lt;!--    &lt;environments default="development">        &lt;environment id="development">            &lt;transactionManager type="JDBC"/>            &lt;dataSource type="POOLED">                &lt;property name="driver" value="com.mysql.jdbc.Driver"/>                &lt;property name="url"                          value="jdbc:mysql://localhost:3308/ssm?useSSL=false&amp;amp;serverTimezone=UTC&amp;amp;allowPublicKeyRetrieval=true"/>                &lt;property name="username" value="root"/>                &lt;property name="password" value="123456"/>            &lt;/dataSource>        &lt;/environment>    &lt;/environments>--></span>    <span class="token comment" spellcheck="true">&lt;!--mapper文件注册    被spring接管, 在applicationContext_mapper.xml中配置了    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加applicationContext_mapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--读取jdbc配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>property-placeholder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--创建数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置SqlSessionFactoryBean类,系统工具类--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--配置数据源, 引用前面配置的jdbc数据源--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--配置MyBatis的核心配置文件--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SqlMapConfig.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--注册实体类的别名--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.pojo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注册mapper.xml文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加applicationContext_service.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--SM是基于注解的开发,所以添加包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.service.impl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--事务处理--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加Accounts实体类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 实体类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Accounts</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer aid<span class="token punctuation">;</span>    <span class="token keyword">private</span> String aname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String acontent<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Accounts{"</span> <span class="token operator">+</span>                <span class="token string">"aid="</span> <span class="token operator">+</span> aid <span class="token operator">+</span>                <span class="token string">", aname='"</span> <span class="token operator">+</span> aname <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", acontent='"</span> <span class="token operator">+</span> acontent <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> aid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAid</span><span class="token punctuation">(</span>Integer aid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aid <span class="token operator">=</span> aid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> aname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAname</span><span class="token punctuation">(</span>String aname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aname <span class="token operator">=</span> aname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAcontent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> acontent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAcontent</span><span class="token punctuation">(</span>String acontent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acontent <span class="token operator">=</span> acontent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Accounts</span><span class="token punctuation">(</span>Integer aid<span class="token punctuation">,</span> String aname<span class="token punctuation">,</span> String acontent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aid <span class="token operator">=</span> aid<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aname <span class="token operator">=</span> aname<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acontent <span class="token operator">=</span> acontent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Accounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>添加mapper包, 添加AccountsMapper接口和AccountsMapper.xml文件并开发</p><p>AccountsMapper接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Accounts<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据访问层 * 数据库sql接口, 用来定义增删改查的方法 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountsMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//增加用户</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Accounts accounts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AccountsMapper.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span> <span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper.AccountsMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        int insert(Accounts accounts);        private Integer aid;        private String aname;        private String acontent;    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into accounts values (#{aid},#{aname},#{acontent});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加service包, 添加AccountsService接口和AccountsServiceImpl实现类</p><p>AccountsService接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Accounts<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 业务逻辑层 *业务接口类 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountsService</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Accounts accounts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AccountsServiceImpl实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>AccountsMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Accounts<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AccountsService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 业务接口实现类 */</span><span class="token annotation punctuation">@Service</span> <span class="token comment" spellcheck="true">//交给Spring去创建对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountsService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//切记:在所有的业务逻辑层实现类中一定会有数据访问层的对象</span>    <span class="token annotation punctuation">@Autowired</span>    AccountsMapper accountsMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Accounts accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountsMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>accounts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>添加测试类进行功能测试</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建容器对象并启动</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出AccountsServiceImpl对象,业务实现类的对象</span>        AccountsService aService <span class="token operator">=</span> <span class="token punctuation">(</span>AccountsService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountsServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> aService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Accounts</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><h3 id="基于注解的事务"><a href="#基于注解的事务" class="headerlink" title="基于注解的事务"></a>基于注解的事务</h3><ol><li><p>在applicationContext_service.xml文件中添加事务管理器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--1.添加事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--因为事务必须关联数据库处理, 所以要配置数据源, 配置的数据源是从applicationContext_mapper.xml导入的jdbc数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>在applicationContext_service.xml文件中添加事务的注解驱动</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--2.添加注解驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre></li><li><p>在业务逻辑的实现类上添加注解@Transactional(propagation = Propagation.REQUIRED)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 业务接口实现类 */</span><span class="token annotation punctuation">@Service</span> <span class="token comment" spellcheck="true">//交给Spring去创建对象</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//添加事务的注解, 增删改使用Propagation.REQUIRED</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountsService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//切记:在所有的业务逻辑层实现类中一定会有数据访问层的对象</span>    <span class="token annotation punctuation">@Autowired</span>    AccountsMapper accountsMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Accounts accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountsMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>accounts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="Transactional注解参数详解"><a href="#Transactional注解参数详解" class="headerlink" title="@Transactional注解参数详解"></a>@Transactional注解参数详解</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//事务的传播特性</span>            noRollbackForClassName <span class="token operator">=</span> <span class="token string">"ArithmeticException"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//指定发生什么异常不回滚,使用的是异常的名称</span>            noRollbackFor <span class="token operator">=</span> ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指定发生什么异常不回滚,使用的是异常的类型</span>            rollbackForClassName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指定发生什么异常必须回滚</span>            rollbackFor <span class="token operator">=</span> ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指定发生什么异常必须回滚</span>            timeout <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//连接超时设置,默认值是-1,表示永不超时</span>            readOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//默认是false,如果是查询操作,必须设置为true.</span>            isolation <span class="token operator">=</span> Isolation<span class="token punctuation">.</span>DEFAULT<span class="token comment" spellcheck="true">//使用数据库自已的隔离级别        </span>    <span class="token punctuation">)</span></code></pre><h3 id="为什么添加事务管理器"><a href="#为什么添加事务管理器" class="headerlink" title="为什么添加事务管理器"></a>为什么添加事务管理器</h3><blockquote><p> 事务管理器用来生成相应技术的连接+执行语句的对象.</p></blockquote><p>  JDBC:  Connection   con.commit();   con.rollback();<br>  MyBatis:  SqlSession   sqlSession.commit();  sqlSession.rollback();<br>  Hibernate:  Session    session.commit();   session.rollback();</p><p> 如果使用MyBatis框架,必须使用DataSourceTransactionManager类完成处理</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--1.添加事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--因为事务必须关联数据库处理, 所以要配置数据源, 配置的数据源是从applicationContext_mapper.xml导入的jdbc数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p><strong>项目中的所有事务,必须添加到业务逻辑层上.</strong> </p><h3 id="Spring事务的传播特性"><a href="#Spring事务的传播特性" class="headerlink" title="Spring事务的传播特性"></a>Spring事务的传播特性</h3><blockquote><p>多个事务之间的合并,互斥等都可以通过设置事务的传播特性来解决.</p></blockquote><ul><li>PROPAGATION_REQUIRED：必被包含事务(增删改必用)</li><li>PROPAGATION_REQUIRES_NEW：自己新开事务，不管之前是否有事务</li><li>PROPAGATION_SUPPORTS：支持事务，如果加入的方法有事务，则支持事务，如果没有，不单开事务</li><li>PROPAGATION_NEVER：不能运行中事务中，如果包在事务中，抛异常</li><li>PROPAGATION_NOT_SUPPORTED：不支持事务，运行在非事务的环境</li></ul><p>不常用</p><ul><li>PROPAGATION_MANDATORY：必须包在事务中，没有事务则抛异常</li><li>PROPAGATION_NESTED：嵌套事务</li></ul><h4 id="测试事务间的互相影响作用是什么"><a href="#测试事务间的互相影响作用是什么" class="headerlink" title="测试事务间的互相影响作用是什么"></a>测试事务间的互相影响作用是什么</h4><ol><li><p>创建一个新表, 用户表</p></li><li><p>在pojo包中, 创建用户实体类</p></li><li><p>在mapper包中, 创建UsersMapper接口和UsersMapper.xml文件并开发</p></li><li><p>在service包中, 创建UsersService接口和UsersServiceImpl实现类</p></li><li><p>在UsersServiceImpl实现类中 调用账户的增加操作 =&gt; (也就是用户事务中包含着账户事务)</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token comment" spellcheck="true">//交给Spring去创建对象</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsersServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UsersService</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    UsersMapper usersMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    AccountsService accountsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Users users<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> usersMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户增加成功!num="</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用帐户的增加操作,调用的帐户的业务逻辑层的功能</span>        num <span class="token operator">=</span> accountsService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Accounts</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"帐户好的呢!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>测试结果图</p><p><img src="https://img-blog.csdnimg.cn/4528569dc6134fc395d9805a242421d8.png" alt="测试结果"></p></li></ol><h3 id="Spring中事务的五大隔离级别"><a href="#Spring中事务的五大隔离级别" class="headerlink" title="Spring中事务的五大隔离级别"></a>Spring中事务的五大隔离级别</h3><ul><li>未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据</li><li>提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)</li><li>可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读，但是innoDB解决了幻读</li><li>串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞(高并发不会使用, 速度慢, 很少用)</li><li>使用数据库默认的隔离级别isolation = Isolation.DEFAULT<ul><li>MySQL：mysql默认的事务处理级别是’REPEATABLE-READ’,也就是<strong>可重复读</strong></li><li>Oracle：oracle数据库支持READ COMMITTED 和 SERIALIZABLE这两种事务隔离级别。默认系统事务隔离级别是READ COMMITTED,也就是读已提交</li></ul></li></ul><h3 id="Spring的两种事务处理方式"><a href="#Spring的两种事务处理方式" class="headerlink" title="Spring的两种事务处理方式"></a>Spring的两种事务处理方式</h3><ol><li><p>注解式的事务</p><p>使用@Transactional注解完成事务控制,此注解可添加到类上,则对类中所有方法执行事务的设定.此注解可添加到方法上,只是对此方法执行事务的处理.</p></li><li><p>声明式事务(必须掌握)</p><p>在配置文件中添加一次,整个项目遵循事务的设定.</p></li></ol><h4 id="声明式事务的实现步骤"><a href="#声明式事务的实现步骤" class="headerlink" title="声明式事务的实现步骤"></a>声明式事务的实现步骤</h4><blockquote><p>  要求项目中的方法命名有规范<br>  1)完成增加操作包含    add  save  insert  set<br>  2)更新操作包含   update   change  modify<br>  3)删除操作包含   delete   drop    remove  clear<br>  4)查询操作包含   select   find    search  get </p></blockquote><ol><li><p>创建Spring核心配置文件(applicationContext_trans.xml  事务配置文件)</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--此配置文件与applicationContext_service.xml的功能一样,只是事务配置不同--></span>    <span class="token comment" spellcheck="true">&lt;!--导入applicationContext_mapper.xml--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicationContext_mapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--添加包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.service.impl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--添加事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置事务切面,哪些方法添加事务--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myadvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*select*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*find*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*search*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*get*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*insert*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">no-rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArithmeticException<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*add*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*save*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">no-rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArithmeticException<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*set*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*update*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*change*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*modify*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*delete*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*remove*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*drop*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*clear*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--绑定切面和切入点--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mycut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.bjpowernode.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myadvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mycut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解IO流</title>
      <link href="/2020/03/10/wen-jian-io-liu/"/>
      <url>/2020/03/10/wen-jian-io-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是流"><a href="#什么是流" class="headerlink" title="什么是流"></a>什么是流</h2><blockquote><p>文件在程序中是以流的形式来操作的</p></blockquote><p>流 : 数据在数据源(文件)和程序(内存)之间经历的路径</p><p>以Java程序(内存)为参考点</p><ul><li>输入流 : 数据从数据源到程序</li><li>输出流 : 数据从程序到数据源</li></ul><h3 id="文件基础知识"><a href="#文件基础知识" class="headerlink" title="文件基础知识"></a>文件基础知识</h3><p><span class="github-emoji"><span>🎪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 具体操作查阅文档 ~</p><ol><li>创建文件  <code>createNewFile()</code></li><li>获取文件信息 <code>getName </code>   <code>length</code>   <code>isFile</code>  <code>getAbsolutePath</code> <code>getParent</code> 等等</li><li>目录操作 <code>mkdirs</code>  <code>delete</code> 等等</li></ol><h2 id="IO流原理及分类"><a href="#IO流原理及分类" class="headerlink" title="IO流原理及分类"></a>IO流原理及分类</h2><blockquote><ul><li>I/O是input/output的缩写, 用于处理数据传输. 如读写文件, 网络通讯等</li><li>Java程序中, 对于数据的输入/输出操作以流的方式进行</li></ul></blockquote><ul><li>按操作数据单位不同分为 : 字节流(8 bit)和字符流</li><li>按数据流的流向不同分为 : 输入流和输出流</li><li>按流的角色的不同分为 : 节点流和处理流/包装流</li></ul><p>Java的IO流共涉及到40多个类, 都是从4个抽象基类派生出来的分别是  </p><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><h2 id="四个抽象基类的常用子类"><a href="#四个抽象基类的常用子类" class="headerlink" title="四个抽象基类的常用子类"></a>四个抽象基类的常用子类</h2><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><blockquote><p>文件输入流-读取</p></blockquote><p>让我们来实现一个小案例, 读取D盘下demo目录中的hello.txt文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用多个字符读取方法</span><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>StringToIntTable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInPutStream_01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//要读取文件的路径</span>    String filePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\hello.txt"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个byte数组, 用来多个字符读取</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次读取8个字节</span>    <span class="token keyword">int</span> readLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    FileInputStream fileInputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建FileInputStream对象,用于读取文件</span>            fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从该输入流读取最多buf.length字节的数据, 如果没有输入可用, 该方法将被阻止</span>            <span class="token comment" spellcheck="true">//如果返回-1, 表示读取完毕</span>            <span class="token comment" spellcheck="true">//如果读取正常,返回实际读取的字节数</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//public String(byte[] bytes,要解码为字符的字节</span>                <span class="token comment" spellcheck="true">//              int offset,要解码的第一个字节的索引</span>                <span class="token comment" spellcheck="true">//              int length)要解码的字节数</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readLen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭流</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意 : 我们使用的是字节输入流的子类, 也就是说我们并不能读取中文. 因为会造成乱码.</p><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><blockquote><p>文件输出流</p></blockquote><p>让我们来实现一个小案例, 将数据写入D盘下的demo下的a.txt, 如果文件不存在, 则创建文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用多个字符写入方法</span><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutPutStream_01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//要写入文件的路径</span>        String filePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\a.txt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建FileOutputStream对象</span>        FileOutputStream fileOutPutStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token string">"hello,world"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//得到FileOutPutStream对象</span>            fileOutPutStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//写入字符串</span>            fileOutPutStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把字符串转成byte数组</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭流</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                fileOutPutStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意 : 如果是 <code>new FileOutputStream(filePath)</code> 创建方式, 当写入内容时, 会覆盖掉原来的内容, 但是有时我们并不想这样做, 而是想要在末尾添加.</p><p>那么我们可以使用 <code>new FileOutputStream(filePath, true)</code> 创建方式</p><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><blockquote><p>字符输入流-读取</p></blockquote><p>常用方法 : </p><ul><li><code>new FileReader(File/String)</code></li><li><code>read</code> : 每次读取单个字符, 返回该字符, 如果到文件末尾返回-1</li><li><code>read(char[])</code> : 批量读取多个字符到数组, 返回读取到的字符数, 如果到文件末尾返回-1</li></ul><p>相关API</p><p>​    String类</p><ul><li><code>new String(char[])</code> : 将char[]转换成String</li><li><code>new String(char[],off,len)</code> : 将char[]的指定部分转换成String</li></ul><h3 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h3><blockquote><p>字符输出流</p></blockquote><p>常用方法 : </p><ul><li><code>new FileWriter(File/String)</code> : 覆盖模式, 相当于流的指针在首端</li><li><code>new FileWriter(File/String, true)</code> : 追加模式, 相当于流的指针在尾端</li><li><code>write(int)</code> : 写入单个字符</li><li><code>write(char[])</code> : 写入指定数组</li><li><code>write(char[],off,len)</code>  : 写入指定数组的指定部分</li><li><code>write(string)</code> : 写入整个字符串</li><li><code>write(string,off,len)</code> : 写入字符串的指定部分</li></ul><p>相关API</p><p>​    String类</p><ul><li><code>toCharArray</code> : 将String转换成char[]</li></ul><h3 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h3><blockquote><p>缓冲字符输入流, 属于处理流</p><ol><li>节点流可以从一个特定的数据源读写数据, 也就是专门操作文件的</li><li>处理流(也叫包装流)  在已存在的流(节点流或处理流) 之上, 为程序提供更为强大的读写功能. 既可以消除不同节点流的实现差异, 也可以提供更方便的方法来完成输入输出</li><li>关闭处理流时, 只需关闭外层流就行了, 因为底层真正在操作的, 还是节点流</li></ol></blockquote><p>BufferedReader类中, 有属性Reader, 即可以封装一个节点流, 该节点流可以是任意的. 只要是Reader子类</p><p>让我们来实现一个小案例, 使用BufferedReader读取文本文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedReader_01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String filePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\a.java"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建BufferedReader</span>        BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取</span>        String line<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按行读取</span>        <span class="token comment" spellcheck="true">//当返回一个null时, 表示读取完毕</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭流, 只需要关闭外层的处理流就行, java底层会自动去关闭节点流</span>        bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h3><blockquote><p>缓冲字符输出流, 属于处理流</p></blockquote><p>让我们来实现一个小案例, 把上一个案例读取到的数据写入到b.java中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedWriter_01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//源文件</span>        String srcFilePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\a.java"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//目标文件</span>        String destFilePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\b.java"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按行读取</span>        String line<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建BufferedReader</span>        BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>srcFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建BufferedWriter</span>        BufferedWriter bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>destFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边读边写</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//插入一个换行</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭流</span>        bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意 : BufferedReader 和 BufferedWriter 是按照字符操作的, 不要去操作二进制文件, 可能造成文件损坏</p><h3 id="BufferedInputStream与BufferedOutputStream"><a href="#BufferedInputStream与BufferedOutputStream" class="headerlink" title="BufferedInputStream与BufferedOutputStream"></a>BufferedInputStream与BufferedOutputStream</h3><blockquote><p>字节处理流</p></blockquote><p>让我们来实现一个小案例, 通过字节处理流完成图片的拷贝</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> pc<span class="token punctuation">.</span>B<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedOutputStream_01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//源文件</span>        String srcFilePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\demo1\\drb.png"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//目标文件</span>        String destFilePath <span class="token operator">=</span> <span class="token string">"d:\\demo\\drb1.png"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//每次读取1024个字节</span>        <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实际读取的字节</span>        <span class="token comment" spellcheck="true">//创建BufferedInputStream</span>        BufferedInputStream bufferedInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建BufferedOutputStream</span>        BufferedOutputStream bufferedOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边读边写</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bufferedInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            bufferedOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭流</span>        bufferedInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><h3 id="什么是对象流"><a href="#什么是对象流" class="headerlink" title="什么是对象流?"></a>什么是对象流?</h3><p>让我们首先看两个需求 : </p><ol><li>将<code>int num = 100;</code> 这个int数据保存到文件中, 注意不是100数字, 而是<code>int 100</code>, 并且, 能够从文件中直接恢复<code>int 100</code></li><li>将<code>Dog dog = new Dog("小黄",3);</code> 这个dog对象保存到文件中, 并且能够从文件恢复</li></ol><p>上面的要求就是在进行序列化和反序列化操作.</p><p>那么什么是序列化和反序列化呢? 序列化就是在保存数据时, 保存数据的值和数据类型. 反序列化就是在恢复数据时, 恢复数据的值和数据类型.</p><p>为了让某个对象支持序列化机制, 必须实现两个接口之一(<strong>Serializable/Externalizable</strong>), 使其类是可序列化的. </p><h3 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h3><blockquote><p>对象字节输出流</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span>String filePath <span class="token operator">=</span> <span class="token string">"e:\\data.dat"</span><span class="token punctuation">;</span>ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//序列化数据到 e:\data.dat</span>oos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// int -> Integer(实现了 Serializable)</span>oos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// boolean -> Boolean(实现了 Serializable)</span>oos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// char -> Character(实现了 Serializable)</span>oos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String</span><span class="token comment" spellcheck="true">//保存一个Dog对象</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据保存完毕(序列化形式)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果需要序列化某个类,需要接口Serializable(标记接口,没有方法)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h3><blockquote><p>对象字节输入流</p></blockquote><p>读取指定文件, 并进行反序列化恢复数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指定反序列化的文件</span>String filePath <span class="token operator">=</span> <span class="token string">"e:\\data.dat"</span><span class="token punctuation">;</span>ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取</span><span class="token comment" spellcheck="true">//读取的顺序需要和保存数据的顺序一致, 否则会出现异常</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readIne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object dog <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行类型="</span> <span class="token operator">+</span> dog<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dog信息="</span> <span class="token operator">+</span> dog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层 Object->Dog</span><span class="token comment" spellcheck="true">//关闭流</span>ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="对象处理流使用细节"><a href="#对象处理流使用细节" class="headerlink" title="对象处理流使用细节"></a>对象处理流使用细节</h3><ul><li>要求实现Serializable或者Externalizable接口, 一般而言, 我们使用的是Serializable. 因为它是一个标记接口, 而Externalizable需要我们实现其方法, 才能够使用.</li><li>读写顺序要一致</li><li>序列化对象时, 要求里面属性的类型也需要实现序列化接口</li><li>序列化具备可继承性, 也就是如果某类已经实现了序列化, 则它的所有子类也已经默认实现了序列化</li><li>序列化对象时, 默认将里面所有属性都进行序列化, 但除了static或transient修饰的成员</li></ul><h2 id="模拟修饰器设计模式"><a href="#模拟修饰器设计模式" class="headerlink" title="模拟修饰器设计模式"></a>模拟修饰器设计模式</h2><p>在前文我们提到的处理流就是使用修饰器设计模式, 不会直接与数据源相连.</p><p>下面让我们来模拟实现这种设计模式的源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Reader_</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//抽象类   模拟为Reader   </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReader_</span> <span class="token keyword">extends</span> <span class="token class-name">Reader_</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//节点流</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对文件进行读取..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringReader_</span> <span class="token keyword">extends</span> <span class="token class-name">Reader_</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//节点流</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取字符串..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedReader_</span> <span class="token keyword">extends</span> <span class="token class-name">Reader_</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//处理流</span>    <span class="token keyword">private</span> Reader_ reader_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">BufferedReader_</span><span class="token punctuation">(</span>Reader_ reader_<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reader_ <span class="token operator">=</span> reader_<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//扩展</span>    <span class="token comment" spellcheck="true">//让方法更加灵活,多次读取文件</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFiles</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            reader_<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//扩展 readString,批量处理字符串数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readStrings</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            reader_<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//main中</span>BufferedReader_ bufferedReader_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedReader_<span class="token punctuation">.</span><span class="token function">readFiles</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读十次文件</span>BufferedReader_ bufferedReader_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedReader_<span class="token punctuation">.</span><span class="token function">readStrings</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取5次字符串</span></code></pre><h2 id="如何解决乱码问题"><a href="#如何解决乱码问题" class="headerlink" title="如何解决乱码问题?"></a>如何解决乱码问题?</h2><p>默认情况下, 我们使用UTF-8编码, 但是如果编码出现了问题, 不是使用UTF-8而是其他编码, 例如ANsI, 我们会出现中文乱码的问题. 如何解决? 我们可以使用转换流来避免出现乱码问题.</p><p>转换流 : 可以把字节流转换成字符流. </p><p>当处理纯文本数据时, 如果使用字符流效率更高, 并且可以有效解决中文乱码问题, 所以建议将字节流转换成字符流, 可以在使用时指定编码格式</p><h3 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h3><blockquote><p>Reader的子类, 可以将InputStream(字节流)转换成Reader(字符流)</p></blockquote><p>将字节流 FileInputStream 转成字符流 InputStreamReader, 指定编码 UTF-8</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputStreamReader_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\a.txt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把FileInputStream 转成 InputStreamReader, 指定了utf-8码</span>        InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把InputStreamReader 传入 BufferedReader ,使用BufferedReader读取(效率高)</span>        BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取</span>        String s <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取的内容"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭流</span>        bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h3><blockquote><p>Writer的子类, 可以将OutputStream(字节流)转换成Writer(字符流)</p></blockquote><p>将FileOutputStream(字节流)  转换成 OutputStreamWriter(字符流)  指定编码形式gbk</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> io_test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStreamWriter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutputStreamWriter_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\a.txt"</span><span class="token punctuation">;</span>        OutputStreamWriter outputStreamWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStreamWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hi,哒哒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStreamWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="配置文件properties"><a href="#配置文件properties" class="headerlink" title="配置文件properties"></a>配置文件properties</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//读取</span><span class="token comment" spellcheck="true">//使用Properties类来读取mysql.properties文件</span><span class="token comment" spellcheck="true">//1.创建Properties对象</span>Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.加载指定配置文件</span>properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src\\mysql.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.把k-v显示到控制台</span>properties<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.根据key获取对应的值</span>String user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改</span><span class="token comment" spellcheck="true">//使用Properties类添加key-val到新文件mysql.properties中</span><span class="token comment" spellcheck="true">//1.如果该文件没有key就是创建</span><span class="token comment" spellcheck="true">//2.如果该文件有key就是修改</span>Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"charset"</span><span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"汤姆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将 k-v存储到文件中</span>properties<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src:\\mysql2.properties"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注释这里为null</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程初级</title>
      <link href="/2020/03/02/duo-xian-cheng-ji-chu/"/>
      <url>/2020/03/02/duo-xian-cheng-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><h4 id="继承Thread创建线程"><a href="#继承Thread创建线程" class="headerlink" title="继承Thread创建线程"></a>继承Thread创建线程</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span><span class="token comment" spellcheck="true">//创建Cat对象,可以当做线程使用</span>Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动线程</span><span class="token comment" spellcheck="true">//说明 : 当main线程启动一个子线程, 主线程不会阻塞,会继续执行</span><span class="token comment" spellcheck="true">//这时 主线程和子线程是交替执行的</span><span class="token comment" spellcheck="true">//1.当一个类继承了Thread类, 该类就可以当成线程使用</span><span class="token comment" spellcheck="true">//2.我们会重写 run 方法, 写上自己的业务代码</span><span class="token comment" spellcheck="true">//3. run Theread类 实现了 Runnable 接口的run方法</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//重写run方法,写上自己的业务逻辑</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//该线程每隔1秒,在控制台输出喵喵</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//休眠一秒</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实现Runnable接口创建线程"><a href="#实现Runnable接口创建线程" class="headerlink" title="实现Runnable接口创建线程"></a>实现Runnable接口创建线程</h4><ol><li>java是单继承的, 在某些情况下一个类可能已经继承了某个父类, 这时在用继承Thread类方法来创建线程显然不可能了</li><li>所以通过实现Runnable接口创建线程</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span>Dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不能直接调用start</span><span class="token comment" spellcheck="true">//创建了Thread对象, 把dog对象(实现Runnable),放入Thread</span><span class="token comment" spellcheck="true">//使用到了代理模式</span>Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//休眠一秒</span>             <span class="token keyword">try</span><span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>代理模式</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//模拟简单代理模式</span><span class="token keyword">class</span> <span class="token class-name">ThreadProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//你可以把ThreadProxy类当做   真正的Thread类</span>    <span class="token keyword">private</span> Runnable target <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性, 类型是 Runnable   </span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">ThreadProxy</span><span class="token punctuation">(</span>Runnable target<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//传进来一个实现了Runnable接口的对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个方法是真正实现多线程的方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态绑定</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="多线程机制"><a href="#多线程机制" class="headerlink" title="多线程机制"></a>多线程机制</h3><ol><li>在多线程之中, 不是主线程结束了就意味着进程结束, 而是要等所有的线程结束.</li><li>从Java的设计来看, 通过继承Thread或者实现Runnable接口来创建线程本质没有区别</li><li>实现Runnable接口方式更加适合多线程共享一个资源的情况, 并且避免了单继承的限制</li></ol><p><strong>为什么是start?</strong></p><p>如果直接调用<code>run()</code>方法的话, 就是一个普通的方法, 没有真正的启动一个线程, 就会把<code>run()</code>方法执行完毕, 才向下执行</p><p><strong>start()方法执行过程</strong></p><p><img src="https://img-blog.csdnimg.cn/fffa463262e744249978b42d803b584b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_10,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>注意:</strong></p><p><img src="https://img-blog.csdnimg.cn/57bc0d92d8f0433b9c2d77737de2eb5d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h3><p><strong>通知线程退出</strong></p><p>设置一个Boolean变量, 在线程外改变该变量. 使线程退出循环.</p><p><strong>线程插队</strong></p><ol><li><code>yield</code>  //线程的礼让. 让出cpu, 让其他线程执行, 但礼让的时间不确定, 所以也不一定礼让成功</li><li><code>join</code>  //线程的插队. 插队的线程一旦插队成功, 则肯定会先执行完插入的线程所以的任务</li></ol><p><strong>用户线程和守护线程</strong></p><ol><li><p>用户线程 : 也叫工作线程, 当线程的任务执行完成或通知方式结束</p></li><li><p>守护线程 : 一般是为工作线程服务的, 当所有的用户线程结束, 守护线程自动结束, 常见的守护线程是 : GC(垃圾回收机制)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//当我们希望当main线程结束后, 子线程自动结束, 将子线程设置为守护线程就可以</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p><strong>线程状态</strong></p><p><img src="https://img-blog.csdnimg.cn/34430a0a9fd94f13846e88f87abd81ff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_12,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h3><ol><li>在多线程编程, 一些敏感数据不允许被多个线程同时访问, 此时就使用同步访问技术, 保证数据在任何同一时刻, 最多有一个线程访问, 以保证数据的完整性</li><li>线程同步, 即当有一个线程在对内存进行操作时, 其他线程都不可以对这个内存地址进行操作, 直到该线程完成操作, 其他线程才能对该内存地址进行操作</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.同步代码块</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//得到对象的锁, 才能操作同步代码</span>    <span class="token comment" spellcheck="true">//需要被同步代码</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.同步方法</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">m</span> <span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//同步方法, 在同一时刻, 只能有一个线程来执行m方法</span>    <span class="token comment" spellcheck="true">//需要被同步的代码</span><span class="token punctuation">}</span></code></pre><p><strong>eg :</strong></p><p><img src="https://img-blog.csdnimg.cn/6cef8f4fc95b4a9795bc81ed8985926c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Synchronized细节"><a href="#Synchronized细节" class="headerlink" title="Synchronized细节"></a>Synchronized细节</h3><ol><li>同步的局限性 : 导致程序的执行效率降低</li><li>非静态的方法中同步代码块 的锁可以是this, 也可以是其他对象(<strong>要求多个线程的锁是同一个对象</strong>)</li><li>静态的方法中同步代码块 的锁为当前类本身</li></ol><h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h3><p><img src="https://img-blog.csdnimg.cn/885963e670564125a429ead1a42b93cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/3e1bcaf7860d49f58551ba03902d529d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合泛型</title>
      <link href="/2020/02/25/ji-he/"/>
      <url>/2020/02/25/ji-he/</url>
      
        <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="ArrayList类-单列集合-List接口"><a href="#ArrayList类-单列集合-List接口" class="headerlink" title="ArrayList类(单列集合)-List接口"></a>ArrayList类(单列集合)-List接口</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main</span>List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//add:添加单个元素</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//list.add( new Integer(10))</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//remove:删除指定元素</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除第一个元素</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定删除某个元素</span><span class="token comment" spellcheck="true">//contains:查找元素是否存在</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T</span><span class="token comment" spellcheck="true">//size:获取元素个数</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token comment" spellcheck="true">//isEmpty:判断是否为空</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//F</span><span class="token comment" spellcheck="true">//clear:清空</span>list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//addAll:添加多个元素(放一个集合进去)</span>ArrayList list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addALL</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//containsAll:查找多个元素是否都存在</span><span class="token comment" spellcheck="true">//remove:删除多个元素</span></code></pre><p><strong>细节</strong></p><ol><li>ArrayList可以加入null, 并且多个</li><li>ArrayList是由数组来实现数据存储的</li><li>ArrayList基本等同于Vector, 除了ArrayList是线程不安全的(执行效率高), 在多线程情况下, 不建议使用ArrayList</li></ol><h3 id="ArrayList扩容机制"><a href="#ArrayList扩容机制" class="headerlink" title="ArrayList扩容机制"></a>ArrayList扩容机制</h3><ol><li>ArrayList中维护了一个Object类型的数组elementData</li><li>当创建ArrayList对象时, 如果使用的是无参构造器, 则初始elementData容量为0, 第一次添加, 则扩容elementData为10, 如需要再次扩容, 则扩容elementData为1.5倍</li><li>如果使用的是指定大小的构造器, 则初始elementData容量为指定大小, 如果需要扩容, 则直接扩容elementData为1.5倍</li></ol><p>每次都要去检测要不要扩容, 所以效率不高</p><p><img src="https://img-blog.csdnimg.cn/b1213c57c7c045d3aece2b0a7937a901.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/705a3e3bfb02489f9ef5abc6ac14e0f6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Vector类"><a href="#Vector类" class="headerlink" title="Vector类"></a>Vector类</h3><ol><li>Vector底层也是一个对象数组</li><li>Vector是线程同步的, 即线程安全</li><li>在开发中, 需要线程同步安全时, 考虑使用Vector</li></ol><p><img src="https://img-blog.csdnimg.cn/1b53b56524b54e0a8fc31a49acfbd36b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h3><ol><li>LinkedList底层实现了双向链表和双端队列特点</li><li>可以添加任意元素(元素可以重复), 包括null</li><li>线程不安全, 没有实现同步</li></ol><p><strong>LinkedList底层机制</strong></p><ol><li>LinkedList底层维护了一个双向链表</li><li>LinkedList中维护了两个属性first和last分别指向 首节点和尾节点</li><li>每个节点(Node对象), 里面维护了prev, next, item三个属性, 其中通过prev指向前一个, 通过next指向后一个节点, 最终实现双向链表</li><li>LinkedList的元素的添加和删除, 不是通过数组完成的, 相对来说效率较高</li></ol><p><img src="https://img-blog.csdnimg.cn/2cffd646d5654b67941485defb8864b4.png" alt="img"></p><h3 id="List集合选择"><a href="#List集合选择" class="headerlink" title="List集合选择"></a>List集合选择</h3><p><img src="https://img-blog.csdnimg.cn/cb04e2e78efc46e4ab0b6bbaf5aa8867.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h3><p>Iterator对象称为迭代器, 主要用于遍历Collection集合中的元素. 所以实现了Collection接口的集合类都有一个Iterator()方法. Iterator仅用于遍历集合, Iterator本身并不存放对象</p><p><img src="https://img-blog.csdnimg.cn/c6549b33a6df4967bc573bdd441e641f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>细节</strong></p><ol><li>当退出while循环后, 这时iterator迭代器, 指向最后的元素</li><li>如果接着指向<code>iterator.next();</code> 会报错 : NoSuchElementException</li><li>如果希望再次遍历, 需要重置迭代器</li></ol><p><strong>增强for循环</strong></p><p><img src="https://img-blog.csdnimg.cn/c973cd66c5314f2d809e4d8ac423d4b7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>也是双列集合, 但是和Map不同的是, 他的 [K, V] 中的V是一个常量present</p><ol><li>set 接口的实现类的对象(Set接口对象), 不能存放重复的元素, 可以添加一个null</li><li>set 接口对象存放数据是无序的(即添加的顺序和取出的顺序不一致)</li><li>取出的顺序的顺序虽然不是添加的顺序, 但是它是固定的</li><li>遍历<ul><li>方式一 : 使用迭代器</li><li>方式二 : 增强for</li><li>不能通过索引的方式来获取, (不能用普通的for来遍历)</li></ul></li></ol><h3 id="HashSet类"><a href="#HashSet类" class="headerlink" title="HashSet类"></a>HashSet类</h3><ol><li>HashSet实际上是HashMap</li><li>可以存放null值, 但是只能有一个null</li><li>HashSet不保证元素是有序的, 取决于hash后, 再确定索引的结果</li><li>不能有重复元素/对象</li></ol><p><strong>经典面试题</strong></p><pre class=" language-java"><code class="language-java">set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HashSet 不能添加相同的元素/对象</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//OK</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//OK</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ok</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入不了</span><span class="token comment" spellcheck="true">//为什么添加不了,通过底层机制说明</span><span class="token comment" spellcheck="true">//hash() + equals()都相同的时候放弃加入</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="HashSet底层机制"><a href="#HashSet底层机制" class="headerlink" title="HashSet底层机制"></a>HashSet底层机制</h3><ul><li>HashSet底层是HashMap</li><li>添加一个元素时, 先得到hash值  - 转成 - 索引值</li><li>找到存储数据表table, 看这个索引位置是否已经存放元素了</li><li>如果没有, 直接加入</li><li>如果有, 调用equals比较, 如果相同, 就放弃添加, 如果不相同, 则添加到最后</li><li>在Java8中, 如果一条链表的元素大于等于 TREEIFY_THRESHOLD(默认是8) 并且table的大小 大于等于 MIN_TREEIFY_CAPACITY(默认是64), 就会进行树化(红黑树), 否则仍然采用数组扩容机制</li></ul><p><strong>HashSet扩容机制</strong></p><ol><li><p>HashSet底层是HashMap, 第一次添加时, table数组扩容到16, 临界值(threshold) 是 16*加载因子(loadFactor) 是0.75  = 12</p></li><li><p>如果table数组使用到了临界值12, 就会扩容到16 * 2 = 32, 新的临界值就是32 * 0.75 =24, 依次类推</p></li><li><p><strong>注意 :</strong></p><p>当我们向HashSet增加了一个元素, Node - 加入table, 就算是增加了一个 size++</p></li></ol><h3 id="LinkedHashSet类"><a href="#LinkedHashSet类" class="headerlink" title="LinkedHashSet类"></a>LinkedHashSet类</h3><ol><li><p>LinkedHashSet 是 HashSet的子类</p></li><li><p>LinkedHashSet 底层是一个LinkedHashMap, 底层维护了一个数组 + 双向链表</p></li><li><p>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置, <strong>同时使用链表维护元素的次序, 这使得元素看起来是以插入顺序保存的</strong></p><p><img src="https://img-blog.csdnimg.cn/75db6dd19fbb4d9398dfd5141a8ef2f9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>LinkedHashSet 不允许添加重复的元素</p></li></ol><h3 id="Map接口-双列集合"><a href="#Map接口-双列集合" class="headerlink" title="Map接口(双列集合)"></a>Map接口(双列集合)</h3><ol><li>Map 与 Collection 并列存在. Map 用于保存具有映射关系的数据 : Key - Value(双列元素)</li><li>Map中的key 和 value 可以是任何引用类型的数据, 会封装到HashMap$Node对象中</li><li>Map中的 key 不允许重复, 原因和HashSet一样, 如果重复了, 会进行替换原有的值</li><li>Map中的 value 可以重复</li><li>Map的 key 可以为null, value 也可以为null, 但是注意 key 只能有一个null, value 可以有多个null</li><li>常用String类作为Map的 key</li><li>key 和 value 之间存在单向一对一关系, 即通过指定的 key 总能找到对应的 value</li><li><img src="https://img-blog.csdnimg.cn/2c56daa3fafb4b0b8ae3606ee4826597.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></li></ol><pre class=" language-Java"><code class="language-Java">//main中Map map = new HashMap();//添加元素map.put("no1","张无忌");map.put("no2","jack");//无序的//获取key对应的valuemap.get("no2");//删除map.remove("no1");//获取元素个数map.size();//判断个数是否为0map.isEmpty();//清除map.clear();//查找key是否存在containsKey("no2");</code></pre><h3 id="Map接口遍历"><a href="#Map接口遍历" class="headerlink" title="Map接口遍历"></a>Map接口遍历</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*1.containsKey : 查找键是否存在2.keySet : 获取所有的键3.entrySet : 获取所有关系k-v4.values : 获取所有的值**/</span>Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"qwe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"asd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"zxc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式一 先取出所有的key, 通过key取出对应的value</span>Set keyset <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.增强for</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object key <span class="token operator">:</span> keyset<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.迭代器</span>Iterator iterator <span class="token operator">=</span> keyset<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式二 把所有的values取出</span>Collection values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.增强for</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object value <span class="token operator">:</span> values<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.迭代器</span>Iterator iterator2 <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object value <span class="token operator">=</span> iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式三 通过EntrySet 来获取k-v</span>Set entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//EntrySet&lt;Entry&lt;K,V>></span><span class="token comment" spellcheck="true">//1.增强for</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将entry转成 Map.Entry</span>    Map<span class="token punctuation">.</span>Entry m <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.迭代器</span>Iterator iterator3 <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator3<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object next <span class="token operator">=</span> iterator3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HashMap$Node -实现-> Map.Entry (getKey, getValue)</span>    <span class="token comment" spellcheck="true">//向下转型 Map.Entry</span>    Map<span class="token punctuation">.</span>Entry m <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> entry<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a>HashMap类</h3><ul><li>小结<ul><li>HashMap是Map接口使用频率最高的实现类</li><li>HashMap是以 key - val 对的方式来存储数据(HashMap$Node类型)</li><li>key不能重复, 但是val可以重复, 允许使用null键和null值</li><li>如果添加相同的key, 则会覆盖原来的key - val, 等同于修改(key不会替换, val会替换)</li><li>与HashSet一样, 不能保证映射的顺序, 因为底层是以hash表的方式来存储</li><li>HashMap没有实现同步, 因此是线程不安全的</li><li>jdk8底层是 数组+链表+红黑树</li><li>扩容机制和 HashSet 相同</li></ul></li></ul><h3 id="HashTable类"><a href="#HashTable类" class="headerlink" title="HashTable类"></a>HashTable类</h3><ol><li>存放的元素是键值对 : 即 K-V</li><li>hashtable的键和值都不能为null, 否则会抛出NullPointerException</li><li>hashtable使用方法基本和HashMap一样</li><li>hashtable是线程安全的, HashMap是线程不安全的</li></ol><p><strong>底层 : 扩容机制</strong></p><p><img src="https://img-blog.csdnimg.cn/d6bd5a41cc834134a38518d49a87a845.png" alt="img"></p><h3 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h3><ol><li>Properties类继承自HashTable类, 并且实现了Map接口, 也是使用一种键值对的形式来保存数据</li><li>使用特点和HashTable类似</li><li>Properties <strong>还可以用于</strong>从 xxx.properties 文件中, 加载数据到Properties类对象, 并进行读取和修改</li><li>xxx.properties 文件通常作为配置文件</li></ol><h3 id="集合的选择"><a href="#集合的选择" class="headerlink" title="集合的选择"></a>集合的选择</h3><p><img src="https://img-blog.csdnimg.cn/c99efddc001740178d79ad1fcc2bf58e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="比较器Comparator"><a href="#比较器Comparator" class="headerlink" title="比较器Comparator"></a>比较器Comparator</h3><pre class=" language-java"><code class="language-java">TreeSet treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//下面调用String的comparaTo方法进行字符串大小比较</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加数据</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层机制</span><span class="token comment" spellcheck="true">//1.构造器把传入的比较器对象, 赋给了TreeSet的底层 TreeMap的属性this.comparator</span><span class="token comment" spellcheck="true">//2.在调用 treeSet.add("tom"), 在底层会执行到</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> cpr <span class="token operator">=</span> comparator<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cpr <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//cpr 就是我们的匿名内部类(对象)</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        parent <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态绑定到我们的匿名内部类(对象)compare</span>        cmp <span class="token operator">=</span> cpr<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> t<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> t<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//如果相等,即返回0,这个key就没有加入</span>            <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p> 泛型的理解和好处</p></blockquote><p>使用传统方法的问题分析</p><ol><li>不能对加入到集合ArrayList中的数据类型进行约束(不安全)</li><li>遍历的时候, 需要进行类型转换, 如果集合中的数据量较大, 对效率有影响</li></ol><h3 id="泛型的细节"><a href="#泛型的细节" class="headerlink" title="泛型的细节"></a>泛型的细节</h3><ol><li><p>泛型的作用是 : 可以在类声明时通过一个标识表示类中某个属性的类型, 或者是某个方法的返回值的类型, 或者是参数类型</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span>Person<span class="token operator">&lt;</span>String<span class="token operator">></span> stringPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    E s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//E表示 s的数据类型, 该数据类型在定义Person对象的时候指定,即在编译期间,就确定E是什么类型</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>E s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//E也可以是参数类型</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回类型使用E</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><code>interface List&lt;T&gt;{}</code>, <code>public class HashSet&lt;E&gt;{}</code></p><p>T, E 只能是引用类型</p></li><li><p>在给泛型指定具体类型后, 可以传入该类型或者子类类型</p></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如果是这样写, 泛型默认是 Object</span>ArrayList arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于ArrayList&lt;Object> arrayList = new ArrayList&lt;Object>();</span></code></pre></li></ol><h3 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h3><ol><li>A后面泛型, 我们就把 A 称为自定义泛型类</li><li>T,R,M泛型的标识符, 一般是单个大写字母</li><li>泛型标识符可以有多个</li><li>普通成员可以使用泛型 (属性, 方法)</li><li>使用泛型的数组, 不能初始化 (因为数组在 new 不能确定类型, 就无法在内存开空间)</li><li>静态方法中不能使用类的泛型(因为静态方法需要类加载, 类加载的时候不能确定类型)</li></ol><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><ol><li>接口中, 静态成员也不能使用泛型</li><li>泛型接口的类型, 在继承接口或者实现接口时确定</li><li>没有指定类型, 默认为Object</li></ol><h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><ol><li>泛型方法, 可以定义在普通类, 也可以定义在泛型类</li><li>泛型方法被调用的时候类型就会确定, 当调用方法时, 传入参数, 编译器就会确定类型</li><li><code>public void eat(E e){}</code>不是一个泛型方法, 儿是eat方法使用了类声明的泛型</li><li>泛型方法, 可以使用类声明的泛型, 也可以使用自己声明的泛型</li></ol><h3 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h3><ol><li> 泛型没有继承性</li></ol><p>   <code>List&lt;Object&gt; list = new ArrayList&lt;String&gt; ()</code>    //错误的</p><ol start="2"><li><p><code>&lt;?&gt;</code> 表示支持任意类型</p></li><li><p><code>&lt;? extends A&gt;</code>  表示支持A类及A类的子类, 规定了泛型的上限</p></li><li><p><code>&lt;? super A&gt;</code>  表示支持A类以及A类的父类, 不限于直接父类, 规定了泛型的下限</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举与异常</title>
      <link href="/2020/02/22/mei-ju-yu-zhu-jie/"/>
      <url>/2020/02/22/mei-ju-yu-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举和注解"><a href="#枚举和注解" class="headerlink" title="枚举和注解"></a>枚举和注解</h2><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>创建Season对象有如下特点</p><ol><li>季节的值是有限的几个值(spring , summer , fall , winter)</li><li>只读, 不需要修改</li></ol><p>引出枚举类</p><h3 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//描述</span>    <span class="token comment" spellcheck="true">//1.将构造器私有化, 目的防止 直接new</span>    <span class="token comment" spellcheck="true">//2.去掉setXxx方法, 防止属性被修改</span>    <span class="token comment" spellcheck="true">//3.在Season内部, 直接创建固定的对象</span>    <span class="token comment" spellcheck="true">//4.对外暴露对象(通过为对象添加public final static修饰符)</span>        <span class="token comment" spellcheck="true">//定义四个固定的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season SPRING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"温暖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season WINTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"寒冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season FALL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"凉爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season SUMMER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"炎热"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通常对枚举对象/属性使用final + static共同修饰,实现底层优化</span></code></pre><ol><li>枚举对象名通常使用全部大写</li><li>枚举对象根据需要, 可以有多个属性</li></ol><h3 id="enum关键字"><a href="#enum关键字" class="headerlink" title="enum关键字"></a>enum关键字</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Season<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.使用关键 enum 替代 class</span>    <span class="token comment" spellcheck="true">//2. public static Season SPRING = new Season("春天","温暖"); 直接使用 SPRING("春天","温暖");   </span>    <span class="token comment" spellcheck="true">//常量名(实参列表)</span>    <span class="token comment" spellcheck="true">//3.如果有多个常量(对象), 使用 , 号间隔即可</span>    <span class="token comment" spellcheck="true">//4.如果使用enum来实现枚举, 要求将定义的常量对象,写在最前面</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"温暖"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"寒冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//描述</span><span class="token punctuation">}</span></code></pre><h3 id="enum类常用方法"><a href="#enum类常用方法" class="headerlink" title="enum类常用方法"></a>enum类常用方法</h3><p><img src="https://img-blog.csdnimg.cn/1be4aca2e9b341218477d3045a3dddca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_14,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="enum细节"><a href="#enum细节" class="headerlink" title="enum细节"></a>enum细节</h3><ol><li><p>使用enum关键字开放一个枚举类时, 默认会继承Enum类, 而且是一个final类 (使用javap 可以证明)</p></li><li><p>如果使用无参构造器 创建 枚举对象, 则实参列表和小括号都可以省略’</p></li><li><p>枚举对象必须放在枚举类的首行</p></li><li><p>使用enum关键字后, 就不能再继承其他类了, 因为enum会隐式继承Enum, 而Java是单继承机制</p></li><li><p>枚举类和普通类一样, 可以实现接口</p><p><code>enum 类名 implements 接口1, 接口2{}</code></p></li></ol><h3 id="foreach语句-for循环补充"><a href="#foreach语句-for循环补充" class="headerlink" title="foreach语句 - for循环补充"></a>foreach语句 - for循环补充</h3><p><img src="https://img-blog.csdnimg.cn/adbb1060bc58442b91665f30fe124e89.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>foreach执行流程是 : 依次从nums数组中取出数据, 赋给i, 如果取出完毕, 则退出for</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象高级</title>
      <link href="/2020/02/20/mian-xiang-dui-xiang-gao-ji/"/>
      <url>/2020/02/20/mian-xiang-dui-xiang-gao-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象-高级"><a href="#面向对象-高级" class="headerlink" title="面向对象(高级)"></a>面向对象(高级)</h2><h3 id="类变量-静态变量-和类方法-静态方法"><a href="#类变量-静态变量-和类方法-静态方法" class="headerlink" title="类变量(静态变量)和类方法(静态方法)"></a>类变量(静态变量)和类方法(静态方法)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个静态变量count</span>    <span class="token comment" spellcheck="true">//该变量最大的特点就是会被Child类所有的对象实例共享</span>    <span class="token comment" spellcheck="true">//类变量,可以通过类名来访问</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="类变量内存布局"><a href="#类变量内存布局" class="headerlink" title="类变量内存布局"></a>类变量内存布局</h3><p>jdk-8:</p><p><img src="https://img-blog.csdnimg.cn/17fda7ed343f40f9a1c668f1d70e6fc1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="类变量细节"><a href="#类变量细节" class="headerlink" title="类变量细节"></a>类变量细节</h3><ol><li><p>静态变量的访问修饰符的访问权限和范围和普通属性是一样的</p></li><li><p>类变量是随着类的加载而创建, 所以即使没有创建对象实例也可以访问</p></li><li><p>什么时候需要用类变量</p><p>当我们需要让某个类的所有对象都共享一个变量时, 就可以考虑使用类变量(静态变量) : 比如 : 定义学生类, 统计所有学生共交多少钱</p></li><li><p>类变量与实例变量(普通属性)区别</p><p>类变量是该类的所有对象共享的, 而实例变量是每个对象独享的</p></li><li><p>类变量的生命周期是随着类的加载开始, 随着类消亡而销毁</p></li></ol><h3 id="类方法细节"><a href="#类方法细节" class="headerlink" title="类方法细节"></a>类方法细节</h3><ol><li><p>静态方法可以访问静态属性</p></li><li><p>什么时候需要类方法</p><p>当方法中不涉及到任何和对象相关的成员, 则可以将方法设计成静态方法, 提高开发效率</p><p>比如: 工具类中的方法utils        Math类\Arrays类等等</p><p>在实际开发中, 往往会将一些通用的方法, 设计成静态方法, 这样我们不需要创建对象就可以使用, 比如打印一维数组, 冒泡排序, 完成某个计算任务等等</p></li><li><p>类方法和普通方法都是随着类的加载而加载, 将结构信息存储在方法区: 类方法中无this的参数</p></li><li><p>普通方法和对象有关, 需要通过对象名调用, 类方法可以通过类名调用, 也可以通过对象名调用</p></li><li><p>类方法中不允许使用和对象有关的关键字, 比如this和super. 普通方法可以</p></li><li><p>类方法中只能访问静态变量或静态方法</p></li><li><p>普通成员方法, 既可以访问普通变量(方法), 也可以访问静态变量(方法)    (必须遵守访问权限)</p></li></ol><h3 id="深入理解main方法"><a href="#深入理解main方法" class="headerlink" title="深入理解main方法"></a>深入理解main方法</h3><ol><li><p>main方法是虚拟机调用</p></li><li><p>java虚拟机需要调用类的main()方法, 所以该方法的访问权限必须是public</p></li><li><p>java虚拟机在执行main()方法时不必创建对象, 所以该方法必须是static</p></li><li><p>该方法接收String类型的数组参数, 该数组中保存执行java命令时传递给所运行的类的参数</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//args 是如何传入</span>        <span class="token comment" spellcheck="true">//遍历显示</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个参数="</span> <span class="token operator">+</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/944b61344229491f9de7e0dd064d77ae.png" alt="img"></p></li><li><p>java 执行的程序 参数1 参数2 参数3</p><p><img src="https://img-blog.csdnimg.cn/0b44bbf615da4983bea76d26ccad64b5.png" alt="img"></p></li><li><p>在main()方法中, 我们可以直接调用main方法所在类的静态方法或静态属性</p></li><li><p>但是不能直接访问该类中的非静态成员, 必须创建该类的一个实例对象后, 才能通过这个对象去访问类中的非静态成员</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main01</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//非静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可以直接使用name</span>        <span class="token comment" spellcheck="true">//1.静态方法可以访问本类的静态成员</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.静态方法不可以访问本类的非静态成员</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误</span>        Main01 main01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先创建一个本类的对象, 再调用n1</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> main01<span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ol><h3 id="代码块使用细节"><a href="#代码块使用细节" class="headerlink" title="代码块使用细节"></a>代码块使用细节</h3><ol><li><p>static代码块也叫静态代码块, 作用就是对类进行初始化, 而且它随着<strong>类的加载</strong>而执行, 并且<strong>只会执行一次</strong>(因为类加载只会一次). 如果是普通代码块, 每创建一次对象, 就执行</p></li><li><p>类什么时候被加载</p><ol><li>创建对象实例时(new)</li><li>创建子类对象实例时, 父类也会被加载</li><li>使用类的静态成员时(静态属性, 静态方法)</li></ol></li><li><p>普通的代码块, 在创建对象实例时, 会被隐式的调用. 被创建一次, 就会被调用一次. <strong>如果只是使用类的静态成员时, 普通代码块并不会执行</strong>(类加载与普通代码块没有关系)</p></li><li><p>创建一个对象时, 在一个类 调用顺序是 :</p><ol><li><p>调用静态代码块和静态属性初始化(注意 : 静态代码块和静态属性初始调用的优先级一样, 如果有多个静态代码块和多个静态变量初始化, 则按他们定义的顺序调用)</p><p><img src="https://img-blog.csdnimg.cn/865d90eff701405a93c4cff9430a258c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_16,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>调用普通代码块和普通属性的初始化(注意 : 普通代码块和普通属性初始化调用的优先级一样, 如果有多个普通代码块和多个普通属性初始化, 则按定义顺序调用)</p></li><li><p>调用构造器(优先级最低)</p></li></ol></li><li><p>构造器的最前面其实隐含了 super() 和 调用普通代码块,  静态相关的代码块, 属性初始化, 在类加载时, 就执行完毕了, 因此是优先于构造器和普通代码块执行的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//构造器</span>        <span class="token comment" spellcheck="true">//这里有隐藏的执行要求</span>        <span class="token comment" spellcheck="true">//1.super();//默认调用父类无参构造器</span>        <span class="token comment" spellcheck="true">//2.调用普通代码块</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>我们看一下创建一个子类时(继承关系), 他们的静态代码块, 静态属性初始化, 普通代码块, 普通属性初始化, 构造方法调用顺序如下 : </p><ol><li><p>父类的静态代码块和静态属性(优先级一样, 按定义顺序执行)</p></li><li><p>子类的静态代码块和静态属性(优先级一样, 按定义顺序执行)</p></li><li><p>父类的普通代码块和普通属性初始化(优先级一样, 按定义顺序执行)</p></li><li><p>父类的构造器</p></li><li><p>子类的普通代码块和普通属性初始化(优先级一样, 按定义顺序执行)</p></li><li><p>子类的构造器</p><p>解读 :</p><p>(1)进行类的加载</p><p>1.1 先加载父类   1.2 再加载子类</p><p>(2)创建对象</p><p>2.1从子类的构造器开始   2.2进入父类的构造器   2.3调用父类的普通代码块   2.4执行父类的构造器   2.5返回子类执行普通代码块   2.6执行子类的构造器</p></li></ol></li><li><p>静态代码块只能直接调用静态成员(静态属性和静态方法), 普通代码块可以调用任意成员</p></li></ol><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><p><strong>饿汉式</strong></p><ol><li>构造器私有化    -  防止直接 new</li><li>类的内部创建对象(该对象是static)</li><li>向外暴露一个静态的公共方法, 返回对象</li><li>代码实现</li></ol><p><strong>懒汉式</strong></p><ol><li>构造器私有化    -  防止直接 new</li><li>定义一个静态属性, 不直接new</li><li>向外暴露一个静态的公共方法, 返回对象</li><li>在静态公共方法里面进行判断此时是否创建对象, 如果没有创建对象, 那么就创建一个对象</li></ol><p><strong>饿汉式与懒汉式的区别</strong></p><ol><li>二者最主要的区别在于创建对象的时机不同 : 饿汉式是在类加载就创建了对象实例, 而懒汉式是在使用时才创建</li><li>饿汉式不存在线程安全问题, 懒汉式存在线程安全问题</li><li>饿汉式存在浪费资源的可能. 因为如果程序员一个对象都没有使用, 那么饿汉式创建的对象就浪费了, 懒汉式是使用时才创建, 就不存在这个问题.</li></ol><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>使用场景</p><ol><li>当不希望类被继承时</li><li>当不希望父类的某个方法被子类覆盖/重写</li><li>当不希望类的某个属性的值被修改(常量)</li><li>当不希望某个局部变量被修改(局部常量)</li></ol><h3 id="final细节"><a href="#final细节" class="headerlink" title="final细节"></a>final细节</h3><ol><li><p>final修饰的属性又叫常量, 一般用XX_XX_XX来命名</p></li><li><p>final修饰的属性在定义时, 必须赋初值, 并且以后不能再修改, 赋值可以在如下位置之一选择一个位置赋初值 :</p><ol><li><p>定义时 : <code>public final double TAX_RATE = 0.08;</code></p></li><li><p>在构造器中</p></li><li><p>在代码块中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AA</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    1.定义时:如 public final double TAX_RATE=0.08;    2.在构造器中    3.在代码块中    */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">double</span> TAX_RATE <span class="token operator">=</span> <span class="token number">0.08</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">double</span> TAX_RATE2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">double</span> TAX_RATE3<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        TAX_RATE2 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        TAX_RATE3 <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol></li><li><p>如果final修饰的属性是静态的, 则初始化的位置只能是 :</p><ol><li>定义时</li><li>静态代码块 (不能在构造器中赋值)</li></ol></li><li><p>final类不能继承, 但是可以实例化对象</p></li><li><p>如果类不是final类, 但是含有final方法, 则该方法虽然不能重写, 但是可以被继承</p></li><li><p>一般来说, 如果一个类已经是final类了, 就没有必要再将方法修饰成final方法</p></li><li><p>final不能修饰构造器</p></li><li><p>包装类, String都是final类</p></li><li><p>final 和 static 往往搭配使用, 效率更高, 不会导致类加载, 底层编译器做了优化处理</p><p><img src="https://img-blog.csdnimg.cn/4a880c11131d426d8234c9450c24aaf8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Something</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//final可以修饰形参</span>        <span class="token operator">++</span>x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,不能修改final x 的值</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以,没有改变x的值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>当父类的某些方法, 需要声明, 但是又不确定如何实现时, 可以将其声明为抽象方法, 那么这个类就是抽象类</p><p><strong>抽象类细节</strong></p><ol><li>抽象类不能被实例化</li><li>抽象类不一定要包含abstract方法. 也就是说, 抽象类可以没有abstract方法</li><li>一旦类包含了abstract方法, 则这个类必须声明为abstract</li><li>abstract只能修饰类和方法, 不能修饰属性和其他的</li><li>抽象类可以有任意成员(<strong>因为抽象类还是类</strong>), 比如 : 非抽象方法, 构造器, 静态属性等等</li><li>抽象方法不能有主体, 即不能实现</li><li>如果一个类继承了抽象类, 则它必须实现抽象类的所有抽象方法, 除非它自己也声明为abstract类</li><li>抽象方法不能使用private, final, static来修饰, 因为这些关键字都是和重写相违背的</li></ol><h3 id="模板设计模式-抽象类最佳实践"><a href="#模板设计模式-抽象类最佳实践" class="headerlink" title="模板设计模式-抽象类最佳实践"></a>模板设计模式-抽象类最佳实践</h3><p>抽象类体现的就是一种模板模式的设计, 抽象类作为多个子类的通用模板, 子类在抽象类的基础上进行扩展, 但子类总体上会保留抽象类的行为方式</p><ol><li>当功能内部一部分实现是确定的, 一部分实现是不确定的. 这时可以把不确定的部分暴露出去, 让子类去实现</li><li>编写一个抽象父类, 父类提供了多个子类的通用方法, 并把一个或多个方法留给其子类实现, 就是一种模板模式</li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><img src="https://img-blog.csdnimg.cn/74bae1f267994b6f95b010a268782f7a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="接口细节"><a href="#接口细节" class="headerlink" title="接口细节"></a>接口细节</h3><ol><li><p>接口不能实例化</p></li><li><p>接口中所有的方法是public方法, 接口中的抽象方法, 可以不用abstract修饰</p></li><li><p>一个普通类实现接口, 就必须将该接口的所有方法都实现</p></li><li><p>抽象类实现接口, 可以不用实现接口的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不会报错</span><span class="token punctuation">}</span></code></pre></li><li><p>一个类同时可以实现多个接口</p></li><li><p>接口中的属性, 只能是final的, 而且是 public static final 修饰符</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价 public static final int n1 = 10;</span><span class="token punctuation">}</span></code></pre></li><li><p>接口中属性的访问形式 : 接口名.属性名</p></li><li><p>接口不能继承其他类, 但是可以继承多个别的接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">,</span>C<span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li><li><p>接口的修饰符只能是public 和默认, 这点和类的修饰符是一样的</p></li></ol><h3 id="接口与继承的区别"><a href="#接口与继承的区别" class="headerlink" title="接口与继承的区别"></a>接口与继承的区别</h3><p>接口实现机制是对单继承机制的补充.</p><ol><li>当子类继承了父类, 就自动的拥有父类的功能</li><li>如果子类需要扩展功能, 可以通过实现接口的方式扩展</li></ol><p>接口和继承解决的问题不同</p><ol><li>继承的价值主要在于 : 解决代码的复用性和可维护性</li><li>接口的价值主要在于 : 设计, 设计好各种规范(方法),  让其他类去实现这些方法</li></ol><p>接口比继承更加灵活</p><ol><li>继承是满足 is - a 的关系, 而接口只需满足 like - a 的关系</li></ol><h3 id="接口多态特性"><a href="#接口多态特性" class="headerlink" title="接口多态特性"></a>接口多态特性</h3><ol><li><h5 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h5><p><img src="https://img-blog.csdnimg.cn/b054fa0d0bb24fa8ae76a5a63cf69b92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><h5 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span>Usb<span class="token punctuation">[</span><span class="token punctuation">]</span> usbs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Usb</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>usbs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>usbs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Camera_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*给Usb数组中, 存放Phone 和 Camera 对象, Phone类还有一个特有的方法call(),请遍历Usb数组, 如果是Phone对象, 除了调用Usb 接口定义的方法外, 还需要调用Phone特有方法Call()*/</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> usbs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态绑定..</span>    <span class="token comment" spellcheck="true">//进行类型判断, 然后进行类型的向下转型</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Phone_</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>Phone_<span class="token punctuation">)</span>usbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//接口</span><span class="token keyword">interface</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone_</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机可以打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机工作中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Camera_</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相机工作中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><h5 id="接口的多态传递现象"><a href="#接口的多态传递现象" class="headerlink" title="接口的多态传递现象"></a>接口的多态传递现象</h5><p><img src="https://img-blog.csdnimg.cn/92027b5d5cdd4126be9060f752336045.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p><strong>类的五大成员: 属性, 方法, 构造器, 代码块, 内部类</strong></p><p><img src="https://img-blog.csdnimg.cn/bf103c84540c4015b0a08d8708422064.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_13,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>内部类的分类</strong></p><p>定义在外部类局部位置上 (比如方法内)</p><ol><li>局部内部类 (有类名)</li><li>匿名内部类 (没有类名)</li></ol><p>定义在外部类的成员位置(属性或者方法)上</p><ol><li>成员内部类 (没用static修饰)</li><li>静态内部类 (使用static修饰)</li></ol><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外部类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//方法</span>        <span class="token comment" spellcheck="true">//1.局部内部类是定义在外部类的局部位置, 通常在方法</span>        <span class="token comment" spellcheck="true">//3.不能添加访问修饰符, 因为它的地位就是一个局部变量. 局部变量不能使用修饰符, 但是可以使用final修饰, 因为局部变量也可以使用final</span>        <span class="token comment" spellcheck="true">//4.作用域 : 仅仅在定义他的方法或代码块中</span>        <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//局部内部类</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员重名</span>            <span class="token comment" spellcheck="true">//2.可以直接访问外部类的所有成员, 包含私有的</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//解读: Outer01.this 本质就是外部类的对象, 即哪个对象调用了m1, Outer01.this就是哪个对象</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部类的n1="</span> <span class="token operator">+</span> Outer01<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5.外部类在方法中, 可以创建内部类的对象,然后调用方法(注意: 必须在作用域内)</span>        <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token function">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//6.外部其他类, 不能访问局部内部类</span><span class="token comment" spellcheck="true">//7.如果外部类和局部内部类的成员重名时, 默认遵循就近原则, 如果想访问外部类的成员, 则可以使用(外部类名.this.成员)去访问</span></code></pre><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类是定义在外部类的局部位置, 比如方法中, 并且没有类名</p><ol><li>本质是类</li><li>是一个内部类</li><li>该类没有名字</li><li>同时还是一个对象</li></ol><p>//基于接口的匿名内部类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//需求: 想使用IA接口, 并创建对象</span><span class="token comment" spellcheck="true">//传统方式: 是写一个类(Dog类), 实现该接口, 并创建对象</span><span class="token comment" spellcheck="true">//但是如果我们 Dog只是使用一次, 后面不再使用</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//使用匿名内部类</span><span class="token comment" spellcheck="true">//此时 Dog的编译类型是 IA, 运行类型是匿名内部类</span>IA Dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗狗叫唤..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意分号</span></code></pre><p>//基于类的匿名内部类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//father 编译类型 Father, 运行类型是匿名内部类</span><span class="token comment" spellcheck="true">//注意("jack")参数列表会传递给 构造器</span>Father father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fatehr</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类重写了test方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>father<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果此时father是一个抽象类</span><span class="token comment" spellcheck="true">//那么必须要是实现抽象类中的抽象方法</span></code></pre><h3 id="匿名内部类的细节"><a href="#匿名内部类的细节" class="headerlink" title="匿名内部类的细节"></a>匿名内部类的细节</h3><ol><li><p>两种调用方法, 匿名内部类既是一个类的定义, 同时它本身也是一个对象</p><p><img src="https://img-blog.csdnimg.cn/e24e58a0c759419fb520697ce18431a5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>可以直接访问外部类的所有成员, 包含私有的</p></li><li><p>不能添加访问修饰符, 因为它的地位就是一个局部变量</p></li><li><p>作用域 : 仅仅在定义它的方法或代码块中</p></li><li><p><strong>外部其他类不能访问匿名内部类</strong></p></li><li><p>如果外部类和匿名内部类的成员重名时,  默认遵循就近原则,  如果想访问外部类的成员,  则可以使用(外部类名.this.成员)去访问</p></li></ol><h3 id="匿名内部类实践-当作实参直接传递"><a href="#匿名内部类实践-当作实参直接传递" class="headerlink" title="匿名内部类实践-当作实参直接传递"></a>匿名内部类实践-当作实参直接传递</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main中</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span>IL il<span class="token punctuation">)</span><span class="token punctuation">{</span>    il<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//当作实参直接传递  </span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IL</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外部类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//成员内部类, 是定义在外部内的成员位置上</span>    <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//成员内部类</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可以直接访问外部类的所有成员, 包含私有的</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1 ="</span> <span class="token operator">+</span> n1 <span class="token operator">+</span> <span class="token string">"name ="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//写方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用成员内部类</span>        Inner01 inner01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner01<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.可以添加任意访问修饰符(public, protected, 默认, private) 因为它的地位就是一个成员</span><span class="token comment" spellcheck="true">//2.成员内部类 - 访问 - 外部类成员</span><span class="token comment" spellcheck="true">//    访问方式 : 直接访问</span><span class="token comment" spellcheck="true">//3.外部类 - 访问 - 成员内部类</span><span class="token comment" spellcheck="true">//  访问方式 : 创建对象,再访问</span><span class="token comment" spellcheck="true">//4.如果外部类和内部类的成员重名时, 默认遵循就近原则, 如果想访问外部类的成员, 则可以使用(外部类名.this.成员)去访问</span></code></pre><p><strong>外部其他类 - 访问 - 成员内部类  //看别人博客</strong></p><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>使用static修饰, 定义在外部类的成员位置</p><ol><li><p>可以直接访问外部类的所有静态成员, 包含私有的, 但不能直接访问非静态成员</p></li><li><p>可以添加任意访问修饰符 (public, protected, 默认, private), 因为它的地位就是一个成员</p></li><li><p>静态内部类 - 访问 - 外部类</p><p>访问方式 : 直接访问所有静态成员</p></li><li><p>外部类 - 访问 - 静态内部类 </p><p>访问方式 : 创建对象, 再访问</p></li><li><h5 id="外部其他类-访问-静态内部类-看别人博客"><a href="#外部其他类-访问-静态内部类-看别人博客" class="headerlink" title="外部其他类 -  访问 - 静态内部类 // 看别人博客"></a>外部其他类 -  访问 - 静态内部类 // 看别人博客</h5></li><li><p>如果外部类和静态内部类的成员重名时,   默认遵循就近原则,   如果想访问外部类的成员,   则可以使用(外部类名.成员)去访问</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象中级</title>
      <link href="/2020/02/17/mian-xiang-dui-xiang-zhong-ji/"/>
      <url>/2020/02/17/mian-xiang-dui-xiang-zhong-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象-中级"><a href="#面向对象-中级" class="headerlink" title="面向对象(中级)"></a>面向对象(中级)</h2><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><table><thead><tr><th align="center">作用域</th><th align="center">当前类</th><th align="center">同一包</th><th align="center">其他包的子孙类</th><th align="center">其他包的类</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">friendly</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><p><strong>访问修饰符细节</strong></p><p>只有默认的(没有修饰符)和public才能修饰类</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ol><li><p>将属性进行私有化private</p></li><li><p>提供一个公共的(public)set的方法, 用于对属性判断并赋值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setXxx</span><span class="token punctuation">(</span>类型 参数名<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Xxx表示某个属性</span>    <span class="token comment" spellcheck="true">//加入数据验证的业务逻辑</span>    属性 <span class="token operator">=</span> 参数名<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>提供一个公共的(public)get的方法, 用于获取属性的值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> 数据类型 <span class="token function">getXxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//权限判断, Xxx某个属性</span>    <span class="token keyword">return</span> xx<span class="token punctuation">}</span></code></pre></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><img src="https://img-blog.csdnimg.cn/6700f4add1374946b28884f99c05fe48.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="继承细节"><a href="#继承细节" class="headerlink" title="继承细节"></a>继承细节</h3><ol><li><p>子类继承了所有的属性和方法, 但是<strong>私有属性和方法不能在子类直接访问</strong>, 要通过父类提供公共的方法去访问</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//父类Base</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> n1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过父类提供一个public的方法, 返回了n2</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getN2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> n2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//通过父类提供的public的方法来调用test200()</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callTest200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//子类Sub</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//要通过父类提供公共的方法去访问n2</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n4="</span> <span class="token operator">+</span> <span class="token function">getN2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callTest200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>子类必须调用父类的构造器</strong>, 完成父类的初始化</p></li><li><p>当创建子类对象时, 不管使用子类的哪个构造器, 默认情况下总会去调用父类的无参构造器, 如果父类没有提供无参构造器, 则必须在子类的构造器中用super去指定使用父类的哪个构造器完成对父类的初始化工作</p></li><li><p>如果希望指定去调用父类的某个构造器, 则显式的调用一下 : <code>super(参数列表)</code></p><p>1.调用父类的无参构造器, 如下 或者 什么都不写, <strong>默认就是调用<code>super()</code></strong></p><p><code>super();</code>//父类的无参构造器</p><p>2.调用父类的 <code>Base(Sting name)</code>构造器</p><p><code>super("jack");</code></p></li><li><p>super在使用时, 必须放在构造器的第一行(super只能在构造器中使用)</p></li><li><p><code>super()</code>和<code>this()</code>都只能放在构造器的第一行,因此这两个方法不能共存在一个构造器中</p></li><li><p>父类构造器的调用不限于直接父类! 将一直往上追溯直到Object类</p></li></ol><h3 id="继承的本质"><a href="#继承的本质" class="headerlink" title="继承的本质"></a>继承的本质</h3><p>创建子类的过程中    <code>Son son = new Son();</code></p><p>是先加载类,  <code>1.Object  - 2.GrandPa - 3.Father - 4.Son</code></p><p><img src="https://img-blog.csdnimg.cn/7e2cc51f5a484dffac5b326f6849a651.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>注意此时name与父类和爷爷类的属性名字相同, 出现这种情况下时,按以下规则 :</p><p><img src="https://img-blog.csdnimg.cn/d73b7db3004e4a9ab361ff13ffc337d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>如果父类属性为私有属性, 那么还是需要通过公共的方法去访问</p><p><img src="https://img-blog.csdnimg.cn/db4dfdc47f9b4f12bd8a75ae90a54228.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>如果此时父类的age属性是私有的, 而爷爷类的age属性是public的话, 可以直接用 <code>son.age</code>来访问吗?</p><p>答案是<strong>不可以</strong>!!!    它是一层一层往上找的, 如果在父类遇到私有的age属性, 就会直接报错, 无法绕过父类去访问爷爷类的age属性(可以通过爷爷类的public方法访问)</p><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>super代表父类的引用, 用于访问父类的属性, 方法, 构造器</p><ol><li><p>访问父类的属性, 但不能访问父类的private属性</p><p><code>super.属性名</code></p></li><li><p>访问父类的方法, 不能访问父类的private方法</p><p><code>super.方法名</code></p></li><li><p>访问父类的构造器</p><p><code>super(参数列表)</code></p></li></ol><h3 id="super细节"><a href="#super细节" class="headerlink" title="super细节"></a>super细节</h3><ol><li><p>当子类中有和父类中的成员(属性和方法)重名时, 为了访问父类的成员, 必须通过super. 如果没有重名, 使用super, this, 直接访问是一样的效果</p><p><img src="https://img-blog.csdnimg.cn/38ead28502f74f99b7bacbdfb2e4903c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/d293677a9d814a258576acb7588f5419.png" alt="img"></p></li><li><p>super的访问不限于直接父类, 如果爷爷类和本类中有同名的成员, 也可以使用super去访问爷爷类的成员, 如果多个基类中都有同名的成员, 使用super访问遵循就近原则</p></li><li><p>调用父类构造器的好处 :父类的属性由父类初始化, 子类的属性由子类初始化</p></li></ol><p><strong>super和this的比较</strong></p><p><img src="https://img-blog.csdnimg.cn/2bae6f49712d444494fadb83cb49c08a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>方法重写也叫方法覆盖</p><p><img src="https://img-blog.csdnimg.cn/c5749e8c90694a76adfb2a4fbb67198f.png" alt="img"></p><h3 id="方法重写细节"><a href="#方法重写细节" class="headerlink" title="方法重写细节"></a>方法重写细节</h3><ol><li>子类的方法的<strong>形参列表</strong>, <strong>方法名称</strong>, 要和父类方法的<strong>形参列表</strong>, <strong>方法名称</strong>完全一样</li><li>子类的返回类型和父类方法返回类型一样, 或者是父类返回类型的子类   比如 : 父类 返回类型是 Object, 子类方法返回类型是 String</li><li>子类方法不能缩小父类方法的访问权限</li></ol><p>重写与重载的区别</p><p><img src="https://img-blog.csdnimg.cn/bfcb9378b98a41cf99924e6d5f8151e8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li><p>方法重载和方法的重写体现多态</p></li><li><p>对象的多态</p><ol><li><p>一句话的编译类型和运行类型可以不一致</p><pre class=" language-java"><code class="language-java">Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译类型(名义上)是Animal,运行类型(实际上)是Dog</span></code></pre></li><li><p>编译类型在定义对象时, 就确定了, 不能改变</p></li><li><p>运行类型是可以变化的</p></li><li><p>编译类型看定义时 =号 的左边, 运行类型看 =号 的右边</p></li></ol></li></ol><h3 id="多态的细节"><a href="#多态的细节" class="headerlink" title="多态的细节"></a>多态的细节</h3><ol><li><p>向上转型</p><p>多态的前提是 : 两个对象(类)存在继承关系</p><p>多态的向上转型</p><ol><li><p>本质: 父类的引用指向了子类的对象</p></li><li><p>语法: 父类类型 引用名 = new 子类类型();</p></li><li><p>特点: 编译类型看左边, 运行类型看右边.</p><p>可以调用父类中的所有成员(需遵守访问权限)</p><p>不能调用子类中特有成员</p><p>最终运行效果看子类的具体实现</p><p>(<strong>编译类型是编译器javac执行的, 运行类型是java执行的</strong>)</p></li></ol><p><img src="https://img-blog.csdnimg.cn/c8b22ff263214e1292b39104b164ed0a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p>向下转型</p><ol><li><p>语法: 子类类型 引用名 = (子类类型) 父类引用</p></li><li><p>只能强转父类的引用, 不能强转父类的对象</p></li><li><p>要求父类的引用必须指向的是当前目标类型的对象</p></li><li><p>当向下转型后, 可以调用子类类型中所有 的成员</p><p><img src="https://img-blog.csdnimg.cn/80dc64531fb94e63b178b4bb3b5a28e1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ol></li></ol><h3 id="属性重写问题"><a href="#属性重写问题" class="headerlink" title="属性重写问题"></a>属性重写问题</h3><ol><li>属性没有重写之说!!! 属性的值看<strong>编译类型</strong></li><li><code>instanceOf</code>比较操作符, 用于判断对象的<strong>运行类型</strong>是否为XX类型或者XX类型的子类型</li></ol><h3 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h3><ol><li>当<strong>调用对象方法</strong>的时候, 该方法会和该对象的内存地址/<strong>运行类型绑定</strong></li><li>当<strong>调用对象属性</strong>时, 没有动态绑定机制, 哪里声明, 哪里使用</li></ol><h3 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h3><p>//创建一个Person类, Student和Teacher继承于它</p><p>//2个Student 对象和2个Teacher 对象, 统一放在数组中, 并调用每个say方法</p><p><img src="https://img-blog.csdnimg.cn/58606885ca38402487315f7710090902.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>//如何调用子类特有的方法, 比如Teacher有一个teach, Student有一个study , 怎么调用</p><p><img src="https://img-blog.csdnimg.cn/056a97c6bca74ac88a7cd59779d69b28.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h3><p>方法定义的形参类型为父类类型, 实参类型允许为子类类型</p><h3 id="Object类详解"><a href="#Object类详解" class="headerlink" title="Object类详解"></a>Object类详解</h3><h5 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h5><p>== 与 equals的对比</p><ol><li>== 是一个比较运算符, 既可以判断基本类型, 又可以判断引用类型</li><li>如果判断基本类型, 判断的是值是否相等</li><li>如果判断引用类型, 判断的是地址是否相等, 即判定是不是同一个对象</li></ol><p>equals方法 : 是Object类中的方法, 只能判断引用类型</p><p>默认判断的是地址是否相等, 子类中往往重写该方法, 用于判断内容是否相等. 比如 Integer, String…</p><h5 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h5><pre class=" language-java"><code class="language-java">AA aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AA aa2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AA aa3 <span class="token operator">=</span> aa<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa.hashCode = "</span> <span class="token operator">+</span> aa<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa2.hashCode = "</span> <span class="token operator">+</span> aa2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa3.hashCode = "</span> <span class="token operator">+</span> aa3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>提高具有哈希结构的容器的效率</li><li>两个引用, 如果指向的是同一个对象, 则哈希值肯定是一样的</li><li>两个引用, 如果指向的是不同对象, 则哈希值是不一样的</li><li>哈希值主要根据地址号来的,  但是不能完全将哈希值等价于地址</li></ol><h5 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h5><ol><li>默认返回 : 全类名 + @ + 哈希值的十六进制</li><li>子类往往重写toString方法, 用于返回对象的属性信息</li><li>重写toString方法, 打印对象或拼接对象, 都会自动调用该对象的toString形式(快捷键)</li><li>当直接输出一个对象时, toString方法会被默认的调用</li></ol><h5 id="Finalize方法"><a href="#Finalize方法" class="headerlink" title="Finalize方法"></a>Finalize方法</h5><ol><li>当对象被回收时, 系统自动调用该对象的finalize方法. 子类可以重写该方法, 做一些释放资源的操作</li><li>什么时候被回收 : 当某个对象没有任何引用时, 则jvm就认为这个对象是一个垃圾对象, 就会使用垃圾回收机制来销毁该对象, 在销毁该对象前, 会先调用finalize方法</li><li>垃圾回收机制的调用, 是由系统来决定, 也可以通过<code>System.gc()</code>来主动触发垃圾回收机制</li></ol><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>在断点调试过程中, 是运行状态, 是以对象的运行类型来执行的.</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象初级</title>
      <link href="/2020/01/20/mian-xiang-dui-xiang-si-xiang/"/>
      <url>/2020/01/20/mian-xiang-dui-xiang-si-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="对象在内存中的存在形式"><a href="#对象在内存中的存在形式" class="headerlink" title="对象在内存中的存在形式"></a>对象在内存中的存在形式</h3><p>对象也是一个引用数据类型.</p><p><img src="https://img-blog.csdnimg.cn/47cbef86fd4446b0ae1ddcf16721d22f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="对象创建的流程分析"><a href="#对象创建的流程分析" class="headerlink" title="对象创建的流程分析"></a>对象创建的流程分析</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//main中</span>Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>在方法区中加载Person类信息(Person.class), 只会加载一次</li><li>在堆中分配空间(地址)</li><li>完成对象的初始化[3.1 默认初始化 age = 0 name = null  3.2 显式初始化 age = 90 name = null  3.3 构造器的初始化 age = 20 name = jack(字符串,堆中的对象的name地址指向在常量池中jack)]</li><li>对象在堆中的地址, 返回给p(p是对象名, 也可以理解成是对象的引用)</li></ol><h3 id="对象分配机制"><a href="#对象分配机制" class="headerlink" title="对象分配机制"></a>对象分配机制</h3><pre class=" language-java"><code class="language-java">Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>Person p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把p1赋给了p2 , 让p2指向p1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p2,age是什么?</span></code></pre><p><img src="https://img-blog.csdnimg.cn/0b6566b84499482f85e0f2918b12f2c2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//公有类</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Test类的成员方法</span>        count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个count就是属性 改成10</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count1="</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Test类的成员方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count2="</span> <span class="token operator">+</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这是Test类的main方法, 任何一个类,都可以有main</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. new Test() 是匿名对象, 匿名对象使用后, 就不能再使用(一次性)</span>        <span class="token comment" spellcheck="true">//2. new Test().count1() 创建好匿名对象后, 就调用count1()</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Java内存的结构分析"><a href="#Java内存的结构分析" class="headerlink" title="Java内存的结构分析:"></a>Java内存的结构分析:</h3><ol><li>栈: 一般存放基本数据类型(局部类型)</li><li>堆: 存放对象</li><li>方法区: 常量池(常量, 比如字符串), 类加载信息</li></ol><p><img src="https://img-blog.csdnimg.cn/b8de488856e447fdbad03ed281b2f2d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="属性-成员变量-字段-细节"><a href="#属性-成员变量-字段-细节" class="headerlink" title="属性(成员变量\字段)细节"></a>属性(成员变量\字段)细节</h3><ol><li>属性的定义语法变量, 示例 : 访问修饰符 属性类型 属性名;</li><li>属性的定义类型可以为任意类型, 可以是基本类型或引用类型.</li><li>属性如果不赋值, 有默认值. 和数组一样.  String null / int 0 / short 0 / byte 0 / long 0 / float 0.0 double 0.0 / char \u0000 / boolean false</li></ol><h3 id="方法调用机制"><a href="#方法调用机制" class="headerlink" title="方法调用机制"></a>方法调用机制</h3><p>当返回后, <code>getSum</code>栈就被释放(销毁)了</p><p><img src="https://img-blog.csdnimg.cn/a56f21648e8a43f788f22769c046b846.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_17,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>小结</strong></p><ol><li>当程序执行到方法时, 就会开辟一个独立的空间(栈空间)</li><li>当方法执行完毕, 或者执行到return语句时, 就会返回</li><li>返回到调用方法的地方</li><li>返回后, 继续执行方法后面的代码</li><li>当main方法(栈)执行完毕, 整个程序退出</li><li><strong>基本数据类型, 传递的是值(值拷贝), 形参的任何改变不影响实参</strong>(方法传参机制)</li><li><strong>引用数据类型, 传递的是地址(传递也是值, 但是值是地址), 形参的改变会影响到实参</strong>(方法传参机制)</li></ol><h3 id="方法使用细节"><a href="#方法使用细节" class="headerlink" title="方法使用细节"></a>方法使用细节</h3><ol><li><p>一个方法<strong>最多有一个</strong>返回值, [ 如果要返回多个结果 , 返回数组 ]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span><span class="token keyword">int</span> n2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    resArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>    resArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">;</span>    <span class="token keyword">return</span> resArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>返回类型可以是任意类型, 包括基本类型或引用类型</p></li><li><p>如果方法要求有<strong>返回数据类型</strong>, 则方法体中最后的执行语句必须为 return 值, 而且要求返回值类型必须和 return 值类型一致或兼容(自动转换)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                               <span class="token comment" spellcheck="true">//错误,缺少返回语句</span><span class="token punctuation">}</span></code></pre></li><li><p>如果方法是void, 则方法体中可以没有return语句, 或者 只写return(不能有返回值)</p></li><li><p>同一个类中的方法, 直接调用</p></li><li><p>跨类中方法A类调用B类方法, 需要通过对象名调用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类中的 m1()被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建对象</span>        b<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类中的 m1()继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类中的 hi()被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="形参列表的细节"><a href="#形参列表的细节" class="headerlink" title="形参列表的细节"></a>形参列表的细节</h3><ol><li>一个方法可以有0个参数, 也可以有多个参数, 中间用逗号隔开</li><li>参数类型可以是任意类型, 包括基本类型或引用类型</li><li>调用带参数的方法时, 一定对应着参数列表相同类型或者兼容类型(低精度向高精度) 的参数</li><li>方法定义时的参数称为形式参数, 方法调用时的传入参数称为实际参数</li><li>实参和形参的类型要一致或者兼容, 个数, 顺序必须一致</li></ol><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>java允许方法名相同, 但是要求<strong>形参列表不同</strong></p><p>返回类型没有要求</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>java允许将同一个类中<strong>多个同名同功能</strong>但参数个数不同的方法, 封装成一个方法, 通过可变参数实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HspMethod</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//计算2个数的和, 3个数的和, 4.....</span>    <span class="token comment" spellcheck="true">//可以使用方法的重载(但是繁琐)</span>        <span class="token comment" spellcheck="true">//使用可变参数封装成方法</span>    <span class="token comment" spellcheck="true">//1.   int...表示接收的是可变参数, 类型是int, 即可以接收多个int(0 - 多)</span>    <span class="token comment" spellcheck="true">//2. 使用可变参数时, 可以当作数组来使用 即nums可以当作数组</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收的参数的个数:"</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//遍历求和</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="可变参数的细节"><a href="#可变参数的细节" class="headerlink" title="可变参数的细节"></a>可变参数的细节</h6><ol><li><p>可变参数的实参可以是数组</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>T t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ti<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度="</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>可变参数的本质是数组</p></li><li><p>可变参数可以和普通类型的参数一起放在形参列表, 但必须保证可变参数放在最后</p></li><li><p>一个形参列表只能出现一个可变参数</p></li></ol><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>局部变量与全局变量(属性变量)</p><p>全局变量可以不赋值, 直接使用, 因为有默认值, 局部变量必须赋值后才能使用, 因为没有默认值</p><h6 id="作用域细节"><a href="#作用域细节" class="headerlink" title="作用域细节"></a>作用域细节</h6><ol><li><p>属性和局部变量可以重名, 访问时遵循就近原则</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//就近原则</span>        String name <span class="token operator">=</span> <span class="token string">"king"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出的是king</span></code></pre></li><li><p>属性生命周期较长, 伴随着对象的创建而创建,伴随着对象的销毁而销毁. 局部变量,生命周期较短, 伴随着它的代码块的执行而创建, 伴随着代码块的结束而销毁. 即在一次方法调用过程中.</p></li><li><p>作用域范围不一样</p><p>全局变量 : 被本类使用或者其他类使用(需要通过对象的调用)</p><p>局部变量 : 只能被本类中对应的方法中使用</p></li><li><p>修饰符的不同</p><p>全局变量 : 可以加修饰符</p><p>局部变量 : 不能加修饰符</p></li></ol><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 方法名<span class="token punctuation">(</span>和类名保持一致<span class="token punctuation">)</span> <span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    方法体<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//构造器没有返回值</span><span class="token comment" spellcheck="true">//主要作用是初始化</span></code></pre><h6 id="构造器细节"><a href="#构造器细节" class="headerlink" title="构造器细节"></a>构造器细节</h6><ol><li><p>一个类可以定义多个构造器, 即构造器的重载</p></li><li><p>如果程序员没有定义构造器, 系统会自动给类生成一个默认无参构造器(也叫默认构造器), 比如 <code>Dog(){}</code></p></li><li><p>一旦定义了自己的构造器, 默认的构造器就覆盖了, 就不能再使用默认的无参构造器, 除非显式的定义一下, 即<code>Dog(){}</code></p><pre class=" language-java"><code class="language-java">Dog dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用的是默认的无参构造器</span></code></pre></li></ol><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//this.name 就是当前对象的属性name</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//this.age 就是当前对象的属性age</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="深入理解this"><a href="#深入理解this" class="headerlink" title="深入理解this"></a>深入理解this</h6><p><img src="https://img-blog.csdnimg.cn/7f8ed585f0384da88a736e8c191a247a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>虚拟机会给每个对象分配this, 代表当前对象</p><p>哪个对象调用, this就代表哪个对象</p><h3 id="this细节"><a href="#this细节" class="headerlink" title="this细节"></a>this细节</h3><ol><li><p>this关键字可以用来访问本类的属性, 方法, 构造器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//传统方式(按照的是就近原则访问属性,但是如果在方法中有局部变量,那么这个name就是局部变量,不是属性)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"num="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//也可以使用this访问属性(准确定位到属性)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"num="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>this用于区分当前类的属性和局部变量</p></li><li><p>访问成员方法的语法 : this.方法名(参数列表)</p></li><li><p>访问构造器语法 : this(参数列表)    <strong>只能在构造器中使用(即只能在构造器中访问本类另外一个构造器)</strong>   如果有访问构造器语法 : this(参数列表); <em><strong>必须放在第一条语句</strong></em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里去访问 T(String name, int age) 构造器</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"T() 构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">T</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"T(String name, int age) 构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>this不能在类定义的外部使用, 只能在类定义的方法中使用</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2020/01/15/shu-zu/"/>
      <url>/2020/01/15/shu-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="数组-排序"><a href="#数组-排序" class="headerlink" title="数组\排序"></a>数组\排序</h2><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>数据类型[] 数组名 = {元素值, 元素值, …}</p><p><code>int[] a = {1,2,3,4...};</code> </p><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>数据类型[] 数组名 = new 数据类型[大小]</p><p><code>int[] a = new int[3];</code></p><hr><p><code>double[] a;</code>先声明数组</p><p><code>a = new double[5];</code>再分配内存空间</p><h3 id="数组细节"><a href="#数组细节" class="headerlink" title="数组细节"></a>数组细节</h3><ol><li><p>数组是多个相同类型数据的组合, 实现对这些数据的统一管理.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//double -> int 错误  需要满足自动转换</span></code></pre></li><li><p>数组中的元素可以是任何数据类型, 包括基本类型和引用类型, 但是不能混用</p></li><li><p>数组创建后, 如果没有赋值, 有默认的值. String null / int 0 / short 0 / byte 0 / long 0 / float 0.0 double 0.0 / char \u0000 / boolean false</p></li><li><p>数组的下标是从0开始的.</p></li><li><p>注意越界</p></li><li><p>数组属于引用类型, 数组型数据是对象</p></li></ol><h3 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h3><ol><li><p>基本数据类型赋值, 赋值方式为值拷贝(值传递), 不会相互影响.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//n2的变化, 不会影响到n1的值</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> n1<span class="token punctuation">;</span>n2 <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出n1的值为 10</span></code></pre></li><li><p>数组在默认情况下是引用传递, 赋的值是地址, 赋值方式为引用赋值(地址拷贝)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//是一个地址, arr2变化会影响到arr1</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出arr1的值为 10, 2, 3</span></code></pre></li></ol><h3 id="值传递-值拷贝-和-引用传递-地址拷贝-的区别"><a href="#值传递-值拷贝-和-引用传递-地址拷贝-的区别" class="headerlink" title="值传递(值拷贝) 和 引用传递(地址拷贝)的区别"></a><strong><u>值传递(值拷贝) 和 引用传递(地址拷贝)的区别</u></strong></h3><p><img src="https://img-blog.csdnimg.cn/50310e663fa54f9c865451b2d132cdaf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>在内存里面只要分配了一个数据空间, 一定会对应一个地址.</p><p><img src="https://img-blog.csdnimg.cn/65cec621a9144fcca7e184b8b854ddc5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>⬇</p><p><img src="https://img-blog.csdnimg.cn/40586b7e294f41ae8ec65f51d7b431d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="数组拷贝-内容复制"><a href="#数组拷贝-内容复制" class="headerlink" title="数组拷贝(内容复制)"></a>数组拷贝(内容复制)</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将 int[] arr1 = {10,20,30}; 拷贝到 arr2数组, 要求数据空间是独立的.</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个新的数组arr2, 开辟新的空间, 大小和arr1一样</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历 arr1 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式一:</span><span class="token comment" spellcheck="true">//1.把arr[0] 和 arr[5] 进行交换</span><span class="token comment" spellcheck="true">//2.把arr[1] 和 arr[4] 进行交换</span><span class="token comment" spellcheck="true">//3.把arr[2] 和 arr[3] 进行交换</span><span class="token comment" spellcheck="true">//4.一共要交换 3 次 = arr.length / 2</span><span class="token comment" spellcheck="true">//5.每次交换时, 对应的下标是arr[i] 和 arr[arr.length - 1 - i]</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式二</span><span class="token comment" spellcheck="true">//逆序赋值法</span><span class="token comment" spellcheck="true">//1.创建一个新的数组 arr2</span><span class="token comment" spellcheck="true">//2.逆序遍历arr, 将每个元素拷贝到 arr2的元素中</span><span class="token comment" spellcheck="true">//3.将arr 指向 arr2</span><span class="token comment" spellcheck="true">//注意 : 让 arr 指向 arr2数据空间, 此时 arr原来的数据空间就没有变量引用, 会被当成垃圾, 销毁</span></code></pre><h3 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h3><p>数组不能扩容, 必须新定义一个新的数组, 把原先的数组内容遍历给新的数组中, 再赋新的元素.</p><h3 id="冒泡排序-从小到大"><a href="#冒泡排序-从小到大" class="headerlink" title="冒泡排序(从小到大)"></a>冒泡排序(从小到大)</h3><ol><li>每一轮排序可以确定一个数的位置, 比如第一轮排序确定最大数, 第二轮排序确定第二大的数的位置, 以此类推</li><li>当进行比较时, 如果前面的数大于后面的数, 就交换</li><li>每轮比较在减少 例如: 4-&gt;3-&gt;2-&gt;1</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于辅助交换的变量</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==第一轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n==第二轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n==第三轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n==第四轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>合并代码<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//外层循环是4次</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//4次比较-3次-2次-1次</span>    <span class="token comment" spellcheck="true">//如果前面的数大于后面的数, 就交换</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"轮=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p><code>int[] [] arr = {{0,0,0},{1,1,1},{2,2,2}};</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二维数组的每个元素是一维数组,所以要得到每个一维数组的值,还需要再次遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遍历二维数组的每个元素</span>    <span class="token comment" spellcheck="true">//1.arr[i] 表示 二维数组的i+1个元素  比如arr[0] : 二维数组的第一个元素</span>    <span class="token comment" spellcheck="true">//2.arr[i].length 得到对应的每个一维数组的长度</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>int[] [] arr = new int [2][3]</code>      二维数组内存形式 :</p><p><img src="https://img-blog.csdnimg.cn/53d52bacc1534fc89f01570fe32ab5a9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_19,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="动态初始化-列数不确定"><a href="#动态初始化-列数不确定" class="headerlink" title="动态初始化-列数不确定"></a>动态初始化-列数不确定</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*i = 0: 1i = 1: 2 2i = 2: 3 3 3一个有三个一维数组, 每一个一维数组的元素是不一样的*/</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建二维数组,但是只是确定一维数组的个数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遍历arr每个一维数组</span>    <span class="token comment" spellcheck="true">//给每个一维数组开空间</span>    <span class="token comment" spellcheck="true">//如果没有给一维数组 new, 那么arr[i]就是null</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历一维数组, 并给一维数组的每个元素赋值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本数据类型与运算符</title>
      <link href="/2019/12/22/java-note-000/"/>
      <url>/2019/12/22/java-note-000/</url>
      
        <content type="html"><![CDATA[<h2 id="开发细节"><a href="#开发细节" class="headerlink" title="开发细节"></a>开发细节</h2><ol><li><p>一个源文件最多只能有一个public类,但其他类不受限制.</p></li><li><p>如果源文件包含一个public类,则文件名必须按该类名命名.</p></li><li><p>一个源文件中最多只能有一个public类.其他类的个数不限,也可以将main方法写在非public类中,然后指定运行非public类,这样入口方法就是非public的main方法.</p></li><li><p>文档注释：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//javadoc标签</span><span class="token comment" spellcheck="true">/**     * @author    * @version*/</span><span class="token comment" spellcheck="true">//命令行        </span><span class="token comment" spellcheck="true">//javadoc -d 文件夹名 -xx -yy Demo.java</span>javadoc <span class="token operator">-</span>d d<span class="token operator">:</span>\\temp <span class="token operator">-</span>author <span class="token operator">-</span>version Demo<span class="token punctuation">.</span>java</code></pre></li><li><p>代码规范：</p><ol><li>类、方法的注释，要以javadoc的方式来写。</li><li>非Java Doc的注释，往往是给代码的维护者看的，着重告诉读者为什么这样写，如何修改，注意什么问题等。</li><li>运用tab操作，实现缩进，默认整体向右边移动，用shift+tab整体向左移</li><li>运算符和 = 两边习惯性各加一个空格。</li><li>源文件使用utf-8编码。</li></ol></li></ol><p><img src="https://img-blog.csdnimg.cn/2086b3b4f96943cfb4f88817f8852d92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h2 id="DOS原理"><a href="#DOS原理" class="headerlink" title="DOS原理"></a>DOS原理</h2><p>Dos系统：</p><ol><li>接受指令</li><li>解析指令</li><li>执行指令</li></ol><p>相对路径：从当前目录开始定位，形成的一个路径</p><p>绝对路径：就是完整路径，从顶级目录例如D:\开始定位，形成的路径</p><p>常用dos命令：</p><ol><li><p>查看当前目录是有什么内容：dir</p><p><code>dir </code>       <code> dir d:\abc\test100</code></p></li><li><p>切换到其他盘下：cd</p><p><code>cd /D d:</code>切换到D盘</p></li><li><p>切换到当前盘的其他目录下（使用绝对路径和相对路径演示）</p><p><code>cd d:\abc2\test200</code>   <code>cd ..\..\abc2\test200</code></p></li><li><p>切换到上一级：<code>cd ..</code></p></li><li><p>切换到根目录：<code>cd\</code></p></li><li><p>查看指定的目录下所有的子级目录：<code>tree</code></p></li><li><p>清屏：<code>cls</code></p></li><li><p>退出：<code>exit</code></p></li><li><pre class=" language-java"><code class="language-java">md<span class="token punctuation">[</span>创建目录<span class="token punctuation">]</span>，rd<span class="token punctuation">[</span>删除目录<span class="token punctuation">]</span><span class="token punctuation">,</span>copy<span class="token punctuation">[</span>拷贝文件<span class="token punctuation">]</span><span class="token punctuation">,</span>del<span class="token punctuation">[</span>删除文件<span class="token punctuation">]</span><span class="token punctuation">,</span>echo<span class="token punctuation">[</span>输入内容到文件<span class="token punctuation">]</span><span class="token punctuation">,</span>move<span class="token punctuation">[</span>剪切<span class="token punctuation">]</span></code></pre></li></ol><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li>变量必须先声明，后使用，即有顺序。</li><li>该区区域的数据/值可以在同一类型范围内不断变化。</li><li>变量在同一个区域内不能重名。</li><li>变量三要素：变量名，值，数据类型。</li></ol><p><strong>＋号的使用</strong></p><ol><li>当左右两边都是数值型，则做加法运算。</li><li>当左右两边有一方为字符型，则做拼接运算。</li><li>运算顺序是从左到右的。</li></ol><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//198</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token operator">+</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10098</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//103hello</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token operator">+</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hello1003</span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p>基本数据类型：数值型：整数类型：</p><p>byte[1] \ short[2] \ int[4] \ long[8]</p></li><li><p>基本数据类型：数值型：浮点类型：</p><p>float[4] \ double[8]</p></li><li><p>基本数据类型：字符型：</p><p>char[2]，存放单个字符’a’</p></li><li><p>基本数据类型：布尔型：</p><p>boolean[1]</p></li><li><p>引用数据类型：类（class）、接口（interface）、数组（[ ]）</p></li></ol><p>注：【2】表示存放两个字节</p><h3 id="整型细节"><a href="#整型细节" class="headerlink" title="整型细节"></a>整型细节</h3><ol><li><p>Java的整型常量默认为int，声明long型常量须后加”l“或者”L“</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4个字节</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> 1L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不对的</span><span class="token keyword">long</span> n3 <span class="token operator">=</span> 1L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对的</span></code></pre></li><li><p>Java程序中变量常声明为int。</p></li><li><p>计算机中最小存储单位：bit。计算机中基本存储单元：byte。一个byte=8个bit。</p></li></ol><h3 id="浮点数细节"><a href="#浮点数细节" class="headerlink" title="浮点数细节"></a>浮点数细节</h3><ol><li><p>浮点数 = 符号位+指数位+尾数位</p></li><li><p>Java的浮点型常量默认为double，声明float型常量须后加”f”或者“F”</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">float</span> n1 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不对的</span><span class="token keyword">float</span> n2 <span class="token operator">=</span> <span class="token number">1.1f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对的</span></code></pre></li><li><p>通常使用double。</p></li><li><p>浮点型使用陷阱：2.7和8.1 / 3 比较</p><p>​    后者结果是2.6999999997，是以精度显示的。</p><p><strong>所以当我们对运算结果是小数的进行相等判断时，要小心</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> num11 <span class="token operator">=</span> <span class="token number">2.7</span><span class="token punctuation">;</span><span class="token keyword">double</span> num12 <span class="token operator">=</span> <span class="token number">8.1</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2.7</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num11<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.7</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接近2.7的小数，而不是2.7</span><span class="token comment" spellcheck="true">//错误写法</span><span class="token keyword">if</span><span class="token punctuation">(</span> num11 <span class="token operator">==</span> num12<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//正确的写法：</span><span class="token keyword">if</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num11 <span class="token operator">-</span> num12<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.000001</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"差值非常小,到我的规定精度,可以认为相等."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//细节:如果是直接查询得到的小数或者直接赋值,是可以判断相等</span></code></pre></li></ol><h3 id="字符型细节"><a href="#字符型细节" class="headerlink" title="字符型细节"></a>字符型细节</h3><ol><li><p>字符常量是用单引号括起来的单个字符.</p></li><li><p>Java允许使用转义字符’\‘来将其后的字符转变为特殊字符型常量.  例如: char c3 = ‘\n’;   表示换行符</p></li><li><p>在java中,char的本质是一个整数,在默认输出时,是Unicode码对应的字符.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出'a' 对应的 数字</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//107</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token string">'b'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//98+1 == 99</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//99</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//99对应的字符 c</span></code></pre></li><li><p>字符类型本质:</p><p>字符型存储到计算机中,需要将字符型对应的码值(整数)找出来,比如’a’ 存储 ==&gt; 码值97 ==&gt; 0110 0001</p></li><li><p>ASCII编码表是一个字节表示,一个128个字符,实际上一个字节可以表示256个字符,只用128个.</p></li><li><p>Unicode编码表 固定大小的编码 使用两个字节来表示字符,字母和汉字统一都是占用两个字节.</p></li><li><p>utf - 8 编码表.大小可变的编码字母占一个字节,汉字使用3个字节.(表示的汉字更多)</p></li><li><p>gbk编码表,字母占一个字节,汉字占2个字节.</p></li></ol><h3 id="数据类型自动转换"><a href="#数据类型自动转换" class="headerlink" title="数据类型自动转换"></a>数据类型自动转换</h3><p><img src="https://img-blog.csdnimg.cn/eba5d610597941948e4993ceb4375f35.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><ol><li><p>有多种类型的数据混合运算时,系统首先自动将所有数据转换成容量最大的那种数据类型,然后再进行计算.</p></li><li><p>(byte , short)与char 之间不会相互自动转换.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//当把具体数赋给byte时,先判断该数是否在byte范围内,如果是就可以</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对,-128~127</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n2 是int</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> n2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,原因:如果是变量赋值,先判断类型</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> b1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,原因:byte不能自动转成char</span></code></pre></li><li><p>byte, short, char 他们三者可以计算,在计算时首先转换为int类型.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">short</span> s2 <span class="token operator">=</span> b2<span class="token operator">+</span>s1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,b2 + s1 => int</span><span class="token comment" spellcheck="true">//只要出现byte\short\char都会转换成先int再计算</span><span class="token keyword">byte</span> b4 <span class="token operator">=</span> b2 <span class="token operator">+</span> b3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误:b2 + b3 => int</span></code></pre></li><li><p>自动提升原则:表达式结果的类型自动提升为 操作数中最大的类型.</p></li></ol><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ol><li><p>使用时,要加上强制转换符(  ),但可能造成精度的损失!!!</p></li><li><p>强转符合只针对最近的操作数有效,往往使用小括号提升优先级</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">3.5</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译错误:double -> int</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">3.5</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//44</span></code></pre></li></ol><h3 id="基本数据类型和String类型的转换"><a href="#基本数据类型和String类型的转换" class="headerlink" title="基本数据类型和String类型的转换"></a>基本数据类型和String类型的转换</h3><ol><li><p>基本类型转String类型</p><p><img src="https://img-blog.csdnimg.cn/e7005cb9271e42b6ad6fe7a46fba356e.png" alt="img"></p></li><li><p>String类型转基本数据类型</p><p>通过基本类型的包装类调用parseXX方法</p><p><img src="https://img-blog.csdnimg.cn/4767ff73ad0b42e2a5e280fbcddd4b0d.png" alt="img"></p></li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//  / 除法的使用</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.5</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2.0</span><span class="token comment" spellcheck="true">//  % 取模,取余</span><span class="token comment" spellcheck="true">// 在 % 的本质 看一个公式 a % b = a - a / b * b</span><span class="token comment" spellcheck="true">//当a是小数时, 即公式 = a - (int)a / b * b</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -1</span><span class="token comment" spellcheck="true">//  ++的使用</span><span class="token comment" spellcheck="true">//  ++作为单独语句使用都是 i = i + 1;</span><span class="token comment" spellcheck="true">//  ++作为表达式使用:前++ : ++i先自增后赋值/后++ : i++先赋值后自增</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//java规则使用到了临时变量:(1)temp = i;(2)i=i+1;(3)i=temp;</span><span class="token number">1</span><span class="token punctuation">.</span>  result <span class="token operator">=</span> <span class="token number">59</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token comment" spellcheck="true">// 8</span>    result <span class="token operator">=</span> <span class="token number">59</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token comment" spellcheck="true">// 4   8个星期4天</span>    <span class="token number">2</span><span class="token punctuation">.</span>  <span class="token keyword">double</span> huas <span class="token operator">=</span> <span class="token number">234.5</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ss <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">/</span><span class="token number">9</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">234.5</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&amp;&amp; 和 &amp; 使用区别</p><ol><li>&amp;&amp;短路与: 如果第一个条件为false, 则第二个条件不会判断,最终结果为false, 效率高.</li><li>&amp; 逻辑与: 不管第一个条件判断是不是false,第二个条件还是会判断,效率低.</li><li>开发中,我们使用短路与&amp;&amp; ,效率高 </li></ol><p>|| 和 |使用区别</p><p><img src="https://img-blog.csdnimg.cn/7ce2e8c4e33c41eebbc9992c9137f2a0.png" alt="img"></p><p><strong>赋值运算符</strong></p><p>复合赋值运算符会进行类型转换.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>b <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b = b + 2;  实际上真正等价于 b = (byte)(b + 2);</span>b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等价于 b = (byte)(b + 1);</span><span class="token comment" spellcheck="true">//如果直接写</span>b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是错误的,类型是int型</span></code></pre><p><strong>三元运算符</strong></p><p>条件表达式 ? 表达式1 :  表达式2;</p><p>运算规则:</p><ol><li><p>如果条件表达式为true, 运算后的结果是表达式1;</p></li><li><p>如果条件表达式为false, 运算后的结果是表达式2;</p><p>口诀: 一真大师</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> a<span class="token operator">++</span><span class="token operator">:</span>b<span class="token operator">--</span>    <span class="token comment" spellcheck="true">//条件表达式为假/运行b--</span>    <span class="token comment" spellcheck="true">//结果为:先返回b的值,然后在 b-1</span>    <span class="token comment" spellcheck="true">//返回结果为99</span></code></pre><p>细节:</p><ol><li><p>表达式1和表达式2要为可以赋给接收变量的类型(或自动转换)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> <span class="token number">1.1</span> <span class="token operator">:</span> <span class="token number">2.3</span><span class="token comment" spellcheck="true">//语法错误</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1.1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">2.3</span><span class="token comment" spellcheck="true">//可以的</span><span class="token keyword">double</span> d <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> a <span class="token operator">:</span> b <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以的,满足int -> double</span></code></pre></li><li><p>三元运算符是一个整体</p><pre class=" language-java"><code class="language-java">Object obj1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出的是1.0,而不是1 </span><span class="token comment" spellcheck="true">//注意三元运算符是一个整体,会优先转换成最高精度的类型,再计算输出等</span></code></pre></li><li><p>三元运算符可以转换从if(…)else 语句</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实现三个数的最大值</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">553</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span><span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//思路</span><span class="token comment" spellcheck="true">//1.先得到 n1 和 n2 中最大数,保存到 max1</span><span class="token comment" spellcheck="true">//2.然后再 求出 max1 和 n3中的最大数,保存到 max2</span><span class="token keyword">int</span> max1 <span class="token operator">=</span> n1 <span class="token operator">></span> n2<span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">;</span><span class="token keyword">int</span> max2 <span class="token operator">=</span> max1 <span class="token operator">></span> n3<span class="token operator">?</span> max1 <span class="token operator">:</span> n3<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大数="</span> <span class="token operator">+</span> max2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="四种进制"><a href="#四种进制" class="headerlink" title="四种进制"></a>四种进制</h3><p>二进制, 满2进1. 以0b或0B开头.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二进制转换成八进制</span><span class="token comment" spellcheck="true">//从低位开始,将二进制数每三位一组,转成对应的八进制数即可</span><span class="token comment" spellcheck="true">//二进制转换成十六进制</span><span class="token comment" spellcheck="true">//从低位开始,将二进制数每四位一组,转成对应的十六进制数即可</span></code></pre><p>十进制, 满10进1.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//十进制转换成二进制</span><span class="token comment" spellcheck="true">//将该数不断除以2,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</span><span class="token comment" spellcheck="true">//十进制转换成八进制</span><span class="token comment" spellcheck="true">//将该数不断除以8,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</span><span class="token comment" spellcheck="true">//十进制转换成十六进制</span><span class="token comment" spellcheck="true">//将该数不断除以16,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</span></code></pre><p>八进制, 0-7, 满8进1. 以数字0开头表示.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//八进制转换成十进制</span><span class="token comment" spellcheck="true">//从最低位(右边)开始,将每个位上的数提取出来,乘以8的(位数-1)次方,求和</span>eg<span class="token operator">:</span><span class="token number">0234</span>转成十进制的数    <span class="token number">0234</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span>    <span class="token number">4</span> <span class="token operator">+</span><span class="token number">24</span> <span class="token operator">+</span><span class="token number">128</span> <span class="token operator">=</span><span class="token number">156</span><span class="token comment" spellcheck="true">//八进制转换成二进制</span><span class="token comment" spellcheck="true">//将八进制数每1位,转成对应的一个3位的二进制数</span></code></pre><p>十六进制, 0-9及A-F, 满16进1. 以0x或0X开头表示</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//十六进制转换成十进制</span><span class="token comment" spellcheck="true">//从最低位(右边)开始,将每个位上的数提取出来,乘以16的(位数-1)次方,求和</span>eg<span class="token operator">:</span><span class="token number">0x23A</span>转成十进制的数    <span class="token number">0x23A</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">570</span>     <span class="token comment" spellcheck="true">//十六进制转换成二进制</span><span class="token comment" spellcheck="true">//将十六进制数每1位,转成对应的一个4位的二进制数</span></code></pre><h3 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码\反码\补码"></a>原码\反码\补码</h3><ol><li>二进制的最高位(最左边)是符号位: 0表示正数, 1表示负数(老韩口诀:旋转90°   0 -&gt; 0   1 -&gt;  -)</li><li>正数的原码, 反码, 补码都一样(三码合一)</li><li>负数的反码 = 它的原码符号位不变, 其他位取反(0 -&gt; 1, 1 -&gt; 0)</li><li>负数的补码 = 负数的反码 + 1, 负数的反码 = 负数的补码 - 1</li><li>0的反码,补码都是0</li><li>java没有无符号数,换言之, Java中的数都是有符号的</li><li>在计算机运算的时候, 都是以<u><strong>补码的方式来运算</strong></u>的</li><li>当我们看运算结果的时候, 要看他的原码(!!!)</li></ol><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>7个位运算符(&amp; , | , ^ , ~ , &gt;&gt; , &lt;&lt; , &gt;&gt;&gt;)</p><p>按位与&amp;</p><p><img src="https://img-blog.csdnimg.cn/798c1e3d7bf947fb892f2cf854d2edce.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Yas55Oc5Yas55Oc5o6S6aqo5rGk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>按位或 | : 两位中有一个为1,结果为1</p><p>按位异或^ : 两位不同时为1, 相同为0</p><p>算术右移 &gt;&gt;  :低位溢出, 符号位不变, 并用符号位补溢出的高位 (如果是正数的话 本质是右移几位就除几次2)</p><p>算术左移 &lt;&lt; :符号位不变, 低位补0 (如果是正数的话 本质是左移几位就乘几次2)</p><p><img src="https://img-blog.csdnimg.cn/746bf9fef49e45a1aeeb333427ae33fb.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/089e1478260941f9839eaecdd11a55de.png" alt="img"></p><p>逻辑右移也叫无符号右移 &gt;&gt;&gt; : 低位溢出, 高位补0</p><h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//计算 -10.5%3 = ?</span><span class="token comment" spellcheck="true">//a % b 当a是小数时,公式 = a - (int)a/b*b</span><span class="token comment" spellcheck="true">//-10.5%3 = -10.5 - (-10)/3*3 = -10.5 + 9 = -1.5</span><span class="token comment" spellcheck="true">//注意: 有小数运算,得到结果是近似值</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10.5</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h2><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ol><li>switch 关键字, 表示switch分支</li><li>表达式 对应一个值</li><li>case 常量1: 当表达式的值等于常量1, 就执行 语句块1</li><li>break: 表示退出switch</li><li>如果和case 常量1匹配, 就执行语句块1, 如果没有匹配, 就继续匹配case 常量2</li><li>如果一个都没有匹配上, 执行default</li></ol><h3 id="switch细节"><a href="#switch细节" class="headerlink" title="switch细节"></a>switch细节</h3><ol><li><p>表达式数据类型, 应和case后的常量类型一致, 或者是可以自动转成可以相互比较的类型, 比如输入的是字符, 而常量是int</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">20</span> <span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>switch(表达式)中表达式的返回值必须是:(byte, short, int, char, enum[枚举], String)</p></li><li><p>case子句中的值必须是常量, 而不能是变量</p></li><li><p>default子句是可选的</p></li><li><p>break语句是用来在执行完一个case分支后使程序跳出switch语句块, 如果没有写break, 会出现<strong>穿透现象</strong>(程序会顺序执行到switch结尾)</p></li></ol><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>当return用在方法时, 表示跳出方法, 如果使用在main, 表示退出程序</p><p>谁调用(接收), 就返回给谁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> returnRes <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把方法 getSum 返回的值 ,赋给 变量 returnRes</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
